using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Management;
using System.Threading;
using System.Windows.Forms;


namespace Simulation_Options
{


    public sealed partial class RiverFlo2D : Form
    {

        //MessageBox.Show("Current directory: " + System.IO.Directory.GetCurrentDirectory().ToString());


        public static string _DATPathAndFile;
        public static string _DIPPath;

        public static bool loading = true;

        private readonly List<Control> _errors;
        private readonly DataManager _dataManager = DataManager.Instance;
        private string _currentProjectPathAndName = "";
        private string _currentProjectName = "";
        private string _currentProjectPath = "";
        private bool _updating;
        private string _saveAllwarnings = "";
        private string _emptyTables = "";
        private string _notLoadedFiles = "";
        private readonly ContextMenuStrip _optionsPopupMenu = new ContextMenuStrip();
        private string _riverFlow2Dp = "";
        private string _plotterWarnings = "";
        private string _startupPath = "";

        private bool _disablePlotter;
        private bool _isLite;
        private static List<TabPage> _savedTabPages;
        private static List<TabPage> _savedTabPagesAll;

        //Cores and Processors:
        private ManagementObjectSearcher _graphicCardNames;
        private int _numberOfCores = 0;
        private int _numberOfPhysicalProcessors = 0;
        private int _numberOfLogicalProcessors = 0;
        private int _numberOfLogicalProcessors2 = 0;

        public string graphicCards = "Graphic cards:\n";
        public string graphicCards_B = "Graphic cards:\n";
        public string graphicCards_C = "Graphic cards (c):\n";
        public string graphicCards_D = "Graphic cards (d):\n";
        public string graphicCards_E = "Graphic cards (e):\n";

        private bool _bridgeTabShowing = false;
        public bool CellValueChanged = false;
        public static string RiverDipModel;
        public static string RiverDipNewModel;
        public bool _closeAndOpen = false;
        public static Image LogoImage;
        public static Image LogoImageFaded;
        public bool InfiltrationpPametersChanged = false;
        public bool RainfallHydrographTableChanged = false;
        public bool WindPlusVelocitiesTableChanged = false;
        public bool OBCPSeriesTableChanged = false;
        public bool SOURCESSeriesTableChanged = false;

        public bool ObcpFileTableChanged = false;

        private string mainHeader;

        private class StationData
        {
            public double Offset;
            public bool InChannel;
            public bool Valid;
            public double Elevation;
            public double X;
            public double Y;
        }

        private class CrossSection
        {
            public string Name;
            public string ReachName;
            public int ValidStationCount; //Number of valid stations
            public int ValidChannelCount; //Number of valid stations inside the channel
            public List<StationData> StationValues;
        };

        private class LineCoords
        {
            public double X;
            public double Y;
            public double OffSet;
        };

        private class CutLine
        {
            public string name;
            public List<LineCoords> Vertices;
        }

        private class Banks
        {
            public int LeftBankIndex;
            public int RightBankIndex;
            public double LeftBankOffset;
            public double RightBankOffset;
        }

        private class PolyPoint
        {
            public double X;
            public double Y;
        }

        private class ReachPolygon
        {
            public string ReachName;
            public List<PolyPoint> ExternalLeftPolygon;
            public List<PolyPoint> ExternalRightPolygon;
            public List<PolyPoint> ExternalTopPolygon;
            public List<PolyPoint> ExternalBottomPolygon;
            public List<PolyPoint> ChannelLeftPolygon;
            public List<PolyPoint> ChannelRightPolygon;
            public List<PolyPoint> ChannelTopPolygon;
            public List<PolyPoint> ChannelBottomPolygon;

        }

        public ContextMenuStrip contextCutCopyPaste = new ContextMenuStrip();

        public DataGridView auxiliaryDataGridView = new DataGridView();
        public string auxiliaryFileName;

        public RiverFlo2D()
        {


            //Properties.Settings.Default.Language = "es-MX";
            //MessageBox.Show(Properties.Settings.Default.Language);
            //string culture = Application.CurrentCulture.Name;

            // Sets the UI culture to spanish (Mexico) or english (US)
            Universal.DIPLanguage = " Spanish";  // Spanish or English. 
                                                  // Don´t forget to also change  Language property in main form (design) to 
                                                  //  either "English (United States)" or "Spanish(Mexico)"
            Thread.CurrentThread.CurrentUICulture = new CultureInfo(Universal.Idioma("en-US", "es-MX"));

            //mainHeader = Universal.Idioma("Hydronia RiverFlow2D Data Input Program -(", "Hydronia RiverFlow2D Programa de Entrada de Datos -(");
			mainHeader = Universal.Idioma("Hydronia RiverFlow2D Data Input Program - ", "Hydronia RiverFlow2D Programa de Entrada de Datos - ");

			if (_DIPPath != null)
                Directory.SetCurrentDirectory(_DIPPath);

            InitializeComponent();

            try
            {

                contextCutCopyPaste.Items.Clear();
                contextCutCopyPaste.Items.Add("Cut");
                contextCutCopyPaste.Items.Add("Copy");
                contextCutCopyPaste.Items.Add("Paste");
                contextCutCopyPaste.ItemClicked += new ToolStripItemClickedEventHandler(contextCutCopyPaste_ItemClicked);

                // Set computer regional settings to US English.
                NumberFormatInfo nfi = CultureInfo.CurrentCulture.NumberFormat;
                if (nfi.NumberDecimalSeparator != ".")
                {
                    DialogResult dlgResult1 = MessageBox.Show(
                        "Your computer has '" + nfi.NumberDecimalSeparator +
                        "' as decimal separator.\n It needs to be changed to '.'. \n Would you like RiverFlow2D to change it?",
                        "RiverFlow2D", MessageBoxButtons.YesNo, MessageBoxIcon.Information);

                    if (dlgResult1 == DialogResult.Yes)
                    {
                        Thread.CurrentThread.CurrentCulture = new CultureInfo("en-US", false);
                        Thread.CurrentThread.CurrentUICulture = new CultureInfo("en-US", false);
                    }
                    else
                        Environment.Exit(0);
                }


                //Get model: "Model CPU GPS", "Model CPU", "Model FE", "Model 3.1"
                //MessageBox.Show("Current directory  open version.config: " + System.IO.Directory.GetCurrentDirectory().ToString());
                StreamReader s = File.OpenText("version.config");
                RiverDipModel = s.ReadLine();
                s.Close();

                //Set file where to look for .configs:
                if (RiverDipModel == "Model CPU" || RiverDipModel == "Model GPU")
                {
                    Universal.ConfigConfig = "configPlus.config";
                }
                else
                {
                    Universal.ConfigConfig = "config.config";
                }

                _dataManager.Init();

                _errors = new List<Control>();

                radioWSETime.Checked = true;
                txtTimeStepFactor.Enabled = false;
                radioDischargeTimeInflow.Checked = true;

                //Create items of treeView.
                {
                    CultureInfo cultureInfo = Thread.CurrentThread.CurrentUICulture;
                    //Universal.DIPLanguage = (cultureInfo.Name == "en-US" ? "English" : "Spanish");
                    //MessageBox.Show(cultureInfo.Name);
                    if (Universal.DIPLanguage == "Spanish")
                    {
                        var treeNode = new TreeNode("Control");
                        treeViewOptions.Nodes.Add(treeNode);

                        //treeNode = new TreeNode("Models");
                        //treeViewOptions.Nodes.Add(treeNode);
                        var node1 = new TreeNode("Transporte de Sedimentos");
                        var node2 = new TreeNode("Calidad del Agua");
                        var node3 = new TreeNode("Flujo de Lodos/Detritos");
                        var node4 = new TreeNode("Derrame de Petróleo");
                        var array = new TreeNode[] { node1, node2, node3, node4 };
                        treeNode = new TreeNode("Módulos", array);
                        treeViewOptions.Nodes.Add(treeNode);

                        node1 = new TreeNode("Lluvia/Evaporación");
                        node2 = new TreeNode("Datos en Entradas");
                        node3 = new TreeNode("Datos en Salidas");
                        node4 = new TreeNode("Alcantarillas");
                        var node5 = new TreeNode("Pilas de Puentes");
                        var node6 = new TreeNode("Condiciones de Contorno Abiertos");
                        var node7 = new TreeNode("Fuentes y Sumideros");
                        var node8 = new TreeNode("Vertederos");
                        var node9 = new TreeNode("Tablas Internas de Caudal");
                        var node10 = new TreeNode("Viento");
                        var node11 = new TreeNode("Puentes");
                        //node11.ForeColor = Color.Gray;
                        var node12 = new TreeNode("Compuertas");
                        var node13 = new TreeNode("Infiltración");
                        var node14 = new TreeNode("Brechas en Presas");
                        //node12.ForeColor = Color.Gray;
                        array = new TreeNode[]
                        {node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12, node13, node14};
                        treeNode = new TreeNode("Componentes", array);
                        treeViewOptions.Nodes.Add(treeNode);

                        node1 = new TreeNode("Opciones de Salida Gráfica");
                        node2 = new TreeNode("Reportes en Perfiles");
                        node3 = new TreeNode("Reportes en Secciones Transversales");
                        node4 = new TreeNode("Puntos de Observación");
                        //node5 = new TreeNode("River Animator");
                        node6 = new TreeNode("Herramientas");
                        array = new TreeNode[] { node1, node2, node3, node4, node6 };
                        treeNode = new TreeNode("Salida", array);
                        treeViewOptions.Nodes.Add(treeNode);

                        node1 = new TreeNode("Selección de Modelos");
						node2 = new TreeNode("Licencia");
                        array = new TreeNode[] { node1, node2 };
                        treeNode = new TreeNode("Opciones", array);
                        treeViewOptions.Nodes.Add(treeNode);

                        node1 = new TreeNode("Ayuda");
                        node2 = new TreeNode("Acerca de RiverFlow2D");
                        array = new TreeNode[] { node1, node2 };
                        treeNode = new TreeNode("Ver Ayuda", array);
                        treeViewOptions.Nodes.Add(treeNode);
                    }
                    else
                    {
                        var treeNode = new TreeNode("Control Data");
                        treeViewOptions.Nodes.Add(treeNode);

                        //treeNode = new TreeNode("Models");
                        //treeViewOptions.Nodes.Add(treeNode);
                        var node1 = new TreeNode("Sediment Transport");
                        var node2 = new TreeNode("Pollutant Transport");
                        var node3 = new TreeNode("Mud/Debris Flow");
                        var node4 = new TreeNode("Oil Spill on Land");
                        var array = new TreeNode[] { node1, node2, node3, node4 };
                        treeNode = new TreeNode("Modules", array);
                        treeViewOptions.Nodes.Add(treeNode);

                        node1 = new TreeNode("Rainfall/Evaporation");
                        node2 = new TreeNode("Inflow Boundary Data");
                        node3 = new TreeNode("Outflow Boundary Data");
                        node4 = new TreeNode("Culverts");
                        var node5 = new TreeNode("Bridge Piers");
                        var node6 = new TreeNode("Open Boundary Conditions");
                        var node7 = new TreeNode("Sources and Sinks");
                        var node8 = new TreeNode("Weirs");
                        var node9 = new TreeNode("Internal Rating Tables");
                        var node10 = new TreeNode("Wind");
                        var node11 = new TreeNode("Bridges");
                        //node11.ForeColor = Color.Gray;
                        var node12 = new TreeNode("Gates");
                        var node13 = new TreeNode("Infiltration");
                        var node14 = new TreeNode("Dam Breach");
                        //node12.ForeColor = Color.Gray;
                        array = new TreeNode[]
                        {node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12, node13, node14};
                        treeNode = new TreeNode("Components", array);
                        treeViewOptions.Nodes.Add(treeNode);

                        node1 = new TreeNode("Graphic Output Options");
                        node2 = new TreeNode("Profile Output");
                        node3 = new TreeNode("Cross Section Output");
                        node4 = new TreeNode("Observation Points");
                        //node5 = new TreeNode("River Animator");
                        node6 = new TreeNode("Tools");
                        array = new TreeNode[] { node1, node2, node3, node4, node6 };
                        treeNode = new TreeNode("Output", array);
                        treeViewOptions.Nodes.Add(treeNode);

                        node1 = new TreeNode("Model Selection");
						node2 = new TreeNode("License");
                        array = new TreeNode[] { node1, node2 };
                        treeNode = new TreeNode("Options", array);
                        treeViewOptions.Nodes.Add(treeNode);

                        node1 = new TreeNode("View Help");
                        node2 = new TreeNode("About RiverFlow2D");
                        array = new TreeNode[] { node1, node2 };
                        treeNode = new TreeNode("Help", array);
                        treeViewOptions.Nodes.Add(treeNode);
                    }

                    //Expand all nodes.
                    foreach (TreeNode tn in treeViewOptions.Nodes)
                    {
                        tn.Expand();
                    }

                    //Select Control Data tab
                    treeViewOptions.SelectedNode = treeViewOptions.Nodes[0];
                }

                rslipbcfactor.Enabled = false;
                initial_wse.Enabled = false;


            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 0804141042: error initializing RiverFlow2D. ", "ERROR 0804141042: error iniciando RiverFlow2D. ") +
                    ex.Message, "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
                Environment.Exit(0);
            }
        }

        public RiverFlo2D(string filename)
        {
            InitializeComponent();
            _dataManager.Init();

            _errors = new List<Control>();

            radioWSETime.Checked = true;
            txtTimeStepFactor.Enabled = false;
            radioDischargeTimeInflow.Checked = true;

            UpdateAllTabs();

        }

        //Changes the state of the program to select the use of metric or English units
        // 0 - Metric
        // 1 - English
        private void SetUnits(bool unit)
        {
            //Universal.RiverUnits = (unit ? Universal.Idioma("English", "Inglés") : Universal.Idioma("Metric", "Métrico"));
            Universal.RiverUnits = (unit ? "English" : "Metric");

            //Change units in column Rainfall and Evaporation in Rainfall/Evaporation tab
            dataRainfallEvaporation.Columns[1].HeaderText = Universal.Idioma("Rainfall (", "Lluvia (") + (unit ? "in/hrs." : "mm/hrs.") + ")";
            dataRainfallEvaporation.Columns[2].HeaderText = Universal.Idioma("Evaporation (", "Evaporación (") + (unit ? "in/hrs." : "mm/hrs.") + ")";

            //Change units column titles in outflow
            if (radioDischargeTimeOutflow.Checked)
            {
                dataOutflow.Columns[0].HeaderText = Universal.Idioma("Time (hrs)", "Tiempo (hrs)"); ;
                dataOutflow.Columns[1].HeaderText = "Q (" + (unit ? "ft3/s" : "m3/s") + ")";
            }
            else if (radioDischargeCurve.Checked)
            {
                dataOutflow.Columns[0].HeaderText = "Q (" + (unit ? "ft3/s" : "m3/s") + ")";
                dataOutflow.Columns[1].HeaderText = "WSEL (" + (unit ? "ft" : "m") + ")";
            }
            else // radioWSETime
            {
                dataOutflow.Columns[0].HeaderText = Universal.Idioma("Time (hrs)", "Tiempo (hrs)");
                dataOutflow.Columns[1].HeaderText = "WSEL (" + (unit ? "ft" : "m") + ")";
            }

            //Change units column titles in inflow
            if (radioDischargeTimeInflow.Checked)
            {
                dataTimeQ.Columns[0].HeaderText = Universal.Idioma("Time (hrs)", "Tiempo (hrs)");
                dataTimeQ.Columns[1].HeaderText = "Q (" + (unit ? "ft3/s" : "m3/s") + ")";
            }
            else // radioWSETimeInflow
            {
                dataTimeQ.Columns[0].HeaderText = Universal.Idioma("Time (hrs)", "Tiempo (hrs)");
                dataTimeQ.Columns[1].HeaderText = "WSEL (" + (unit ? "ft" : "m") + ")";
            }

            //Change Minimum Depth for Dry Bed
            if (txtMinimumDepth.Text == "0.3" && !unit) txtMinimumDepth.Text = "0.1";
            else if (txtMinimumDepth.Text == "0.1" && unit) txtMinimumDepth.Text = "0.3";

            //Culver variables labels and column titles
            lblCulvert_Hb.Text = Universal.Idioma("Barrel height (Hb) (", "Altura conducto (Hb) (") + (unit ? "ft" : "m") + "):";
            lblCulvert_Base.Text = Universal.Idioma("Barrel width (Base) (", "Ancho conducto (Base) (") + (unit ? "ft" : "m") + "):";
            lblCulvert_Dc.Text = Universal.Idioma("Diameter (Dc) (", "Diámetro (Dc) (") + (unit ? "ft" : "m") + "):";
            dataCulvertRatingTable.Columns[0].HeaderText = Universal.Idioma("Depth (", "Profundidad (") + (unit ? "ft" : "m") + ")";
            dataCulvertRatingTable.Columns[1].HeaderText = Universal.Idioma("Discharge (", "Caudal (") + (unit ? "ft3/s" : "m3/s") + ")";

            // Culverts
            //lblZ1.Text = "Z1 (" + (unit ? "ft" : "m") + "):";
            //lblZ2.Text = "Z2 (" + (unit ? "ft" : "m") + "):";

            //Pollutant Transport
            lblADLongitudinalDispersionCoeff.Text = Universal.Idioma("Longitudinal dispersion coefficient (", "Coeficiente de Dispersión longitudinal (") + (unit ? "ft2/s" : "m2/s") + "):";
            lblATransversalDispersionCoeff.Text = Universal.Idioma("Transversal dispersion coefficient (", "Coeficiente de Dispersión transversal (") + (unit ? "ft2/s" : "m2/s") + "):";

            //Pollutant Transport Plus
            lblPollutantTransportPlusDispersionCoeffPlus.Text = Universal.Idioma("Longitudinal dispersion coefficient (", "Coeficiente de Dispersión longitudinal (") +
                                                                (unit ? "ft2/s" : "m2/s") + "):";
            lblPollutantTransportPlusTransversalCoeff.Text = Universal.Idioma("Transversal dispersion coefficient (", "Coeficiente de Dispersión transversal (") + (unit ? "ft2/s" : "m2/s") +
                                                             "):";

            //Wind.
            lblUw.Text = "Uw (" + (unit ? "ft/s" : "m/s") + "):";
            lblVw.Text = "Vw (" + (unit ? "ft/s" : "m/s") + "):";

            //Mud/Debris.
            lblYieldStress.Text = Universal.Idioma("Yield stress (", "Esfuerzo de Cedencia (") + (unit ? "lb/in2" : "N/m2") + "):";
            lblBinghamViscosity.Text = Universal.Idioma("  Bingham viscosity (", "  Viscosidad (") + (unit ? "lb-s/in2" : "Pa*s") + "):";
            lblMaterialDensity.Text = Universal.Idioma("Material density (", "Densidad del material (") + (unit ? "lb/ft3" : "kg/m3") + "):";

            //Oil Spill on Land.
            lblOilSpillOnLandOilViscocity.Text = Universal.Idioma("  Oil viscosity (", "  Viscosidad (") + (unit ? "lb-s/in2" : "Pa*s") + "):";
            lblOilSpillOnLandOilDensity.Text = Universal.Idioma("Oil density (", "Densidad (") + (unit ? "lb/ft3" : "kg/m3") + "):";
            lblOilSpillOnLandYieldStress.Text = Universal.Idioma("Yield stress (", "Esfuerzo de Cedencia(") + (unit ? "lb/in2" : "N/m2") + "):";
            dataOilSpillOnLandTimeViscocityDensity.Columns[0].HeaderText = Universal.Idioma("Temperature (", "Temperatura (") + (unit ? "F" : "C") + "):";
            dataOilSpillOnLandTimeViscocityDensity.Columns[1].HeaderText = Universal.Idioma("Viscosity (", "Viscosidad (") + (unit ? "lb-s/in2" : "Pa*s") + "):";
            dataOilSpillOnLandTimeViscocityDensity.Columns[2].HeaderText = Universal.Idioma("Density (", "Densidad (") + (unit ? "lb/ft3" : "kg/m3") + "):";
            dataOilSpillOnLandTemperature.Columns[1].HeaderText = Universal.Idioma("Temperature (", "Temperatura (") + (unit ? "F" : "C") + "):";

			//Sediment Plus.
			llbSuspendedSedLongitudinalDispCoeff.Text = "Longitudinal (" + (unit ? "ft2/s" : "m2/s") + "):";
			lblSuspendedSedTransvCoeff.Text = "Transversal (" + (unit ? "ft2/s" : "m2/s") + "):";
			dataBedLoadSediment.Rows[1].Cells[0].Value = Universal.Idioma("Diameter D30 ", "Diámetro D30 ") + (unit ? "(ft)" : "(mts)");
            dataBedLoadSediment.Rows[2].Cells[0].Value = Universal.Idioma("Diameter D50 ", "Diámetro D50 ") + (unit ? "(ft)" : "(mts)");
            dataBedLoadSediment.Rows[3].Cells[0].Value = Universal.Idioma("Diameter D90 ", "Diámetro D90 ") + (unit ? "(ft)" : "(mts)");
            dataBedLoadSediment.Rows[0].Cells[0].Value = Universal.Idioma("Density ", "Densidad ") + (unit ? "(lb/ft3)" : "(kg/m3)");
            dataSuspendedSediment.Rows[0].Cells[0].Value = Universal.Idioma("Density ", "Densidad ") + (unit ? "(lb/ft3)" : "(kg/m3)");
            dataSuspendedSediment.Rows[2].Cells[0].Value = Universal.Idioma("Diameter ", "Diámetro ") + (unit ? "(ft)" : "(mts)");

            //Gates.
            dataGates.Columns[1].HeaderText = Universal.Idioma("Crest Elev. ", "Cota de Cresta ") + (unit ? "(ft)" : "(m)");
            dataGates.Columns[2].HeaderText = Universal.Idioma("Height ", "Altura ") + (unit ? "(ft)" : "(m)");
            dataGateOpenings.Columns[1].HeaderText = Universal.Idioma("Aperture ", "Abertura ") + (unit ? "(ft)" : "(m)");


            //Dam Breach.
            dataDamBreach.Columns[3].HeaderText = Universal.Idioma("Z Crest ", "Cresta Z ") + (unit ? "(ft)" : "(m)");
            dataDamBreachTemporalEvolution.Columns[1].HeaderText = Universal.Idioma("Width ", "Ancho ") + (unit ? "(ft)" : "(m)");
            dataDamBreachTemporalEvolution.Columns[2].HeaderText = Universal.Idioma("Height ", "Altura ") + (unit ? "(ft)" : "(m)");

            //Bridges.
            dataBridgeGeometry.Columns[0].HeaderText = "X " + (unit ? "(ft)" : "(m)");
            dataBridgeGeometry.Columns[1].HeaderText = Universal.Idioma("Bed ", "Fondo ") + (unit ? "(ft)" : "(m)");
            dataBridgeGeometry.Columns[2].HeaderText = Universal.Idioma("Z Lower ", "Z Bajo ") + (unit ? "(ft)" : "(m)");
            dataBridgeGeometry.Columns[3].HeaderText = Universal.Idioma("Z Upper ", "Z Alto ") + (unit ? "(ft)" : "(m)");
            dataBridgeGeometry.Columns[4].HeaderText = Universal.Idioma("Deck ", "Tablero ") + (unit ? "(ft)" : "(m)");

            //Infiltration.
            if (comboModelName.Text.Trim() == "Horton")
            {
                lblKDecayRate.Text = Universal.Idioma("K Decay Rate", "Tasa de Decaimiento K");
                lblFinalRate.Text = Universal.Idioma("Fc Final Rate (", "Tasa Final Fc (") + (unit ? "in/s" : "m/s") + "):";
                lblInitialRate.Text = Universal.Idioma("Fo Initial Rate (", "Fo Tasa Inicial (") + (unit ? "in/s" : "m/s") + "):";
            }
            if (comboModelName.Text.Trim() == "Green-Ampt")
            {
                lblKDecayRate.Text = Universal.Idioma("Hydraulic Conductivity", "Conductividad Hidráulica");
                lblFinalRate.Text = Universal.Idioma("Psi Wetting Front Soil Suction Head (", "Carga de succión en frente mojado (") + (unit ? "in" : "m") + "):";
                lblInitialRate.Text = "Delta Theta";
            }
            if (comboModelName.Text.Trim() == "SCS-CN")
            {
                lblKDecayRate.Text = Universal.Idioma("CN Curve Number", "Número CN");
                lblFinalRate.Text = Universal.Idioma("Potential Maximum Retention Constant", "Constante Máxima de Retención");
                lblInitialRate.Text = "";
            }

            //Mud/debris.
                if (comboYieldStressRelation.SelectedIndex == 0)
                {
                    // User defined.
                    Double Ys;
                    if (unit)
                    // Change to English units.
                    {
                        Ys = Convert.ToDouble(txtYieldStress.Text) * 0.0000145;
                        txtYieldStress.Text = Ys.ToString("0.00000000000");
                    }
                    else
                    // Change to Metric
                    {
                        Ys = Convert.ToDouble(txtYieldStress.Text) / 0.0000145;
                        txtYieldStress.Text = Ys.ToString("0.00000000");
                    }
                }
                else
                    UpdateYieldStress();


                if (comboViscosityRelation.SelectedIndex == 0)
                {
                    // User defined.
                    Double Vis;
                    if (unit)
                    // Change to English units.
                    {
                        Vis = Convert.ToDouble(txtBinghamViscosity.Text) * 0.0000145;
                        txtBinghamViscosity.Text = Vis.ToString("0.00000000000");
                    }
                    else
                    // Change to Metric
                    {
                        Vis = Convert.ToDouble(txtBinghamViscosity.Text) / 0.0000145;
                        txtBinghamViscosity.Text = Vis.ToString("0.00000000");
                    }
                }
                else
                    UpdateViscosity();


                if (unit)
                    // Change to English units.
                    chckMaterialDensity.Text = "62.37191*(1+(2.65-1)*Cv)";
                else
                // Change to Metric
                    chckMaterialDensity.Text = "1000*(1+(2.65-1)*Cv)";
                UpdateMaterialDensity();
        }

        private static bool CheckForReal(TextBox textBox, KeyPressEventArgs e)
        {
            //check if pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                return true;
            else if (e.KeyChar == '.')
                //check if there is already a decimal point
                if (textBox.Text.Contains("."))
                    return true;
                else
                    return false;
            else
                return false;

        }

        private static bool CheckForInteger(TextBox textBox, KeyPressEventArgs e)
        {
            //check if pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '\b')
                return true;
            else
                return false;

        }

        private string[] RemoveDuplicates(IEnumerable<string> list)
        {
            var uList = new List<string>();
            foreach (string s in list)
            {
                if (s.Length > 1)
                    if (!uList.Contains(s))
                    {
                        uList.Add(s);
                    }
            }
            return uList.ToArray();
        }

        private void btnCancel_Click(object sender, EventArgs e)
        {
            Close();
        }

        private void radioMetric_CheckedChanged(object sender, EventArgs e)
        {
            if (radioMetric.Checked == true)
                SetUnits(false);
        }

        private void radioEnglish_CheckedChanged(object sender, EventArgs e)
        {
            if (radioEnglish.Checked == true )
                SetUnits(true);
        }

        private void radioWSETime_CheckedChanged(object sender, EventArgs e)
        {
            bool unit = radioEnglish.Checked;
            if (radioDischargeTimeOutflow.Checked)
            {
                dataOutflow.Columns[0].HeaderText = Universal.Idioma("Time (hrs)", "Tiempo (hrs)"); ;
                dataOutflow.Columns[1].HeaderText = "Q (" + (unit ? "ft3/s" : "m3/s") + ")";
            }
            else if (radioDischargeCurve.Checked)
            {
                dataOutflow.Columns[0].HeaderText = "Q (" + (unit ? "ft3/s" : "m3/s") + ")";
                dataOutflow.Columns[1].HeaderText = "WSEL (" + (unit ? "ft" : "m") + ")";
            }
            else // radioWSETime
            {
                dataOutflow.Columns[0].HeaderText = Universal.Idioma("Time (hrs)", "Tiempo (hrs)"); ;
                dataOutflow.Columns[1].HeaderText = "WSEL (" + (unit ? "ft" : "m") + ")";
            }
        }

        private void OpenAllRequiredFiles(string filename)
        {
            loading = true;
            try
            {
                #region Region For loading all files that are always loaded

                FileInfo fileinf = new FileInfo(filename);
                //Get the header name for all files
                string[] dirs = filename.Split(new Char[] { '\\' });
                string fileheader = dirs[dirs.Length - 1];
                fileheader = fileheader.Remove(fileheader.Length - 3);
                _notLoadedFiles = "";

                if (!File.Exists(filename) || fileinf.Length < 1)
                {
                    if (_DIPPath == null)
                    {//DIP is not called from SMS. or QGIS, .DAT must exist.
                        MessageBox.Show(Universal.Idioma("ERROR 1610131228: file\n\n" + filename + "\n\ndoesn't exist or it's empty.\n\nA  *.DAT file is required to open RiverFlow2D.",
														"ERROR 1610131228: el archivo\n\n" + filename + "\n\nno existe o está vacío.\n\nUn archivo  *.DAT es requerido para abrir RiverFlow2D."),
                            "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);

                        return;
                    }
                }
                else
                {
                    //Remove all error messages from all panels.
                    RemoveAllErrorMessages();


                    //Reset global sructures.
                    Universal.SecondaryGroups.Clear();

                    txtSimulationTime.Text = "";
                    txtOutputInterval.Text = "";

                    //Set combo boxes indexes to -1 (only the ones in panels that are optional).
                    //Culverts:
                    comboCulvertManning.SelectedIndex = -1;
                    comboEntranceLossCoefficient.SelectedIndex = -1;
                    comboNBarrels.SelectedIndex = -1;
                    comboInletControlFormulaCoefficients.SelectedIndex = -1;
                    comboCulvert_m.SelectedIndex = -1;
                    //Sediment Transport:
                    comboTransportFormula.SelectedIndex = -1;
                    //Graphic Output Options:
                    comboGraphCode.SelectedIndex = -1;
                    //Mud/Debris:
                    comboFlowResistanceRelation.SelectedIndex = -1;
                    //Oil Spill on Land:
                    comboOilFlowResistance.SelectedIndex = -1;
                    //Sediment Transport Plus
                    //comboSuspendedSedimentTypeFormula.SelectedIndex =-1;
                    //comboLanguage.SelectedIndex = -1;

                    //--------------------------
                    // .DAT
                    //--------------------------

                    StreamReader s = File.OpenText(filename);
                    string version = s.ReadLine();
                    int model = Convert.ToInt32(s.ReadLine());
                    s.Close();

                    //Change GUI according to model:
                    if (model == 0)
                        SetRiverDipModel("Model FE");
                    else if (model == 1)
                        SetRiverDipModel("Model CPU");
                    else if (model == 2)
                        SetRiverDipModel("Model GPU");
                    else
                        SetRiverDipModel("Model CPU");

                    //See if file is version 2013 or 2014 and convert it to 2013
                    int pos2018 = version.IndexOf("2018");
                    int pos2017 = version.IndexOf("2017");
                    int pos2014 = version.IndexOf("2014");
                    int pos2013 = version.IndexOf("2013");
                    if (pos2018 == -1 && pos2017 == -1 && pos2014 == -1 && pos2013 == -1)
                    {
                        //.DAT is not version 2013, 2014  or 2017
                        //Convert other versions to 2017.
                        try
                        {
                            string suffix;
                            if (RiverDipModel == "Model FE")
                                suffix = "_FE";
                            else if (RiverDipModel == "Model GPU")
                                suffix = "_PLUS_GPU";
                            else
                                suffix = "_PLUS";

                            string projectName = filename.Remove(filename.Length - 4);

                            filename = filename.Remove(filename.Length - 4) + suffix + ".DAT";
                            fileheader = fileheader.Remove(fileheader.Length - 1) + suffix + ".";

                            //Change name of files. 

                            RewriteDATas2013(projectName, suffix);
                            ConvertFileToNewVersion(projectName, ".SED", suffix);
                            ConvertFileToNewVersion(projectName, ".AD", suffix);
                            ConvertFileToNewVersion(projectName, ".RET", suffix);
                            ConvertFileToNewVersion(projectName, ".CULVERTS", suffix);
                            ConvertFileToNewVersion(projectName, ".PIERS", suffix);
                            ConvertFileToNewVersion(projectName, ".IFL", suffix);
                            ConvertFileToNewVersion(projectName, ".SOURCES", suffix);
                            ConvertFileToNewVersion(projectName, ".WEIRS", suffix);
                            ConvertFileToNewVersion(projectName, ".IRT", suffix);
                            ConvertFileToNewVersion(projectName, ".PLT", suffix);
                            ConvertFileToNewVersion(projectName, ".PROFILES", suffix);
                            ConvertFileToNewVersion(projectName, ".XSECS", suffix);
                            ConvertFileToNewVersion(projectName, ".OBS", suffix);
                            ConvertFileToNewVersion(projectName, ".PLOT", suffix);
                            ConvertFileToNewVersion(projectName, ".WIND", suffix);
                            ConvertFileToNewVersion(projectName, ".FED", suffix);

                            MessageBox.Show(
                                "FILE CONVERSION: " + Environment.NewLine + Environment.NewLine +
                                "Files belong to a previous version of RiverFlow2D." + Environment.NewLine +
                                "They were converted to " + RiverDipModel + "." + Environment.NewLine + Environment.NewLine +
                                "New files were named  '" + fileheader.Remove(fileheader.Length - 1) +
                                "' followed by the extension (.DAT, .XSECS, .SED, etc.).", "RiverFlow2D", MessageBoxButtons.OK,
                                MessageBoxIcon.Information);

                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show(Universal.Idioma("ERROR 2312111012: error trying to convert old file ", "ERROR 2312111012: error convirtiendo archivo viejo ") +
                                filename + ". " + ex.Message + ".",
                                "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                    }

                    //loading = true;
                    _dataManager.LoadControlDataFromFile(filename);
                    UpdateWithDatFile();
                    //loading = false;
                }

                int index = filename.LastIndexOf("\\");
                _currentProjectPath = filename.Remove(index);

                FileInfo fileinfo;

                //-----------------------------
                //Open boundary conditions .IFL
                //-----------------------------
                string filenameIFL = filename.Remove(filename.Length - 3) + "IFL";
                if (File.Exists(filenameIFL))
                {
                    fileinfo = new FileInfo(filenameIFL);
                    if (fileinfo.Length > 1)
                    {
                        try
                        {
                            _dataManager.LoadOpenBoundaryConditionsFromFile(filenameIFL);
                            UpdateWithIFLFile();
                        }
                        catch
                        {
                            MessageBox.Show(Universal.Idioma("ERROR 2399110803: error while opening file ", "ERROR 2399110803: error abriendo archivo ") +
                                fileheader + "IFL.", "RiverFlow2D",
                                MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                    }
                    else
                        MessageBox.Show(Universal.Idioma("WARNING: file " + fileheader + "IFL" + " is empty.", "ADVERTENCIA: el archivo " + fileheader + "IFL" + " está vacío."),
                            "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }

                //It doesn't mater that the file doesn't exist (model will create it)
                //else notLoadedFiles += "\n" + "     ° File " + fileheader + "IFL (Open Boundary Conditions)";

                // .FED and .TBA also are required for the model but they are not loaded for this program


                //--------------------------
                // .PLOT
                //--------------------------
                if (!_disablePlotter)
                {
                    string filenamePLOT = filename.Remove(filename.Length - 3) + "PLOT";
                    if (File.Exists(filenamePLOT))
                    {
                        fileinfo = new FileInfo(fileName: filenamePLOT);
                        if (fileinfo.Length > 1)
                        {
                            try
                            {

                                _dataManager.LoadPlotFromFile(filenamePLOT);
                                string filenameMBAL = filename.Remove(filename.Length - 3) + "MBAL";
                                ReadTimesFromMbaLfile(filenameMBAL);
                                UpdateWithPLOTFile();
                                if (txtStartDateTime.Text != "")
                                {
                                    if (txtStartDateTime.Text != "")
                                        startDateTimePicker.Value = DateTime.Parse(txtStartDateTime.Text);
                                }
                            }
                            catch
                            {
                                MessageBox.Show(Universal.Idioma("ERROR 2704121113: error while reading .PLOT file", "ERROR 2704121113: error leyendo .PLOT"),
                                    "RiverFlow2D", MessageBoxButtons.OK,
                                    MessageBoxIcon.Error);
                            }
                        }
                        else
                            MessageBox.Show(Universal.Idioma("WARNING: file " + fileheader + "PLOT" + " is empty.", "ADVERTENCIA: el archivo " + fileheader + "PLOT" + " está vacío."),
                                "RiverFlow2D", MessageBoxButtons.OK,
                                MessageBoxIcon.Warning);
                    }
                }


                #endregion End of region for all files that are always loaded

                #region Region for all files that are loaded if checked

                //-------------------------------
                // load rainfall/evaporation .RET
                //-------------------------------
                ////if (chckRainfallEvaporation.Checked)
                ////{
                ////	string filenameRET = filename.Remove(filename.Length - 3) + "RET";
                ////	if (File.Exists(filenameRET))
                ////	{
                ////		fileinfo = new FileInfo(filenameRET);
                ////		if (fileinfo.Length > 1)
                ////		{
                ////			try
                ////			{
                ////				_dataManager.LoadRainfallFromFile(filenameRET);
                ////				UpdateWithRETFile();
                ////			}
                ////			catch
                ////			{
                ////				MessageBox.Show(Universal.Idioma("ERROR 2810111710: error trying to open file " + fileheader + "RET.", "RiverFlow2D",
                ////												MessageBoxButtons.OK, MessageBoxIcon.Error);
                ////			}
                ////		}
                ////		else
                ////			MessageBox.Show("WARNING: file " + fileheader + "RET" + " is empt.y", "RiverFlow2D", MessageBoxButtons.OK,
                ////											MessageBoxIcon.Warning);

                ////	}
                ////	else _notLoadedFiles += "\n" + "     ° File " + fileheader + "RET (Rainfall/Evaporation).";
                ////}

                //-------------------------------
                // load rainfall/evaporation .LRAIN
                //-------------------------------
                if (chckRainfallEvaporation.Checked)
                {
                    string filenameLRAIN = filename.Remove(filename.Length - 3) + "LRAIN";
                    if (File.Exists(filenameLRAIN))
                    {
                        fileinfo = new FileInfo(filenameLRAIN);
                        if (fileinfo.Length > 1)
                        {
                            try
                            {
                                _dataManager.LoadLRainFallFromFile(filenameLRAIN);
                                UpdateWithLRAINFile();
                            }
                            catch
                            {
                                MessageBox.Show(Universal.Idioma("ERROR 2302151514: error trying to open file ", "ERROR 2302151514: error abriendo archivo ") +
                                    fileheader + "LRAIN.", "RiverFlow2D",
                                    MessageBoxButtons.OK, MessageBoxIcon.Error);
                            }
                        }
                        else
                            MessageBox.Show(Universal.Idioma("WARNING: file " + fileheader + "RET" + " is empty.", "ADVERTENCIA: el archivo " + fileheader + "RET" + " está vacío."),
                                "RiverFlow2D", MessageBoxButtons.OK,
                                MessageBoxIcon.Warning);

                    }
                    else _notLoadedFiles += "\n" + "     ° File " + fileheader + "RET (Rainfall/Evaporation).";
                }

                //--------------------------
                //load profiles .PROFILES
                //--------------------------
                if (chckOutputResultsProfile.Checked)
                {
                    string filenamePROFILES = filename.Remove(filename.Length - 3) + "PROFILES";
                    if (File.Exists(filenamePROFILES))
                    {
                        fileinfo = new FileInfo(filenamePROFILES);
                        if (fileinfo.Length > 1)
                        {
                            try
                            {
                                _dataManager.LoadProfileCutsFromFile(filenamePROFILES);
                                UpdateWithPROFILESFile();
                            }
                            catch
                            {
                                MessageBox.Show(Universal.Idioma("ERROR 2810111711: error trying to open file ", "ERROR 2810111711: error abriendo archivo ") +
                                    fileheader + "PROFILES.", "RiverFlow2D",
                                    MessageBoxButtons.OK, MessageBoxIcon.Error);
                            }
                        }
                        else
                            MessageBox.Show(Universal.Idioma("WARNING: file " + fileheader + "PROFILES" + " is empty.", "ADVERTENCIA: el archivo " + fileheader + "PROFILES" + " está vacío."),
                                "RiverFlow2D", MessageBoxButtons.OK,
                                MessageBoxIcon.Warning);

                    }
                    else _notLoadedFiles += "\n" + "     ° File " + fileheader + "PROFILES (Output Results Profiles).";
                }

                //--------------------------
                //load cross sections .XSECS
                //--------------------------
                if (chckOutputResultsCrossSections.Checked)
                {
                    string filenameXSECS = filename.Remove(filename.Length - 3) + "XSECS";
                    if (File.Exists(filenameXSECS))
                    {
                        fileinfo = new FileInfo(filenameXSECS);
                        if (fileinfo.Length > 1)
                        {
                            try
                            {
                                _dataManager.LoadCrossSectionsFromFile(filenameXSECS);
                                UpdateWithXSECSFile();
                                UpdateData(dataCrossSection);
                            }
                            catch
                            {
                                MessageBox.Show(Universal.Idioma("ERROR 2399110900: error trying to open file ", "ERROR 2399110900: error abriendo archivo ") +
                                    fileheader + "XSECS.",
                                    "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            }
                        }
                        else
                            MessageBox.Show(Universal.Idioma("WARNING: file " + fileheader + "XSECS" + " is empty.", "ADVERTENCIA: el archivo " + fileheader + "XSECS" + " está vacío."),
                                "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Warning);

                    }
                    else _notLoadedFiles += "\n" + "     ° File " + fileheader + "XSECS (Cross Sections).";
                }

                //--------------------------
                //load culverts .CULVERTS
                //--------------------------
                if (chckCulverts.Checked)
                {
                    string filenameCULVERTS = filename.Remove(filename.Length - 3) + "CULVERTS";
                    if (File.Exists(filenameCULVERTS))
                    {
                        fileinfo = new FileInfo(filenameCULVERTS);
                        if (fileinfo.Length > 1)
                        {
                            try
                            {

                                _dataManager.LoadCulvertsFromFile(filenameCULVERTS);
                                UpdateWithCULVERTSFile();
                            }
                            catch
                            {
                                MessageBox.Show(Universal.Idioma("ERROR 2399110901: error trying to open file ", "ERROR 2399110901: error abriendo archivo ") +
                                    fileheader + "CULVERTS.",
                                    "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            }
                        }
                        else
                            MessageBox.Show(Universal.Idioma("WARNING: file " + fileheader + "CULVERTS" + " is empty.", "ADVERTENCIA: el archivo " + fileheader + "CULVERTS" + " está vacío."),
                                "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Warning);

                    }
                    else _notLoadedFiles += "\n" + "     ° File " + fileheader + "CULVERTS (Culverts).";
                }

                //--------------------------
                //Observation points .OBS
                //--------------------------
                if (chckResultsAtObservationPoints.Checked)
                {
                    string filenameOBS = filename.Remove(filename.Length - 3) + "OBS";
                    if (File.Exists(filenameOBS))
                    {
                        fileinfo = new FileInfo(filenameOBS);
                        if (fileinfo.Length > 1)
                        {
                            try
                            {
                                _dataManager.LoadObservationPointsFromFile(filenameOBS);
                                UpdateWithOBSFile();
                            }
                            catch
                            {
                                MessageBox.Show(Universal.Idioma("ERROR 2399110755: error trying to open file ", "ERROR 2399110755: error abriendo archivo ") +
                                    fileheader + ".OBS.", "RiverFlow2D",
                                    MessageBoxButtons.OK, MessageBoxIcon.Error);
                            }
                        }
                        else
                            MessageBox.Show(Universal.Idioma("WARNING: file " + fileheader + "OBS" + " is empty.", "ADVERTENCIA: el archivo" + fileheader + "OBS" + " está vacío."),
                                "RiverFlow2D", MessageBoxButtons.OK,
                                MessageBoxIcon.Warning);

                    }
                    else _notLoadedFiles += "\n" + "     ° File " + fileheader + "OBS (Observation Points).";

                }

                //--------------------------
                //load Piers .PIERS
                //--------------------------
                if (chckPiers.Checked)
                {
                    string filenamePIERS = filename.Remove(filename.Length - 3) + "PIERS";
                    if (File.Exists(filenamePIERS))
                    {
                        fileinfo = new FileInfo(filenamePIERS);
                        if (fileinfo.Length > 0)
                        {
                            try
                            {
                                _dataManager.LoadPiersFromFile(filenamePIERS);
                                UpdateWithPiersFile();
                            }
                            catch
                            {
                                MessageBox.Show(Universal.Idioma("ERROR 2399110902: error trying to open file ", "ERROR 2399110902: error abriendo archivo ") +
                                    fileheader + "PIERS.", "RiverFlow2D",
                                    MessageBoxButtons.OK, MessageBoxIcon.Error);
                            }
                        }
                        else
                            MessageBox.Show(Universal.Idioma("WARNING: file " + fileheader + "PIERS" + " is empty.", "ADVERTENCIA: el archivo" + fileheader + "PIERS" + " está vacío."),
                                "RiverFlow2D", MessageBoxButtons.OK,
                                MessageBoxIcon.Warning);
                    }
                    else _notLoadedFiles += "\n" + "     ° File " + fileheader + "PIERS (Bridge Piers).";
                }

                //--------------------------
                //load sources .SOURCES
                //--------------------------
                if (chckSourcesAndSinks.Checked)
                {
                    string filenameSOURCES = filename.Remove(filename.Length - 3) + "SOURCES";
                    if (File.Exists(filenameSOURCES))
                    {
                        fileinfo = new FileInfo(filenameSOURCES);
                        if (fileinfo.Length > 1)
                        {
                            try
                            {
                                _dataManager.LoadSourcesFromFile(filenameSOURCES);
                                UpdateWithSOURCESFile();
                            }
                            catch
                            {
                                MessageBox.Show(Universal.Idioma("ERROR 2399110903: error trying to open file ", "ERROR 2399110903: error abriendo archivo ") +
                                    fileheader + "SOURCES.", "RiverFlow2D",
                                    MessageBoxButtons.OK, MessageBoxIcon.Error);
                            }
                        }
                        else
                            MessageBox.Show(Universal.Idioma("WARNING: file " + fileheader + "SOURCES" + " is empty.", "ADVERTENCIA: el archivo" + fileheader + "SOURCES" + " está vacío."),
                                "RiverFlow2D", MessageBoxButtons.OK,
                                MessageBoxIcon.Warning);

                    }
                    else _notLoadedFiles += "\n" + "     ° File " + fileheader + "SOURCES (Sources and Sinks).";
                }

                //--------------------------
                //load weirs .WEIRS
                //--------------------------
                if (chckWeirs.Checked)
                {
                    string filenameWEIRS = filename.Remove(filename.Length - 3) + "WEIRS";
                    if (File.Exists(filenameWEIRS))
                    {
                        fileinfo = new FileInfo(filenameWEIRS);
                        if (fileinfo.Length > 1)
                        {
                            try
                            {
                                _dataManager.LoadWeirsFromFile(filenameWEIRS);
                                UpdateWithWEIRSFile();
                            }
                            catch
                            {
                                MessageBox.Show(Universal.Idioma("ERROR 0112111914: error trying to open file ", "ERROR 0112111914: error abriendo a rchivo ") +
                                    fileheader + "WEIRS.", "RiverFlow2D",
                                    MessageBoxButtons.OK, MessageBoxIcon.Error);
                            }
                        }
                        else
                            MessageBox.Show(Universal.Idioma("WARNING: file " + fileheader + "WEIRS" + " is empty.", "ADVERTENCIA: el archivo" + fileheader + "WEIRS" + " está vacío."),
                                "RiverFlow2D", MessageBoxButtons.OK,
                                MessageBoxIcon.Warning);

                    }
                    else _notLoadedFiles += "\n" + "     ° File " + fileheader + "WEIRS (Weirs).";
                }


                if (RiverDipModel == "Model CPU" || RiverDipModel == "Model GPU")
                {
                    //Make table dataPollutantTransportPlusSolutes available to all modules.
                    //Universal.Solutes = dataPollutantTransportPlusSolutes;

                    //---------------------------------------------------------
                    //Sediment transport for the PLUS version (.SEDS and .SEDB)
                    //---------------------------------------------------------
                    if (radioSedimentTransport.Checked)
                    {
                        string filenameSEDS = filename.Remove(filename.Length - 3) + "SEDS";
                        string filenameSEDB = filename.Remove(filename.Length - 3) + "SEDB";

                        if (File.Exists(filenameSEDS))
                        {
                            if (File.Exists(filenameSEDB))
                            {
                                fileinfo = new FileInfo(filenameSEDS);
                                if (fileinfo.Length > 1)
                                {
                                    try
                                    {
                                        //dataBedLoadSediment.CausesValidation = false;
                                        RemoveColumnsFromTable(dataSuspendedSediment, 1);
                                        RemoveColumnsFromTable(dataBedLoadSediment, 1);

                                        SEDPLUSFile.AddColumnsToSuspendedSedimentTable(filenameSEDS, dataSuspendedSediment);
                                        SEDPLUSFile.AddColumnsToBedLoadSedimentTable(filenameSEDS, dataBedLoadSediment);

                                        _dataManager.LoadSedsFromFile(filenameSEDS);

                                        if (SEDPLUSFile.SEDSLoaded)
                                        {
                                            UpdateWithSEDSFile();
                                            FixGraphicOutputPlotOptionsForSedimentPlus();
                                        }
                                        else
                                        {
                                            RemoveColumnsFromTable(dataSuspendedSediment, 1);
                                            SEDPLUSFile.DeploySuspendedSedimentHeaders(dataSuspendedSediment);
                                        }

                                        if (SEDPLUSFile.SEDBLoaded)
                                        {
                                            UpdateWithSEDBFile();
                                            if (comboBedLoadSedimentTypeFormula.SelectedIndex == 5)
                                                DataBedLoadSedimentReadOnly(false);
                                            else
                                                DataBedLoadSedimentReadOnly(true);
                                        }
                                        else
                                        {
                                            RemoveColumnsFromTable(dataBedLoadSediment, 1);
                                            //SEDPLUSFile.DeployBedLoadSedimentHeaders(dataBedLoadSediment);
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        MessageBox.Show(Universal.Idioma("ERROR 1510131545: error trying to open file ", "ERROR 1510131545: error abriendo archivo ") +
                                            filenameSEDS + ". " + ex.Message,
                                            "RiverFlow2D",
                                            MessageBoxButtons.OK,
                                            MessageBoxIcon.Error);
                                    }
                                }
                                else
                                    MessageBox.Show(Universal.Idioma("WARNING: file " + filenameSEDS + " is empty.", "ADVERTENCIA: el archivo" + filenameSEDS + " está vacío."),
                                        "RiverFlow2D", MessageBoxButtons.OK,
                                        MessageBoxIcon.Warning);
                            }
                            else _notLoadedFiles += "\n" + "     ° File " + fileheader + "SEDB (Sediment Transport).";
                        }
                        else _notLoadedFiles += "\n" + "     ° File " + fileheader + "SEDS (Sediment Transport).";
                    }
                    else

                    //---------------------------------------------------------
                    //Pollutant Transport for the PLUS version (.SOLUTES and .SOLUTES)
                    //---------------------------------------------------------
                    if (radioPollutantTransport.Checked)
                    {
                        string filenameSOLUTES = filename.Remove(filename.Length - 3) + "SOLUTES";

                        if (File.Exists(filenameSOLUTES))
                        {
                            fileinfo = new FileInfo(filenameSOLUTES);
                            if (fileinfo.Length > 1)
                            {
                                try
                                {
                                    //Clean Pollutant Transport panel.
                                    if (dataPollutantTransportPlusSolutes.RowCount > 2) dataPollutantTransportPlusSolutes.Rows.Clear();
                                    RemoveError(txtPollutantTransportPlusDispersionCoeff);
                                    RemoveError(txtPollutantTransportPlusTransversalCoeff);
                                    //_dataManager.Set("POLL_TRANSP_PLUS_LONGITUDINAL_DISP_COEFF",0.0);
                                    //_dataManager.Set("POLL_TRANSP_PLUS_TRANSVERSAL_DISP_COEFF", 0.0);

                                    //Read .SOLUTES.
                                    _dataManager.LoadSolutesFromFile(filenameSOLUTES);
                                    UpdateWithSolutesFile();
                                    FixGraphicOutputPlotOptionsForPollutantTransport();
                                }
                                catch
                                {
                                    MessageBox.Show(Universal.Idioma("ERROR 1203141023: error trying to open .SOLUTES file.", "ERROR 1203141023: error abriendo archivo .SOLUTES."),
                                        "RiverFlow2D", MessageBoxButtons.OK,
                                        MessageBoxIcon.Error);
                                }
                            }
                            else _notLoadedFiles += "\n" + "     ° File " + fileheader + "SOLUTES (Pollutant Transport).";
                        }

                    }
                }
                else
                {
                    //--------------------------
                    //load sediment .SED
                    //--------------------------
                    if (radioSedimentTransport.Checked)
                    {
                        string filenameSED = filename.Remove(filename.Length - 3) + "SED";
                        if (File.Exists(filenameSED))
                        {
                            fileinfo = new FileInfo(filenameSED);
                            if (fileinfo.Length > 1)
                            {
                                try
                                {
                                    _dataManager.LoadSedimentFromFile(filenameSED);
                                    UpdateWithSedFile();
                                }
                                catch
                                {
                                    MessageBox.Show(Universal.Idioma("ERROR 2399110904: error trying to open file ", "ERROR 2399110904: error abriendo archivo ") +
                                        fileheader + "SED.", "RiverFlow2D",
                                        MessageBoxButtons.OK, MessageBoxIcon.Error);
                                }
                            }
                            else
                                MessageBox.Show(Universal.Idioma("WARNING: file " + fileheader + "SED" + " is empty.", "ADVERTENCIA: el archivo" + fileheader + "SED" + " está vacío."),
                                    "RiverFlow2D", MessageBoxButtons.OK,
                                    MessageBoxIcon.Warning);

                        }
                        else _notLoadedFiles += "\n" + "     ° File " + fileheader + "SED (Sediment Transport).";
                    }
                }

                //--------------------------
                //load advection/dispersion .AD
                //--------------------------
                if (RiverDipModel == "Model FE")
                {
                    if (radioPollutantTransport.Checked)
                    {
                        string filenameAD = filename.Remove(filename.Length - 3) + "AD";
                        if (File.Exists(filenameAD))
                        {
                            fileinfo = new FileInfo(filenameAD);
                            if (fileinfo.Length > 1)
                            {
                                try
                                {
                                    _dataManager.LoadAdFromFile(filenameAD);
                                    UpdateWithAdFile();
                                    CoupledCheckedChanged();
                                }
                                catch
                                {
                                    MessageBox.Show(Universal.Idioma("ERROR 0404131100: error trying to open file ", "ERROR 0404131100: error abriendo archivo ") +
                                        fileheader + "AD.", "RiverFlow2D",
                                      MessageBoxButtons.OK, MessageBoxIcon.Error);
                                }
                            }
                            else
                                MessageBox.Show(Universal.Idioma("WARNING: file " + fileheader + "AD" + " is empty.", "ADVERTENCIA: el archivo" + fileheader + "AD" + " está vacío."),
                                    "RiverFlow2D", MessageBoxButtons.OK,
                                  MessageBoxIcon.Warning);

                        }
                        else _notLoadedFiles += "\n" + "     ° File " + fileheader + "AD (Pollutant Transport).";
                    }
                }

                //--------------------------
                //load .WIND
                //--------------------------
                if (chckWind.Checked)
                {
                    string filenameWIND = filename.Remove(filename.Length - 3) + "WIND";
                    if (File.Exists(filenameWIND))
                    {
                        fileinfo = new FileInfo(filenameWIND);
                        if (fileinfo.Length > 1)
                        {
                            try
                            {
                                _dataManager.LoadWindPlusFromFile(filenameWIND);
                                UpdateWithWindPlusFile();
                            }
                            catch
                            {
                                MessageBox.Show(Universal.Idioma("ERROR 1103151015: error trying to open file ", "ERROR 1103151015: error abriendo archivo ") +
                                    fileheader + ".WIND", "RiverFlow2D",
                                    MessageBoxButtons.OK, MessageBoxIcon.Error);
                            }
                        }
                        else
                            MessageBox.Show(Universal.Idioma("WARNING: file " + fileheader + "WIND" + " is empty.", "ADVERTENCIA: el archivo" + fileheader + "WIND" + " está vacío."),
                                "RiverFlow2D", MessageBoxButtons.OK,
                                MessageBoxIcon.Warning);

                    }
                    else _notLoadedFiles += "\n" + "     ° File " + fileheader + "WIND (Wind Output).";
                }

                //--------------------------
                //load .MUD
                //--------------------------
                if (radioMudDebris.Checked)
                {
                    string filenameMUD = filename.Remove(filename.Length - 3) + "MUD";
                    if (File.Exists(filenameMUD))
                    {
                        fileinfo = new FileInfo(filenameMUD);
                        if (fileinfo.Length > 1)
                        {
                            try
                            {
                                _dataManager.LoadMudFromFile(filenameMUD);
                                UpdateWithMudFile();
                            }
                            catch
                            {
                                MessageBox.Show(Universal.Idioma("ERROR 0708131226: error trying to open file ", "ERROR 0708131226: error abriendo archivo ") +
                                    fileheader + ".MUD", "RiverFlow2D",
                                    MessageBoxButtons.OK, MessageBoxIcon.Error);
                            }
                        }
                        else
                            MessageBox.Show(Universal.Idioma("WARNING: file " + fileheader + "MUD" + " is empty.", "ADVERTENCIA: el archivo" + fileheader + "MUD" + " está vacío."),
                                "RiverFlow2D", MessageBoxButtons.OK,
                                MessageBoxIcon.Warning);

                    }
                    else _notLoadedFiles += "\n" + "     ° File " + fileheader + "MUD (Mud Debris Flow).";
                }


                //--------------------------
                //load .OILP
                //--------------------------
                if (radioOilSpillOnLand.Checked)
                {
                    string filenameOILP = filename.Remove(filename.Length - 3) + "OILP";
                    if (File.Exists(filenameOILP))
                    {
                        fileinfo = new FileInfo(filenameOILP);
                        if (fileinfo.Length > 1)
                        {
                            try
                            {
                                _dataManager.LoadOilPlusFromFile(filenameOILP);
                                UpdateWithOILPFile();
                            }
                            catch
                            {
                                MessageBox.Show(Universal.Idioma("ERROR 1709141415: error trying to open file ", "ERROR 1709141415: error abriendo archivo ") +
                                    fileheader + ".OILP", "RiverFlow2D",
                                    MessageBoxButtons.OK, MessageBoxIcon.Error);
                            }
                        }
                        else
                            MessageBox.Show(Universal.Idioma("WARNING: file " + fileheader + "OILP" + " is empty.", "ADVERTENCIA: el archivo" + fileheader + "OILP" + " está vacío."),
                                "RiverFlow2D", MessageBoxButtons.OK,
                                MessageBoxIcon.Warning);

                    }
                    else _notLoadedFiles += "\n" + "     ° File " + fileheader + "OILP (Oil Spill on Land).";
                }


                //--------------------------
                //load .GATES
                //--------------------------
                if (chckGates.Checked)
                {
                    string filenameGATES = filename.Remove(filename.Length - 3) + "GATES";
                    if (File.Exists(filenameGATES))
                    {
                        fileinfo = new FileInfo(filenameGATES);
                        if (fileinfo.Length > 1)
                        {
                            try
                            {
                                _dataManager.LoadGatesFromFile(filenameGATES);
                                UpdateWithGATESFile();
                            }
                            catch
                            {
                                MessageBox.Show(Universal.Idioma("ERROR 1406141208: error trying to open file ", "ERROR 1406141208: error abriendo archivo ") +
                                    fileheader + ".GATES", "RiverFlow2D",
                                    MessageBoxButtons.OK, MessageBoxIcon.Error);
                            }
                        }
                        else
                            MessageBox.Show(Universal.Idioma("WARNING: file " + fileheader + "GATES" + " is empty.", "ADVERTENCIA: el archivo" + fileheader + "GATES" + " está vacío."),
                                "RiverFlow2D", MessageBoxButtons.OK,
                                MessageBoxIcon.Warning);

                    }
                    else _notLoadedFiles += "\n" + "     ° File " + fileheader + "GATES (Gates).";
                }

                //--------------------------
                //load .DAMBREACH
                //--------------------------


                //Borrar:
                //chckDamBr.Checked = true;

                if (chckDamBreach.Checked)
                {
                    string filenameDAMBREACH = filename.Remove(filename.Length - 3) + "DAMBREACH";
                    if (File.Exists(filenameDAMBREACH))
                    {
                        fileinfo = new FileInfo(filenameDAMBREACH);
                        if (fileinfo.Length > 1)
                        {
                            try
                            {
                                _dataManager.LoadDamBreachFromFile(filenameDAMBREACH);
                                UpdateWithDAMBREACHFile();
                            }
                            catch
                            {
                                MessageBox.Show(Universal.Idioma("ERROR 12061714126: error trying to open file ", "ERROR 12061714126: error abriendo archivo ") +
                                    fileheader + ".DAMBREACH", "RiverFlow2D",
                                  MessageBoxButtons.OK, MessageBoxIcon.Error);
                            }
                        }
                        else
                            MessageBox.Show(Universal.Idioma("WARNING: file " + fileheader + "DAMBREACH" + " is empty.", "ADVERTENCIA: el archivo" + fileheader + "DAMBREACH" + " está vacío."),
                                "RiverFlow2D", MessageBoxButtons.OK,
                              MessageBoxIcon.Warning);

                    }
                    else _notLoadedFiles += "\n" + "     ° File " + fileheader + "DAMBREACH (Dam Breach).";
                }

                //--------------------------
                //load .LINF
                //--------------------------
                if (chckInfiltration.Checked)
                {
                    string filenameLINF = filename.Remove(filename.Length - 3) + "LINF";
                    if (File.Exists(filenameLINF))
                    {
                        fileinfo = new FileInfo(filenameLINF);
                        if (fileinfo.Length > 1)
                        {
                            try
                            {
                                _dataManager.LoadInfiltrationFromFile(filenameLINF);
                                UpdateWithLINFFile();
                            }
                            catch
                            {
                                MessageBox.Show(Universal.Idioma("ERROR 1302150900: error trying to open file ", "ERROR 1302150900: error abriendo archivo ") +
                                    fileheader + ".LINF", "RiverFlow2D",
                                    MessageBoxButtons.OK, MessageBoxIcon.Error);
                            }
                        }
                        else
                            MessageBox.Show(Universal.Idioma("WARNING: file " + fileheader + "LINF" + " is empty.", "ADVERTENCIA: el archivo" + fileheader + "LINF" + " está vacío."),
                                "RiverFlow2D", MessageBoxButtons.OK,
                                MessageBoxIcon.Warning);

                    }
                    else _notLoadedFiles += "\n" + "     ° File: " + fileheader + "LINF (Infiltration).";
                }

                //--------------------------
                //load .BRIDGES
                //--------------------------
                if (chckBridges.Checked)
                {
                    string filenameBRIDGES = filename.Remove(filename.Length - 3) + "BRIDGES";
                    if (File.Exists(filenameBRIDGES))
                    {
                        fileinfo = new FileInfo(filenameBRIDGES);
                        if (fileinfo.Length > 1)
                        {
                            try
                            {
                                _dataManager.LoadBridgesFromFile(filenameBRIDGES);
                                UpdateWithBRIDGESFile();
                            }
                            catch
                            {
                                MessageBox.Show(Universal.Idioma("ERROR 2306141601: error trying to open file ", "ERROR 2306141601: error abriendo archivo ") +
                                    fileheader + ".BRIDGES", "RiverFlow2D",
                                    MessageBoxButtons.OK, MessageBoxIcon.Error);
                            }
                        }
                        else
                            MessageBox.Show(Universal.Idioma("WARNING: file " + fileheader + "BRIDGES" + " is empty.", "ADVERTENCIA: el archivo" + fileheader + "BRIDGES" + " está vacío."),
                                "RiverFlow2D", MessageBoxButtons.OK,
                                MessageBoxIcon.Warning);

                    }
                    else _notLoadedFiles += "\n" + "     ° File " + fileheader + "BRIDGES (Bridges).";
                }

                //-----------------------------
                //Open boundary conditions .OBCP
                //-----------------------------
                string filenameOBCP = filename.Remove(filename.Length - 3) + "OBCP";
                if (File.Exists(filenameOBCP))
                {
                    fileinfo = new FileInfo(filenameOBCP);
                    if (fileinfo.Length > 1)
                    {
                        try
                        {
                            _dataManager.LoadOpenBoundaryPlusFromFile(filenameOBCP);
                            UpdateWithOBCPFile();
                        }
                        catch
                        {
                            MessageBox.Show(Universal.Idioma("ERROR 1202160905: error while opening file ", "ERROR 1202160905: error abriendo archivo ") +
                                fileheader + "OBCP.", "RiverFlow2D",
                                MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                    }
                    //else
                    //MessageBox.Show("WARNING: file " + fileheader + "OBCP" + " is empty.", "RiverFlow2D", MessageBoxButtons.OK,
                    //    MessageBoxIcon.Warning);
                }

                //Fix Graphic Output Options plot dropdown list (concentrations).
                FixGraphicOutputPlotOptions();

                //--------------------------
                //load graphic options .PLT
                //--------------------------
                string filenamePLT = filename.Remove(filename.Length - 3) + "PLT";
                if (chckGraphicOutput.Checked)
                    if (File.Exists(filenamePLT))
                    {
                        fileinfo = new FileInfo(filenamePLT);
                        if (fileinfo.Length > 1)
                        {
                            try
                            {
                                _dataManager.LoadGraphicOptionsFromFile(filenamePLT);
                                UpdateWithPLTFile();
                            }
                            catch
                            {
                                MessageBox.Show(Universal.Idioma("ERROR 2810111709: error trying to open file ", "ERROR 2810111709: error abriendo archivo ") +
                                    fileheader + "PLT.", "RiverFlow2D",
                                    MessageBoxButtons.OK, MessageBoxIcon.Error);
                            }
                        }
                        else
                            MessageBox.Show(Universal.Idioma("WARNING: file " + fileheader + "PLT" + " is empty", "ADVERTENCIA: el archivo " + fileheader + "PLT" + " está vacío"),
                                "RiverFlow2D", MessageBoxButtons.OK,
                                MessageBoxIcon.Warning);
                    }
                    else _notLoadedFiles += "\n" + "     ° File " + fileheader + "PLT (Graphic Output Options)";

                //Make visible/invisible 4th. column of Open Boundary Conditions panel.
                if (radioPollutantTransport.Checked)
                {
                    var dataGridViewColumn = dataOpenBoundaryConditions.Columns["FILE_OBC_ADV_DIS"];
                    if (dataGridViewColumn != null)
                        dataGridViewColumn.Visible = true;
                }
                else
                {
                    var gridViewColumn = dataOpenBoundaryConditions.Columns["FILE_OBC_ADV_DIS"];
                    if (gridViewColumn != null)
                        gridViewColumn.Visible = false;
                }

                #endregion For files that are only loaded if checked

                filename = filename.Trim();
                _currentProjectPathAndName = filename.Remove(filename.Length - 4);
                int indexOf = filename.LastIndexOf("\\");
                _currentProjectPath = filename.Remove(indexOf);
                _currentProjectName = _currentProjectPathAndName.Remove(0, indexOf + 1);

                ReadNamesOfLastProjects("Include current .DAT");
                WriteNamesOfLastprojects("Include current .DAT");

                //Show message with tables that are empty (only if selected or the compulsory ones)
                if (_notLoadedFiles != "")
                {
                    _notLoadedFiles = Universal.Idioma(
                        "WARNING 1311120611!\n\n" + "Some components or output options were selected " +
                        "in the 'Control Data' panel but their corresponding files do not exist (in " +
                          _currentProjectPath +  "):" + "\n" + _notLoadedFiles,
                        "ADVERTENCIA 1311120611!\n\n" + "Algunos componentes u opciones de salida fueron seleccionados en el panel 'Datos de Control' pero sus correspondientes archivos no existen (en " + 
                        _currentProjectPath +  "):" + "\n" + _notLoadedFiles);

                    MessageBox.Show(_notLoadedFiles, "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }

                //Text = mainHeader + RiverDipModel + ") - " + _currentProjectPathAndName;
				Text = mainHeader + _currentProjectPathAndName;
				tabOptions.SelectedTab = tabControlData;
                _dataManager.Changed = false;

            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 0804141037: error while opening files. ", "ERROR 0804141037: error abriendo archivos. ") +
                    ex.Message,
                    "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                loading = false;
            }
        }

        public void ReadTimesFromMbaLfile(string MBALfile)
        {
            string firstTime = "";
            string endTime = "";

            if (File.Exists(MBALfile))
            {

                var fileinfo = new FileInfo(fileName: MBALfile);
                if (fileinfo.Length != 0)
                {
                    StreamReader s = File.OpenText(MBALfile);
                    try
                    {
                        do
                        {
                            string line = s.ReadLine();
                            string[] split = line.Split(new Char[] { ' ', '\t' }, StringSplitOptions.RemoveEmptyEntries);
                            if (split.Length >= 2)
                            {
                                if (split[0] == "Time" & split[1] == "Inflow")
                                {

                                    line = s.ReadLine();
                                    line = s.ReadLine();
                                    split = line.Split(new Char[] { ' ', '\t' }, StringSplitOptions.RemoveEmptyEntries);
                                    firstTime = split[0];
                                    do
                                    {
                                        line = s.ReadLine();
                                        split = line.Split(new Char[] { ' ', '\t' }, StringSplitOptions.RemoveEmptyEntries);
                                        endTime = split[0];
                                    } while (!s.EndOfStream);
                                }
                                ;
                            }
                            ;
                        } while (!s.EndOfStream);
                        txtStart.Text = firstTime;
                        txtEnd.Text = endTime;
                        _dataManager.Set("START", firstTime);
                        _dataManager.Set("END", endTime);


                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(Universal.Idioma("ERROR 0912120720: error while reading ", "ERROR 0912120720: error leyendo ") +
                            MBALfile + ". " + ex.Message + ".",
                            "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    finally
                    {
                        s.Close();
                    }
                }

            }
        }

        private void btnOpen_Click(object sender, EventArgs e)
        {
            OpenAnotherProject("From Open DIP");
        }

        private void OpenAnotherProject(string whereFrom)
        {

            loading = true;
            _bridgeTabShowing = false;

            if (whereFrom != "")
            {
                var open = new OpenProject();
                open.ShowDialog();
            }

            switch (Universal.OpenProjectExit)
            {
                case "OpenProject":
                    OpenExistingProject("");
                    break;

                case "Model GPU":
                case "Model CPU":
                case "Model FE":
                    RiverDipModel = Universal.OpenProjectExit;
                    ClearAllTables();

                    InitializePreLoadControls();

                    _currentProjectPathAndName = "";
                    _currentProjectPath = "";
                    _currentProjectName = "";

                    ContinueLoadings();

                    SetAllDefaults();

                    _currentProjectPathAndName = Universal.ProjectPathAndName.Remove(Universal.ProjectPathAndName.Length - 4).Trim();
                    int indexOf = Universal.ProjectPathAndName.LastIndexOf("\\", StringComparison.Ordinal);
                    _currentProjectPath = Universal.ProjectPathAndName.Remove(indexOf).Trim();
                    _currentProjectName = _currentProjectPathAndName.Remove(0, indexOf + 1).Trim();

                    //Text = mainHeader + RiverDipModel + ") - " + _currentProjectPathAndName;
					Text = mainHeader + _currentProjectPathAndName;
					//tabOptions.SelectedTab = tabControlData;
					_dataManager.Changed = true;

                    break;

                case "Cancel":
                    if (whereFrom == "From Loading")
                    {
                        _dataManager.Changed = false;
                        Close();
                    }
                    break;

                case "":
                    break;

                default:
                    OpenExistingProject(Universal.OpenProjectExit);
                    break;
            }

            WriteDeviceSelected();
            loading = false;
        }

        private void OpenExistingProject(string project)
        {
            if (project == "")
            {
                var openFileDialog = new OpenFileDialog
                {
                    Filter = "DAT files (*.DAT)|*.DAT",
                    InitialDirectory = _currentProjectPath,
                    //FileName = _currentProjectName + ".DAT",
                    FilterIndex = 1,
                    RestoreDirectory = true,
                    CheckFileExists = true
                };
                if (openFileDialog.ShowDialog() == DialogResult.OK)
                    project = openFileDialog.FileName;
                else
                    project = "";
            }

            if (project != "" && File.Exists(project))
            {
                OpenAllRequiredFiles(project);

                //Collapse all sub-nodes.
                foreach (TreeNode tn in treeViewOptions.Nodes)
                {
                    treeViewOptions.HideSelection = false;
                }

                //Select Control Data
                treeViewOptions.SelectedNode = treeViewOptions.Nodes[0];

                //Remove all tabs in tabOptions TabControl with multiple collection.
                for (int i = tabOptions.TabPages.Count - 1; i >= 0; i--)
                {
                    tabOptions.TabPages.Remove(tabOptions.TabPages[i]);
                }
                TurnOffAll();
                tabOptions.Visible = true;
                tabOptions.TabPages.Add(_savedTabPages[0]);
            }
			else
				MessageBox.Show(Universal.Idioma("ERROR 070718_0618: file doesn't exists or is empty:\n\n", "ERROR 070718_0618: archivo no existe o está vacío:\n\n") +
					project + ".", "RiverFlow2D",
					MessageBoxButtons.OK, MessageBoxIcon.Error);

			WriteDeviceSelected();
        }

        private void WriteDeviceSelected()
        {
			//Write list of processors (CPU and GPU):
			if (_currentProjectPath != "")
			{
				TextWriter w = new StreamWriter(_currentProjectPath + "\\device.GPU");
				w.WriteLine("iddevice " + comboParallelComputing.SelectedIndex);
				w.Close();
			}
        }

        private void btnOpenRainfall_Click(object sender, EventArgs e)
        {
            var openFileDialog = new OpenFileDialog
            {
                Filter = "LRAIN files (*.LRAIN)|*.LRAIN",
                InitialDirectory = _currentProjectPath,
                FileName = _currentProjectName + ".LRAIN",
                FilterIndex = 1,
                RestoreDirectory = true,
                CheckFileExists = true
            };

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                var fileinfo = new FileInfo(openFileDialog.FileName);
                if (fileinfo.Length > 1)
                {
                    try
                    {
                        _dataManager.LoadLRainFallFromFile(openFileDialog.FileName);
                        UpdateWithLRAINFile();
                    }
                    catch
                    {
                        MessageBox.Show(Universal.Idioma("ERROR 2810111730: error trying to open file ", "ERROR 2810111730: error abriendo archivo ") +
                            openFileDialog.FileName + ".", "RiverFlow2D",
                            MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
                else
                    MessageBox.Show(Universal.Idioma("WARNING: file " + openFileDialog.FileName + " is empty.", "ADVERTENCIA: el archivo" + openFileDialog.FileName + " está vacío."),
                        "RiverFlow2D", MessageBoxButtons.OK,
                        MessageBoxIcon.Warning);
            }
        }

        private void btnOpenProfile_Click(object sender, EventArgs e)
        {
            var openFileDialog = new OpenFileDialog
            {
                Filter = "PROFILES files (*.PROFILES)|*.PROFILES",
                InitialDirectory = _currentProjectPath,
                FileName = _currentProjectName + ".PROFILES",
                FilterIndex = 1,
                RestoreDirectory = true,
                CheckFileExists = true
            };

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                var fileinfo = new FileInfo(openFileDialog.FileName);

                if (fileinfo.Length > 1)
                {
                    try
                    {
                        _dataManager.LoadProfileCutsFromFile(openFileDialog.FileName);
                        UpdateWithPROFILESFile();
                    }
                    catch
                    {
                        MessageBox.Show(Universal.Idioma("ERROR 2399111321: error trying to open file ", "ERROR 2399111321: error abriendo archivo ") +
                            openFileDialog.FileName + ".", "RiverFlow2D",
                            MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
                else
                    MessageBox.Show(Universal.Idioma("WARNING: file " + openFileDialog.FileName + " is empty.", "ADVERTENCIA: el archivo" + openFileDialog.FileName + " está vacío."),
                        "RiverFlow2D", MessageBoxButtons.OK,
                        MessageBoxIcon.Warning);
            }
        }

        private void btnOpenInflow_Click(object sender, EventArgs e)
        {
            var openFileDialog = new OpenFileDialog
            {
                InitialDirectory = _currentProjectPath,
                FilterIndex = 1,
                RestoreDirectory = true,
                CheckFileExists = true
            };
            if (radioDischargeTimeInflow.Checked) openFileDialog.Filter = "QVT files (*.QVT)|*.QVT|All files (*.*)|*.*";
            else if (radioWSETimeInflow.Checked) openFileDialog.Filter = "HVT files (*.HVT)|*.HVT|All files (*.*)|*.*";

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                try
                {
                    _dataManager.LoadInflowFromFile(openFileDialog.FileName);
                    UpdateWithINFLOWFileFile();
                }
                catch
                {
                    MessageBox.Show(Universal.Idioma("ERROR 2810111714: error trying to open inflow file.", "ERROR 2810111714: error abriendo archivo inflow.."),
                        "RiverFlow2D", MessageBoxButtons.OK,
                        MessageBoxIcon.Error);
                }
            }
        }

        //Set the controls to what is reflected in the dataFile
        private void UpdateWithDatFile()
        {
            if (RiverDipModel == "Model CPU" || RiverDipModel == "Model GPU")
            {
                chckVariableTimeStep.Checked = false;
                _dataManager.Set("IVARDT", 0);
                _dataManager.Set("DTMULTIPLIER", (double)_dataManager.Get("TOUT"));

                if (RiverDipModel == "Model CPU")

                    _dataManager.Set("IRIVERPLUS", 1);
                else //"Model GPU"
                    _dataManager.Set("IRIVERPLUS", 2);

                //GPU card number.

                int idGpu = (int)_dataManager.Get("IDGPU");
                if (idGpu >= 0 && idGpu <= _numberOfLogicalProcessors)
                    UpdateControl(comboParallelComputing);
                else
                    _dataManager.Set("IDGPU", comboParallelComputing.Items.Count);

            }
            else // Model FE
            {
                UpdateControl(txtTimeStepFactor);
                UpdateControl(chckVariableTimeStep);

                // rslipbc
                double rslipbc = (double)_dataManager.Get("rslipbc");
                if (rslipbc == 0) rslipbc0.Checked = true;
                if (rslipbc == 1) rslipbc1.Checked = true;
                if (rslipbc != 0 && rslipbc != 1) rslipbc2.Checked = true;
                if (rslipbc2.Checked == true) rslipbc = Convert.ToDouble(rslipbcfactor.Text);

                // wetdry
                double iwetdry = (double)_dataManager.Get("iwetdry");
                if (iwetdry == 1) iwetdrya.Checked = true;
                if (iwetdry == 2) iwetdryb.Checked = true;
                if (iwetdry == 3) iwetdryc.Checked = true;

                _dataManager.Set("IRIVERPLUS", 0);

            }
            //Common to FE and both Plus:

            //Time Control Data
            UpdateControl(txtTimeStep);
            UpdateControl(txtSimulationTime);
            UpdateControl(txtOutputInterval);

            UpdateControl(chckHotStart);

            //Units
            var units = (int)_dataManager.Get("NUNITS");
            if (units == 1) radioEnglish.Checked = true;
            else radioMetric.Checked = true;

            //Model
            var model = (int)_dataManager.Get("IRIVERPLUS");
            if (model == 1) radioCPU.Checked = true;
            else radioGPU.Checked = true;

            //Graphic Output & Text File Output
            var NOGRAPH = (int)_dataManager.Get("NOGRAPH");
            if (NOGRAPH == 0)
            {
                //GRAPH: off   TEXT: on
                chckGraphicOutput.Checked = false;
                chckTextFileOutput.Checked = true;
            }
            else if (NOGRAPH == 1)
            {
                //GRAPH: on   TEXT: on
                chckGraphicOutput.Checked = true;
                chckTextFileOutput.Checked = true;
            }
            else if (NOGRAPH == 2)
            {
                //GRAPH: on   TEXT: off
                chckGraphicOutput.Checked = true;
                chckTextFileOutput.Checked = false;
            }
            else if (NOGRAPH == 3)
            {
                //GRAPH: off   TEXT: off
                chckGraphicOutput.Checked = false;
                chckTextFileOutput.Checked = false;
            }

            // Components
            //See if second line of DATConfig.config is from previous version (201101)
            int IADDISP = (int)_dataManager.Get("IADDISP");
            if (IADDISP > 1) _dataManager.Set("IADDISP", 0);

            //Modules.
            UpdateControl(radioPollutantTransport);
            UpdateControl(radioSedimentTransport);
            int imud = (int)_dataManager.Get("IMUD");
            if (imud == 1)
                radioMudDebris.Checked = true;
            if (imud == 2)
                radioOilSpillOnLand.Checked = true;

            //UpdateControl(radioOilSpillOnLand);
            if (!radioPollutantTransport.Checked & !radioSedimentTransport.Checked & !radioMudDebris.Checked &
                !radioOilSpillOnLand.Checked)
                radioNone.Checked = true;
            else
                radioNone.Checked = false;
            UpdateControl(radioNone);

            //Components (others than Rain and Infiltration).
            UpdateControl(chckPiers);
            UpdateControl(chckCulverts);
            UpdateControl(chckInternalRatingTables);
            UpdateControl(chckSourcesAndSinks);
            UpdateControl(chckWeirs);
            UpdateControl(chckWind);
            UpdateControl(chckBridges);
            UpdateControl(chckGates);
            UpdateControl(chckDamBreach);

            //Components (Rain and Infiltration).
            //Graphic Output & Text File Output
            var rain = (int)_dataManager.Get("IRAIN");
			if (rain == 4)
			{
				chckRainfallEvaporation.Checked = true;
				chckInfiltration.Checked = true;
			}
			else if (rain == 3)
			{
				chckRainfallEvaporation.Checked = false;
				chckInfiltration.Checked = true;
			}
			else if (rain == 2)
			{
				chckRainfallEvaporation.Checked = true;
				chckInfiltration.Checked = false;
			}
			else if (rain == 0)
			{
				chckRainfallEvaporation.Checked = false;
				chckInfiltration.Checked = false;
			}
			else
			{
				chckRainfallEvaporation.Checked = false;
				chckInfiltration.Checked = false;
				_dataManager.Set("IRAIN", 0);
				MessageBox.Show(Universal.Idioma("ERROR 2205180459: IRAIN variable invalid.", "ERROR 2205180459: variable IRAIN inválida."),
					"RiverFlow2D", MessageBoxButtons.OK,
					MessageBoxIcon.Error);
			}

			//Output Options
			UpdateControl(chckOutputResultsCrossSections);
            UpdateControl(chckOutputResultsProfile);
            UpdateControl(chckMaximumValues);
            UpdateControl(chckResultsAtObservationPoints);
            UpdateControl(chckComputeMassBalance);


            //Manning, Lumping & DepthOfBed
            UpdateControl(txtManningsFactor);
            UpdateControl(chckManningWithDepth);
            UpdateControl(chckComputeMassBalance);
            UpdateControl(txtMinimumDepth);
            UpdateControl(txtMinimumDepth);

            //Initial Conditions
            var initial_wsed = (double)_dataManager.Get("initial_wse");
            var iinitiali = (int)_dataManager.Get("IINITIAL");
            if (iinitiali == 1) DryBed.Checked = true;
            if (iinitiali == 0) HorizontalWSE.Checked = true;
            if (iinitiali == 2) BedFromFEDFile.Checked = true;

            if (HorizontalWSE.Checked == true) initial_wsed = Convert.ToDouble(initial_wse.Text);
            UpdateControl(initial_wse);

            //Language
            //UpdateControl(comboLanguage);
            //var language = (int)_dataManager.Get("LANGUAGE");
            //comboLanguage.SelectedIndex = language;
        }

        //Set the controls to what is reflected in the Inflow Boundary Data file
        private void UpdateWithINFLOWFileFile()
        {
            UpdateControl(dataTimeQ);
        }

        //Set the controls to what is reflected in the Inflow Boundary Data file
        private void UpdateWithOUTFLOWFile()
        {
            UpdateControl(dataOutflow);
        }

        //Set the controls to what is reflected in the XSECSFile
        private void UpdateWithXSECSFile()
        {
            UpdateControl(dataCrossSection);
            ColorRepeats(dataCrossSection);
        }

        //Set the controls to what is reflected in the RETFile
        private void UpdateWithRETFile()
        {
            //Time/Rainfall/Evaporation
            UpdateControl(dataRainfallEvaporation);
        }

        //Set the controls to what is reflected in the LRAINFile
        private void UpdateWithLRAINFile()
        {
            //Time/Rainfall/Evaporation
            UpdateControl(dataRainfallEvaporationZones);
        }

        //Set the controls to what is reflected in the GATESFile
        private void UpdateWithGATESFile()
        {
            //GATES
            UpdateControl(dataGates);
        }

        //Set the controls to what is reflected in the DAMBREACHFile
        private void UpdateWithDAMBREACHFile()
        {
            //DAMBREACH
            UpdateControl(dataDamBreach);
        }

        //Set the controls to what is reflected in the LINFFile
        private void UpdateWithLINFFile()
        {
            //LINF
            UpdateControl(dataInfiltration);
        }


        //Set the controls to what is reflected in the BRIDGESFile
        private void UpdateWithBRIDGESFile()
        {
            //BRIDGES.
            UpdateControl(dataBridges);
        }

        //Set the controls to what is reflected in the WEIRSFile
        private void UpdateWithWEIRSFile()
        {
            //WEIRS
            UpdateControl(dataWeirs);
            ColorRepeats(dataWeirs);
        }

        //Set the controls to what is reflected in the CULVERTSFile
        private void UpdateWithCULVERTSFile()
        {
            //CULVERTS
            //Universal.enableTextChangedEvent = false;
            UpdateControl(dataCulverts);
            ColorRepeats(dataCulverts);
            //Universal.enableTextChangedEvent = true;
        }

        //Set the controls to what is reflected in the OBSFile
        private void UpdateWithOBSFile()
        {
            //OBS
            UpdateControl(dataObservationPoints);
            ColorRepeats(dataObservationPoints);

        }

        //Set the controls to what is reflected in the IFLFile
        private void UpdateWithIFLFile()
        {
            //IFL
            UpdateControl(dataOpenBoundaryConditions);
        }

        //Set the controls to what is reflected in the PIERSFile
        private void UpdateWithPiersFile()
        {
            //PIERS
            UpdateControl(dataPiersDragForces);
        }

        //Set the controls to what is reflected in the SOURCESFile
        private void UpdateWithSOURCESFile()
        {
            //SOURCES
            UpdateControl(dataSourcesAndSinks);
            ColorRepeats(dataSourcesAndSinks);
            UpdateControl(dataSOURCESSeries);
        }

        //Set the controls to what is reflected in the PROFILESFile
        private void UpdateWithPROFILESFile()
        {
            UpdateControl(dataProfile);
            ColorRepeats(dataProfile);

        }

        //Set the controls to what is reflected in the IRTFile
        private void UpdateWithIRTFile()
        {
            UpdateControl(dataInternalRatingTable);
            ColorRepeats(dataInternalRatingTable);

        }

        //Set the controls to what is reflected in the SEDS File
        private void UpdateWithSEDSFile()
        {
            //Model mode.
            UpdateControl(chckSuspendedSediment);

            //Suspended sediment controls.
            UpdateControl(comboSuspendedSedimentTypeFormula);
            UpdateControl(comboSuspendedSedimentTypeWS);
            UpdateControl(txtSuspendedSedimentFactorWS);
            UpdateControl(txtSuspendedSedLongitudinalDispCoeff);
            UpdateControl(txtSuspendedSedTransversalDispCoeff);
            UpdateHorizontalDataGridView(dataSuspendedSediment);
        }

        //Set the controls to what is reflected in the OBCP File
        private void UpdateWithOBCPFile()
        {
            //OBCP
            UpdateControl(dataOBCP);
            UpdateControl(dataOBCPNodes);
            UpdateControl(dataOBCPSeries);
        }

        //Set the controls to what is reflected in the SEDB File
        private void UpdateWithSEDBFile()
        {
            //Model mode.
            UpdateControl(chckBedLoadSediment);

            //bed load sediment.
            UpdateControl(comboBedLoadSedimentTypeFormula);
            UpdateControl(chckCoupledComputation);
            UpdateHorizontalDataGridView(dataBedLoadSediment);
        }

        //Set the controls to what is reflected in the PLTFile
        private void UpdateWithPLTFile()
        {
            //Plot
            var tag = (int)_dataManager.Get("IGRAPHCODE");

            switch (tag)
            {
                case 100:
                    comboGraphCode.SelectedIndex = 0; //Velocity Field (Black)
                    break;
                case 110:
                    comboGraphCode.SelectedIndex = 1; //Velocity Field (Color)
                    break;
                case 101:
                    comboGraphCode.SelectedIndex = 2; //Velocities & Depth
                    break;
                case 203:
                    comboGraphCode.SelectedIndex = 8; //Velocities & Water Elevations
                    break;
                case 102:
                    comboGraphCode.SelectedIndex = 3; //Velocities & Bed Elevations
                    break;
                case 111:
                    comboGraphCode.SelectedIndex = 4; //Velocities Modules		
                    break;
                case 201:
                    comboGraphCode.SelectedIndex = 5; //Depths
                    break;
                case 202:
                    comboGraphCode.SelectedIndex = 6; //Bed Elevations
                    break;
                case 103:
                    comboGraphCode.SelectedIndex = 7; //Water Elevations
                    break;
                case 204:
                    comboGraphCode.SelectedIndex = 9; //Erosion & Deposition
                    break;
                case 600:
                    comboGraphCode.SelectedIndex = 10; //Concentration
                    break;
                case 601:
                    comboGraphCode.SelectedIndex = 11; //Concentration
                    break;
                case 602:
                    comboGraphCode.SelectedIndex = 12; //Concentration
                    break;
                case 603:
                    comboGraphCode.SelectedIndex = 13; //Concentration
                    break;
                case 604:
                    comboGraphCode.SelectedIndex = 14; //Concentration
                    break;
                case 605:
                    comboGraphCode.SelectedIndex = 15; //Concentration
                    break;
                case 606:
                    comboGraphCode.SelectedIndex = 16; //Concentration
                    break;
                case 607:
                    comboGraphCode.SelectedIndex = 17; //Concentration
                    break;
                case 608:
                    comboGraphCode.SelectedIndex = 18; //Concentration
                    break;
                case 609:
                    comboGraphCode.SelectedIndex = 19; //Concentration
                    break;
                case 610:
                    comboGraphCode.SelectedIndex = 20; //Concentration
                    break;
            }

            //COLORSCHEME
            UpdateControl(numericUpDownColorScheme);
            pictureBoxColorScheme.Image = imageListColorScheme.Images[Convert.ToInt32(numericUpDownColorScheme.Value) - 1];

            //Plot Axis
            UpdateControl(chckPlotAxis);

            //Create DXF
            UpdateControl(chckCreateDXF);

            //Create Graphic Output Files
            UpdateControl(chckCreateGraphicOutputFiles);

            // Output for vector shapefile
            UpdateControl(chckOutputForVectorShapeFile);

            //Background checkbox
            UpdateControl(chckBackgroundImage);
            Enable_or_Disable_BackgroundImage();

            //Transparency
            UpdateControl(txtTransparency);

            //Background Image
            UpdateControl(txtBackgroundImage);
            //See if background file name is empty:
            if (txtBackgroundImage.Text == "")
            {
                txtBackgroundImage.Text = "(no file)";
                _dataManager.Set("BACKGROUND_IMAGE_FILE", "(no file)");
            }

            //Background world file
            UpdateControl(txtWorldFile);

            //Limits of variables
            UpdateControl(txtMin);
            UpdateControl(txtMax);
            UpdateControl(txtMaxVelocityVector);
            UpdateControl(txtVelocityVectorFactor);

            //Plot Window
            UpdateControl(txtX1);
            UpdateControl(txtY1);
            UpdateControl(txtX2);
            UpdateControl(txtY2);

        }

        //Set the controls to what is reflected in the sedimentFile
        private void UpdateWithSedFile()
        {
            //Transport Formula.
            UpdateControl(comboTransportFormula);

            //For future use.
            UpdateControl(chckSTFRAC);

            //calculation step.
            UpdateControl(txtNSEDSTEP);


            //D50.
            UpdateControl(txtD50);

            //D90.
            UpdateControl(txtD90);

            //Specific Gravity.
            UpdateControl(txtSG);

            //POROS.
            UpdateControl(txtPorosity);

            //A Coeff.
            UpdateControl(txtA);

            //B Coeff.
            UpdateControl(txtB);

        }

        //Set the controls to what is reflected in the sedimentFile

        //Set the controls to what is reflected in the windFile
        private void UpdateWithWindFile()
        {
            UpdateControl(txtC10);
            UpdateControl(txtWindDensity);
            UpdateControl(txtUWConstant);
            UpdateControl(txtVwConstant);
            UpdateControl(radioConstant);
            //UpdateControl(radioVariable);
        }

        private void UpdateWithWindPlusFile()
        {
            UpdateControl(txtWindPlusStressCoeff);
            UpdateControl(txtWindPlusAirDensity);
            UpdateControl(dataWindPlusZones);
        }

        private void UpdateWithMudFile()
        {
            UpdateControl(comboFlowResistanceRelation);
            UpdateControl(txtYieldStress);
            UpdateControl(txtBinghamViscosity);
            UpdateControl(txtInternalFrictionAngle);
            UpdateControl(txtMaterialDensity);
            UpdateControl(txtCv);
            UpdateControl(comboYieldStressRelation);
            UpdateControl(comboViscosityRelation);
			UpdateControl(chckMaterialDensity);
        }


        private void UpdateWithOILPFile()
        {
            var tag = (int)_dataManager.Get("OILSPILLONLAND_FRR");

            switch (tag)
            {
                case 1:
                    comboOilFlowResistance.SelectedIndex = 0;
                    break;
                case 2:
                    comboGraphCode.SelectedIndex = 1;
                    break;
                case 3:
                    comboGraphCode.SelectedIndex = 2;
                    break;
            }

            UpdateControl(radioOILPConstants);
            UpdateControl(radioOILPTables);

            UpdateControl(txtOilSpillOnLandViscocity);
            UpdateControl(txtOilSpillOnLandDensity);
            UpdateControl(comboOilFlowResistance);
            UpdateControl(txtOilSpillOnLandYieldStress);

            UpdateControl(dataOilSpillOnLandTimeViscocityDensity);
            UpdateControl(txtOilSpillOnLandViscosityDensityFile);

            UpdateControl(dataOilSpillOnLandTemperature);
            UpdateControl(txtOilSpillOnLandTemperatureFile);
        }

        //Set the controls to what is reflected in the adFile
        private void UpdateWithAdFile()
        {
            //Simulation Time.
            UpdateControl(txtADSimulationTime);

            //Start Time.
            UpdateControl(txtADStartTime);

            //Output Interval.
            UpdateControl(txtADOutputInterval);

            //Time Step Factor.
            UpdateControl(txtADTimeStepFactor);

            //Time Step Factor.
            UpdateControl(txtADTimeStep);

            //Variable Time Step.
            UpdateControl(chckADVariableTimeStep);

            //Hot Start.
            UpdateControl(chckADHotStart);

            var algorithm = (int)_dataManager.Get("AD_ALGORITHM");
            if (algorithm == 1) radioADExplicit.Checked = true;
            else radioADImplicit.Checked = true;

            var coupled = (int)_dataManager.Get("AD_COUPLED");
            if (coupled == 1) radioADCoupled.Checked = true;
            else radioADUncoupled.Checked = true;

            //Depth and Velocity File Name.
            UpdateControl(txtADDepthAndVelocityFileName);
            if (txtADDepthAndVelocityFileName.Text == "")
            {
                txtADDepthAndVelocityFileName.Text = "(no file)";
                _dataManager.Set("AD_UVHBFILENAME", "(no file)");
            }

            //Selective Dumping Parameter.
            UpdateControl(txtADSelectiveLumpingParameter);

            //Longitudinal Dispersion Coeff.
            UpdateControl(txtADLongitudinalDispertionCoeff);

            //Transversal Dispersion Coeff.
            UpdateControl(txtADTransversalDispertionCoeff);

            //Decay coefficient.
            UpdateControl(txtDecay);

            //Sources.
            UpdateControl(chckADSources);
        }

        //Set the controls to what is reflected in the adFile
        private void UpdateWithSolutesFile()
        {

            //Longitudinal Dispersion Coeff.
            UpdateControl(txtPollutantTransportPlusDispersionCoeff);

            //Transversal Dispersion Coeff.
            UpdateControl(txtPollutantTransportPlusTransversalCoeff);

            UpdateControl(dataPollutantTransportPlusSolutes);

        }

        private void FixGraphicOutputPlotOptions()
        {
            int previousPlotSelection = comboGraphCode.SelectedIndex;

            if (RiverDipModel == "Model CPU" || RiverDipModel == "Model GPU")
            {
                if (radioSedimentTransport.Checked)
                {
                    FixGraphicOutputPlotOptionsForSedimentPlus();
                }
                else if (radioMudDebris.Checked)
                {
                    FixGraphicOutputPlotOptionsForOneConcentration();
                }
                else if (radioPollutantTransport.Checked)
                {
                    FixGraphicOutputPlotOptionsForPollutantTransport();
                }
                else
                {
                    FixGraphicOutputPlotOptionsForOneConcentration();
                }
            }
            else
            {
                FixGraphicOutputPlotOptionsForOneConcentration();
            }

            //Restore index.
            if (previousPlotSelection > 0)
            {
                if (comboGraphCode.Items.Count <= 11)
                {
                    //There is only one Concentration.
                    if (previousPlotSelection > 10)
                    {
                        comboGraphCode.SelectedIndex = 10;
                    }
                    else
                    {
                        comboGraphCode.SelectedIndex = previousPlotSelection;
                    }
                }
                else
                {
                    if (previousPlotSelection > 10)
                    {
                        if (previousPlotSelection >= comboGraphCode.Items.Count)
                        {
                            comboGraphCode.SelectedIndex = 10;
                        }
                        else
                        {
                            comboGraphCode.SelectedIndex = previousPlotSelection;
                        }
                    }
                    else
                    {
                        comboGraphCode.SelectedIndex = previousPlotSelection;
                    }
                }
            }
            else
            {
                comboGraphCode.SelectedIndex = 0;
            }


        }

        private void FixGraphicOutputPlotOptionsForSedimentPlus()
        {
            int selIndex = comboGraphCode.SelectedIndex;

            RemoveConcentrationsFromPlot();

            if (dataSuspendedSediment.ColumnCount > 1)
            {
                //Add fractions.
                for (int i = 0; i < dataSuspendedSediment.ColumnCount - 1; i++)
                {
                    string nextFrac = "Fraction " + (i + 1).ToString();
                    comboGraphCode.Items.Add(nextFrac);
                }
            }
            else
                comboGraphCode.Items.Add("Concentration");


            if (selIndex <= comboGraphCode.Items.Count - 1)
                comboGraphCode.SelectedIndex = selIndex;
            else
                comboGraphCode.SelectedIndex = comboGraphCode.Items.Count - 1;
        }

        private void FixGraphicOutputPlotOptionsForOneConcentration()
        {
            RemoveConcentrationsFromPlot();
            comboGraphCode.Items.Add("Concentration");
        }

        private void FixGraphicOutputPlotOptionsForPollutantTransport()
        {
            int selIndex = comboGraphCode.SelectedIndex;

            RemoveConcentrationsFromPlot();

            if (dataPollutantTransportPlusSolutes.Rows.Count > 1)
            {
                for (int j = 0; j < dataPollutantTransportPlusSolutes.Rows.Count; ++j)
                {
                    var selected = dataPollutantTransportPlusSolutes.Rows[j].Cells[0].Value as string;
                    if (selected != null && selected == "True")
                    {
                        var solute = dataPollutantTransportPlusSolutes.Rows[j].Cells[1].Value as string;
                        if (!string.IsNullOrEmpty(solute))
                            comboGraphCode.Items.Add(solute);
                    }
                }
            }
            else
                comboGraphCode.Items.Add("Concentration");

            if (selIndex <= comboGraphCode.Items.Count - 1)
                comboGraphCode.SelectedIndex = selIndex;
            else
                comboGraphCode.SelectedIndex = comboGraphCode.Items.Count - 1;
        }


        //Set the controls to what is reflected in the plotFile
        private void UpdateWithPLOTFile()
        {
            try
            {
                //File Name Output
                UpdateControl(txtFileNameOutput);

                //Min Color
                UpdateControl(txtMinColor);

                //Max Color
                UpdateControl(txtMaxColor);

                //parameter
                UpdateControl(comboParameter);

                //Min Bed Change
                UpdateControl(txtMidBedChange);

                //Show Velocity
                UpdateControl(chckShowVelocity);

                //X Resolution
                UpdateControl(txtXResolution);

                //Y Resolution
                UpdateControl(txtYResolution);

                //Velocity Scale 
                UpdateControl(txtVelocityScale);

                //Start
                UpdateControl(txtStart);

                //End
                UpdateControl(txtEnd);

                //KML
                UpdateControl(radioKML);

                //WMV
                UpdateControl(radioWMV);

                //GMT offset
                UpdateControl(comboGMTOffset);

                //EPSG
                UpdateControl(txtEPSG);

                //Animate
                UpdateControl(chckAnimate);

                //radio Date Mapping File
                UpdateControl(radioDateMappingFile);

                //Date Mapping File
                UpdateControl(txtDateMappingFile);

                //radio Start Date Time
                UpdateControl(radioStartDateTime);

                //Start Date Time
                UpdateControl(startDateTimePicker);
                UpdateControl(txtStartDateTime);


                //Tiff File
                UpdateControl(txtTiffFile);

                //North
                UpdateControl(txtNorth);

                //South
                UpdateControl(txtSouth);

                //East
                UpdateControl(txtEast);

                //West
                UpdateControl(txtWest);

                //Frames per second
                UpdateControl(txtFramesPerSecond);
            }
            catch
            {
                MessageBox.Show(Universal.Idioma("ERROR 1199111023: error while updating River Animator data", "ERROR 1199111023: error actualizando datos del River Animator"),
                    "RiverFlow2D", MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
            }
        }

        private void UpdateAllTabs()
        {

            UpdateWithDatFile();
            UpdateWithSedFile();
            UpdateWithRETFile();
            UpdateWithXSECSFile();
            UpdateWithPROFILESFile();
            UpdateWithPLTFile();
            UpdateWithINFLOWFileFile();
            UpdateWithOUTFLOWFile();
            UpdateWithIFLFile();
            UpdateWithCULVERTSFile();
            UpdateWithPiersFile();
            UpdateWithSOURCESFile();
            UpdateWithWEIRSFile();
            UpdateWithIRTFile();
            UpdateWithOBSFile();
            UpdateWithPLOTFile();
            UpdateWithAdFile();
            UpdateWithWindFile();
            UpdateWithWindPlusFile();
            UpdateWithMudFile();
            UpdateWithSEDSFile();
            UpdateWithSEDBFile();
            UpdateWithSolutesFile();
            UpdateWithLRAINFile();
            UpdateWithGATESFile();
            UpdateWithLINFFile();
            UpdateWithBRIDGESFile();
            UpdateWithOBCPFile();
            UpdateWithOILPFile();
        }


        private void UpdateData(Control ctrl)
        {
            try
            {
                if (ctrl is TextBox)
                {
                    if (ctrl.Text.Trim() != "") _dataManager.Set((string)ctrl.Tag, ctrl.Text);
                }
                else if (ctrl is CheckBox)
                {
                    _dataManager.Set((string)ctrl.Tag, Convert.ToInt32(((CheckBox)ctrl).Checked));
                }
                else if (ctrl is RadioButton)
                {
                    _dataManager.Set((string)ctrl.Tag, Convert.ToInt32(((RadioButton)ctrl).Checked));
                }
                else if (ctrl is NumericUpDown)
                {
                    _dataManager.Set((string)ctrl.Tag, Convert.ToInt32(((NumericUpDown)ctrl).Text));
                }
                else if (ctrl is ComboBox)
                {
                    _dataManager.Set((string)ctrl.Tag, Convert.ToInt32(((ComboBox)ctrl).SelectedIndex) + 1);
                }
                //else if (ctrl is PictureBox)
                //{
                //    dataManager.set((string)ctrl.Tag, ctrl.Cursor);
                //}
                else if (ctrl is DataGridView)
                {
                    int cantColumns = ((DataGridView)ctrl).Columns.Count;
                    int cantRows = ((DataGridView)ctrl).Rows.Count;

                    //List<double[]> newData = new List<double[]>();
                    var newData = new List<string[]>();

                    for (int i = 0; i < cantRows; ++i)
                    {
                        newData.Add(new string[cantColumns]);
                        for (int j = 0; j < cantColumns; ++j)
                        {
                            object val = ((DataGridView)ctrl)[j, i].Value;
                            if (val == null) newData[i][j] = "0.00";
                            else newData[i][j] = val.ToString();
                        }
                    }

                    _dataManager.Set((string)ctrl.Tag, newData);

                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 2810111715: error with data. ", "ERROR 2810111715: error en los datos. ") +
                    ex.Message + ".", "RiverFlow2D", MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
            }
        }

        private void UpdateHorizontalDataGridView(Control ctrl)
        {
            _updating = true;
            try
            {
                var dataSource = (List<string[]>)(_dataManager.Get((string)ctrl.Tag));
                int size = dataSource.Count;
                ((DataGridView)ctrl).Rows.Clear();

                if (size > 0)
                {
                    for (int i = 0; i <= dataSource[0].Length - 1; ++i)
                    {
                        var row = new string[size];
                        for (int j = 0; j < size; ++j)
                            row[j] = dataSource[j][i];

                        ((DataGridView)ctrl).Rows.Add(row);
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 0111131800: error in control: ", "ERROR 0111131800: error en control: ") +
                    ctrl.Name + ".\n" + ex.Message, "RiverFlow2D",
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                _updating = false;
            }

            //int cantColumns = ((DataGridView) ctrl).Columns.Count;
            //int cantRows = ((DataGridView) ctrl).Rows.Count;

            //	//List<double[]> newData = new List<double[]>();
            //	var newData = new List<string[]>();

            //	for (int newCol = 0 ; newCol < cantColumns ; ++newCol)
            //	{
            //		newData.Add(new string[cantRows]);
            //		for (int j = 0 ; j < cantRows ; ++j)
            //		{
            //			object val = ((DataGridView) ctrl)[newCol, j].Value;
            //			if (val == null) newData[newCol][j] = "0.00";
            //			else newData[newCol][j] = val.ToString();
            //		}
            //	}

            //	_dataManager.Set((string) ctrl.Tag, newData);

        }


        private void UpdateControl(Control ctrl)
        {

            try
            {
                _updating = true;


                if (ctrl is TextBox)
                {
                    ctrl.Text = (_dataManager.Get((string)ctrl.Tag)).ToString();
                }
                else if (ctrl is CheckBox)
                {
                    ((CheckBox)ctrl).Checked = Convert.ToBoolean(_dataManager.Get((string)ctrl.Tag));
                }
                else if (ctrl is RadioButton)
                {
                    ((RadioButton)ctrl).Checked = Convert.ToBoolean(_dataManager.Get((string)ctrl.Tag));
                }
                else if (ctrl is NumericUpDown)
                {
                    ((NumericUpDown)ctrl).Text = (_dataManager.Get((string)ctrl.Tag)).ToString();
                }
                else if (ctrl is ComboBox)
                {
                    ((ComboBox)ctrl).SelectedIndex = ((int)(_dataManager.Get((string)ctrl.Tag))) - 1;
                }
                else if (ctrl is DataGridView)
                {

                    var dataSource = (List<string[]>)(_dataManager.Get((string)ctrl.Tag));
                    int size = dataSource.Count;
                    ((DataGridView)ctrl).Rows.Clear();

                    if (size > 0)
                    {
                        int numColumns = dataSource[0].Length;
                        for (int i = 0; i < size; ++i)
                        {
                            ((DataGridView)ctrl).Rows.Add(dataSource[i]);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 2810111717: error in control: ", "ERROR 2810111717: error en control: ") +
                    ctrl.Name + ".\n" + ex.Message, "RiverFlow2D",
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                _updating = false;
            }

        }

        private void UpdateBridgePlot(int col, int row, float value)
        {
            try
            {
                Bridges currentBridge = Application.OpenForms["Bridges"] != null
                    ? (Bridges)Application.OpenForms["Bridges"]
                    : null;

                if (currentBridge != null)
                {
                    if (currentBridge.UpdatePlotValues)
                    {
                        string geometry;
                        if (col == 1)
                            geometry = "Bed";
                        else if (col == 2)
                            geometry = "Zlower";
                        else if (col == 3)
                            geometry = "Zupper";
                        else if (col == 4)
                            geometry = "Deck";
                        else
                            geometry = "";

                        currentBridge.ChangeSingleBridgeCoordinate(geometry, row, value);
                        currentBridge.RedrawCanvas();
                        currentBridge.RedrawAfterResize();

                        _bridgeTabShowing = true;
                        CellValueChanged = true;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("ERROR 2306141343: " + ex.Message, "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            }
        }

        private void RewriteDATas2013(string projectName, string suffix)
        {
            StreamReader s = File.OpenText(projectName + ".DAT");
            var dat = new List<string>();
            string read;
            while (!s.EndOfStream)
            {
                read = s.ReadLine();
                dat.Add(read);
            }
            s.Close();

            TextWriter w = new StreamWriter(projectName + suffix + ".DAT");
            w.WriteLine("201301");
            for (int i = 1; i <= dat.Count - 1; ++i)
            {
                if (i == 4)
                {
                    string[] split = dat[i].Split(new[] { ' ', '\t' }, StringSplitOptions.RemoveEmptyEntries);
                    dat[i] = "0";
                    for (int k = 1; k < split.Length; k++)
                        dat[i] = dat[i] + " " + split[k];
                }
                w.WriteLine(dat[i]);
            }
            if (dat.Count == 13)
            {
                w.WriteLine("0");
                w.WriteLine("0");
            }
            w.Close();

        }

        private void ConvertFileToNewVersion(string projectName, string fileExtension, string suffix)
        {
            try
            {
                //See if file to change name exists:
                if (File.Exists(projectName + fileExtension))
                    //See if target file exists:
                    if (!(File.Exists(projectName + suffix + fileExtension)))
                    {
                        File.Copy(projectName + fileExtension, projectName + suffix + fileExtension);
                    }
            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 2107131252: error while converting file ", "ERROR 2107131252: error convirtiendo archivo ") +
                    projectName + fileExtension + ". " + ex.Message,
                    "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void ColorRepeats(Control ctrl)
        {

            try
            {
                var dataSource = (List<string[]>)(_dataManager.Get((string)ctrl.Tag));
                int size = dataSource.Count;
                Color currentColor = Color.White;

                if (size > 1)
                {
                    for (int i = 0; i < size; ++i)
                    {
                        //reset first to white
                        ((DataGridView)ctrl).Rows[i].DefaultCellStyle.BackColor = Color.White;

                        if (i > 0)
                        {
                            if (dataSource[i - 1][0] == dataSource[i][0])
                                ((DataGridView)ctrl).Rows[i].DefaultCellStyle.BackColor = currentColor;
                            else
                            {
                                if (currentColor == Color.AntiqueWhite)
                                    currentColor = Color.White;
                                else
                                    currentColor = Color.AntiqueWhite;

                                ((DataGridView)ctrl).Rows[i].DefaultCellStyle.BackColor = currentColor;

                            }
                        }
                    }
                }
            }
            catch
            {
            }

        }

        private void DataBedLoadSedimentReadOnly(bool isReadOnly)
        {
            dataBedLoadSediment.Rows[1].ReadOnly = isReadOnly;
            dataBedLoadSediment.Rows[3].ReadOnly = isReadOnly;

            dataBedLoadSediment.Rows[1].Visible = !isReadOnly;
            dataBedLoadSediment.Rows[3].Visible = !isReadOnly;

            string units;
            if (Universal.RiverUnits == "Metric")
                units = "(mts)";
            else
                units = "(ft)";

            if (isReadOnly)
                dataBedLoadSediment[0, 2].Value = "Diameter " + units;
            else
                dataBedLoadSediment[0, 2].Value = "Diameter D50 " + units;
        }

        private void btnRun_Click(object sender, EventArgs e)
        {
            bool warnings = false;
            DialogResult dlgResult1 = MessageBox.Show(Universal.Idioma("Would you like to save changes?", 
                                                        "¿Quiere almacenar los cambios?"), "RiverFlow2D",MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question);

            if (dlgResult1 == DialogResult.Cancel)
            {
                // exit
            }
            else
            {
                Boolean validDat = ValidAllDipData();

                //MessageBox.Show(_currentProjectPathAndName);

                if (!validDat)
                {
                    DialogResult dlgResult2 =
                        MessageBox.Show(Universal.Idioma("There are errors in RiverFlow2D panel environment data. Would you like to save the data anyway?",
                        "Hay errores en el panel de datos ambientales de Riverflow2D. ¿Desea almacenarlos de todos modos?"),
                            "RiverFlow2D", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                    if (dlgResult2 == DialogResult.Yes)
                    {
                        if (dlgResult1 == DialogResult.Yes)
                        {
                            if (SaveAllFiles("Do not validate", ref warnings))
                            {
                                if (warnings)
                                {
                                    DialogResult dlgResult =
                                        MessageBox.Show(Universal.Idioma("There were errors or warnings while saving data files.\nWould you like to run the model?", 
                                        "Hay errores o advertencias durante la escritura de datos. ¿Desea correr el modelo de todos modos?"),
                                            "RiverFlow2D", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                                    if (dlgResult == DialogResult.Yes) RunRiverFLO();
                                }
                            }
                        }
                        else //dlgResult1 =No => do not save data
                        {
                            RunRiverFLO();
                        }
                    }
                }
                else
                {
                    if (dlgResult1 == DialogResult.Yes)
                    {
                        if (SaveAllFiles("Do not validate", ref warnings))
                        {
                            if (warnings)
                            {
                                DialogResult dlgResult =
                                    MessageBox.Show(Universal.Idioma("There were errors or warnings while saving data files.\nWould you like to run the model?",
                                    "Hay errores o advertencias durante la escritura de datos. ¿Desea correr el modelo de todos modos?"),
                                        "RiverFlow2D", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                                if (dlgResult == DialogResult.Yes) RunRiverFLO();
                            }
                            else // save had no  warnings. Run model
                            {
                                RunRiverFLO();
                            }
                        }
                    }
                    else //dlgResult1=No => do not save data
                    {
                        RunRiverFLO();
                    }
                }
            }
        }

        private void btnSave_Click(object sender, EventArgs e)
        {
            bool warnings = false;
            SaveAllFiles("Validate", ref warnings);
        }

        private void btnSaveRainfall_Click(object sender, EventArgs e)
        {
            if (dataRainfallEvaporationZones.RowCount >= 1) //Check for at least one row (1 when not allow to add/delete rows) 
            {
                var saveFileDialog = new SaveFileDialog
                {
                    Filter = "LRAIN files (*.LRAIN)|*.LRAIN",
                    InitialDirectory = _currentProjectPath,
                    FileName = _currentProjectName + ".LRAIN",
                    FilterIndex = 1,
                    RestoreDirectory = true
                };

                try
                {
                    if (saveFileDialog.ShowDialog() == DialogResult.OK)
                        _dataManager.SaveLRainFallToFile(saveFileDialog.FileName);
                }
                catch
                {
                    MessageBox.Show(Universal.Idioma("ERROR 2810111718: error trying to save .LRAIN file.", "ERROR 2810111718: error almacenando archivo .LRAIN."),
                        "RiverFlow2D", MessageBoxButtons.OK,
                        MessageBoxIcon.Error);
                }
            }
            else
            {
                MessageBox.Show(Universal.Idioma("The rainfall/evaporation table is empty. It was not saved.", "La tabla de lluvia/evaporación está vacía. No fue almacenada"), 
                    "RiverFlow2D", MessageBoxButtons.OK,  MessageBoxIcon.Information);
            }
        }

        private void btnSaveCrossSection_Click(object sender, EventArgs e)
        {
            if (dataCrossSection.RowCount >= 2)
            {
                var saveFileDialog = new SaveFileDialog
                {
                    Filter = "XSECS files (*.XSECS)|*.XSECS",
                    InitialDirectory = _currentProjectPath,
                    FileName = _currentProjectName + ".XSECS",
                    FilterIndex = 1,
                    RestoreDirectory = true
                };

                try
                {
                    if (saveFileDialog.ShowDialog() == DialogResult.OK)
                    {
                        //_dataManager.Set("XSEC_VALUES", dataCrossSection);
                        _dataManager.SaveCrossSectionsToFile(saveFileDialog.FileName);
                    }
                }
                catch
                {
                    MessageBox.Show(Universal.Idioma("ERROR 2810111719: error trying to save .XSECS file.", "ERROR 2810111719: error almacenando .XSECS."),
                        "RiverFlow2D", MessageBoxButtons.OK,
                        MessageBoxIcon.Error);
                }
            }
            else
            {
                MessageBox.Show(Universal.Idioma("The cross sections table is empty. It was not saved.", "La tabla de secciones transversales está vacía. No fue almacenada."), 
                    "RiverFlow2D", MessageBoxButtons.OK,  MessageBoxIcon.Information);
            }



        }

        private void btnSaveProfile_Click(object sender, EventArgs e)
        {
            if (dataProfile.RowCount >= 2)
            {
                var saveFileDialog = new SaveFileDialog
                {
                    Filter = "PROFILES files (*.PROFILES)|*.PROFILES",
                    InitialDirectory = _currentProjectPath,
                    FileName = _currentProjectName + ".PROFILES",
                    FilterIndex = 1,
                    RestoreDirectory = true
                };

                try
                {
                    if (saveFileDialog.ShowDialog() == DialogResult.OK) _dataManager.SaveProfileCutsToFile(saveFileDialog.FileName);
                }
                catch
                {
                    MessageBox.Show(Universal.Idioma("ERROR 2810111720: error trying to save .PROFILES file.", "ERROR 2810111720: error almacenando archivo .PROFILES."),
                        "RiverFlow2D", MessageBoxButtons.OK,
                        MessageBoxIcon.Error);
                }
            }
            else
            {
                MessageBox.Show(Universal.Idioma("The profiles table is empty. It was not saved.", "La tabla de perfiles está vacía. No fue almacenada."), 
                    "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }

        }

        private void txtTimeStep_Validated(object sender, EventArgs e)
        {
            if (txtTimeStep.Text != "")
            {
                UpdateData(txtTimeStep);
                if (RiverDipModel == "Model CPU" || RiverDipModel == "Model GPU")
                {
                    txtTimeStepFactor.Text = txtTimeStep.Text;
                    UpdateData(txtTimeStepFactor);
                }
            }
        }

        private void txtTimeStepFactor_Validated(object sender, EventArgs e)
        {
            if (txtTimeStepFactor.Text != "") UpdateData(txtTimeStepFactor);
        }

        private void txtSimulationTime_Validated(object sender, EventArgs e)
        {
            if (txtSimulationTime.Text != "") UpdateData(txtSimulationTime);
        }

        private void txtOutputInterval_Validated(object sender, EventArgs e)
        {
            if (txtOutputInterval.Text != "")
            {
                UpdateData(txtOutputInterval);
                if (RiverDipModel == "Model CPU" || RiverDipModel == "Model GPU")
                {
                    txtTimeStepFactor.Text = txtOutputInterval.Text;
                    UpdateData(txtTimeStepFactor);
                }
            }
        }

        private void radioMetric_Validated(object sender, EventArgs e)
        {
            _dataManager.Set((string)radioMetric.Tag, Convert.ToInt32(!radioMetric.Checked));
        }

        private void radioEnglish_Validated(object sender, EventArgs e)
        {
            _dataManager.Set((string)radioEnglish.Tag, Convert.ToInt32(radioEnglish.Checked));
        }

        private void chckOutputResultsCrossSections_Validated(object sender, EventArgs e)
        {
            UpdateData(chckOutputResultsCrossSections);
        }

        private void chckOutputResultsProfile_Validated(object sender, EventArgs e)
        {
            UpdateData(chckOutputResultsProfile);
        }

        private void chckGraphicOutput_Validated(object sender, EventArgs e)
        {
            //SetNOGRAPH();
            //UpdateData(chckGraphicOutput);
        }

        private void chckRainfallEvaporation_Validated(object sender, EventArgs e)
        {
            //UpdateData(chckRainfallEvaporation);
        }

        private void chckVariableTimeStep_Validated(object sender, EventArgs e)
        {
            UpdateData(chckVariableTimeStep);
        }

        //private void txtSelectiveLumpingParameter_Validated(object sender, EventArgs e)
        //{
        //    if (txtSelectiveLumpingParameter.Text != "") UpdateData(txtSelectiveLumpingParameter);
        //}

        private void txtManningsFactor_Validated(object sender, EventArgs e)
        {
            if (txtManningsFactor.Text != "") UpdateData(txtManningsFactor);
        }

        private void comboTransportFormmula_Validated(object sender, EventArgs e)
        {
            UpdateData(comboTransportFormula);
        }

        private void txtD50_Validated(object sender, EventArgs e)
        {
            if (txtD50.Text != "") UpdateData(txtD50);
        }

        private void txtGr_Validated(object sender, EventArgs e)
        {
            if (txtSG.Text != "") UpdateData(txtSG);
        }

        private void txtPorosity_Validated(object sender, EventArgs e)
        {
            if (txtPorosity.Text != "") UpdateData(txtPorosity);
        }

        private void SetGraphCodeTag()
        {
            if (comboGraphCode.SelectedIndex == 0) _dataManager.Set((string)comboGraphCode.Tag, 100); //Velocity Field (Black)
            else if (comboGraphCode.SelectedIndex == 1) _dataManager.Set((string)comboGraphCode.Tag, 110); //Velocity Field (Color)
            else if (comboGraphCode.SelectedIndex == 2) _dataManager.Set((string)comboGraphCode.Tag, 101); //Velocities & Depth
            else if (comboGraphCode.SelectedIndex == 3)
                _dataManager.Set((string)comboGraphCode.Tag, 102); //Velocities & Bed Elevations
            else if (comboGraphCode.SelectedIndex == 4) _dataManager.Set((string)comboGraphCode.Tag, 111); //Velocities Modules
            else if (comboGraphCode.SelectedIndex == 5) _dataManager.Set((string)comboGraphCode.Tag, 201); //Depths
            else if (comboGraphCode.SelectedIndex == 6) _dataManager.Set((string)comboGraphCode.Tag, 202); //Bed Elevations
            else if (comboGraphCode.SelectedIndex == 7) _dataManager.Set((string)comboGraphCode.Tag, 103); //Water Elevations
            else if (comboGraphCode.SelectedIndex == 8)
                _dataManager.Set((string)comboGraphCode.Tag, 203); //Velocities & Water Elevations
            else if (comboGraphCode.SelectedIndex == 9)
                _dataManager.Set((string)comboGraphCode.Tag, 204); //Erosion & Deposition
            else if (comboGraphCode.SelectedIndex == 10) _dataManager.Set((string)comboGraphCode.Tag, 600); //Concentration			
            else if (comboGraphCode.SelectedIndex == 11) _dataManager.Set((string)comboGraphCode.Tag, 601); //Concentration			
            else if (comboGraphCode.SelectedIndex == 12)
                _dataManager.Set((string)comboGraphCode.Tag, 602); //Concentration			
            else if (comboGraphCode.SelectedIndex == 13)
                _dataManager.Set((string)comboGraphCode.Tag, 603); //Concentration			
            else if (comboGraphCode.SelectedIndex == 14)
                _dataManager.Set((string)comboGraphCode.Tag, 604); //Concentration			
            else if (comboGraphCode.SelectedIndex == 15)
                _dataManager.Set((string)comboGraphCode.Tag, 605); //Concentration			
            else if (comboGraphCode.SelectedIndex == 16)
                _dataManager.Set((string)comboGraphCode.Tag, 606); //Concentration			
            else if (comboGraphCode.SelectedIndex == 17)
                _dataManager.Set((string)comboGraphCode.Tag, 607); //Concentration			
            else if (comboGraphCode.SelectedIndex == 18)
                _dataManager.Set((string)comboGraphCode.Tag, 608); //Concentration			
            else if (comboGraphCode.SelectedIndex == 19)
                _dataManager.Set((string)comboGraphCode.Tag, 609); //Concentration			
            else if (comboGraphCode.SelectedIndex == 20)
                _dataManager.Set((string)comboGraphCode.Tag, 610); //Concentration			
        }

        private void comboGraphCode_Validated(object sender, EventArgs e)
        {
            SetGraphCodeTag();

        }

        private void chckPlotAxis_Validated(object sender, EventArgs e)
        {
            UpdateData(chckPlotAxis);
        }

        private void chckCreateDXF_Validated(object sender, EventArgs e)
        {
            UpdateData(chckCreateDXF);
        }

        private void txtMin_Validated(object sender, EventArgs e)
        {
            if (txtMin.Text != "") UpdateData(txtMin);
        }

        private void txtMax_Validated(object sender, EventArgs e)
        {
            if (txtMax.Text != "") UpdateData(txtMax);
        }

        private void txtMaxVelocityVector_Validated(object sender, EventArgs e)
        {
            if (txtMaxVelocityVector.Text != "") UpdateData(txtMaxVelocityVector);
        }

        private void txtVelocityVectorFactor_Validated(object sender, EventArgs e)
        {
            if (txtVelocityVectorFactor.Text != "") UpdateData(txtVelocityVectorFactor);
        }

        private void txtX1_Validated(object sender, EventArgs e)
        {
            if (txtX1.Text != "") UpdateData(txtX1);
        }

        private void txtY1_Validated(object sender, EventArgs e)
        {
            if (txtY1.Text != "") UpdateData(txtY1);

        }

        private void txtX2_Validated(object sender, EventArgs e)
        {
            if (txtX2.Text != "") UpdateData(txtX2);
        }

        private void txtY2_Validated(object sender, EventArgs e)
        {
            if (txtY2.Text != "") UpdateData(txtY2);
        }

        private void dataRainfallEvaporation_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex >= 0 && e.RowIndex >= 0)
                if (Universal.EnableTextChangedEvent)
                {
                    //Get file name of secondary data. To be use as an index to the secondary data stored in memory structure:
                    int row = dataRainfallEvaporationZones.CurrentCell.RowIndex;
                    string fileName = _currentProjectPath + "\\" + dataRainfallEvaporationZones.Rows[row].Cells[1].Value.ToString();

                    //New value of cell:
                    var val = (string)dataRainfallEvaporation.Rows[e.RowIndex].Cells[e.ColumnIndex].Value;

                    UpdateIndividualCellValueInSecondaryTableStructure(fileName, val, e);
                }

            //if (e.ColumnIndex < 0 || e.RowIndex < 0) return;

            //int index = dataRainfallEvaporationZones.CurrentCell.RowIndex;
            //string fileName = _currentProjectPath + "\\" + dataRainfallEvaporationZones.Rows[index].Cells[1].Value.ToString();
            //var val =(string)dataRainfallEvaporation.Rows[e.RowIndex].Cells[e.ColumnIndex].Value;

            //UpdateIndividualCellValueInSecondaryTableStructure(fileName, val, e); 


            ////Value was changed in cell of this secundary (dependant) table in DIP. 
            ////Update value in stored copy of table in memory.

            //if (e.ColumnIndex < 0 || e.RowIndex < 0) return;
            //if (Universal.EnableTextChangedEvent)
            //{
            //  try
            //  {
            //    //From principal table, get name of file that stores secundary (dependant) table:
            //    int index = dataRainfallEvaporationZones.CurrentCell.RowIndex;
            //    string fileName = _currentProjectPath + "\\" + dataRainfallEvaporationZones.Rows[index].Cells[1].Value.ToString();

            //    //See if secundary (dependant) table is stored in structure in memory: 
            //    if (Universal.SecondaryGroups.ContainsKey(fileName))
            //    {
            //      //Get copy of the whole structure that contains table (referenced by file name) from stored collection of data groups:
            //      Universal.SecondaryGroup aGroup = Universal.SecondaryGroups[fileName];

            //      //Make a copy of the new cell value in (row,column) of secundary DIP table:
            //      var val = (string)dataRainfallEvaporation.Rows[e.RowIndex].Cells[e.ColumnIndex].Value;

            //      //See if row where new value is typed is an existing row and not the last empty row:
            //      if (e.RowIndex <= aGroup.Table.Length - 1)
            //      {
            //        //This is an existing row.
            //        //Replace old value of cell with the new value:
            //        if (e.ColumnIndex == 0)
            //          aGroup.Table[e.RowIndex].Col0 = val;
            //        else if (e.ColumnIndex == 1)
            //          aGroup.Table[e.RowIndex].Col1 = val;
            //        else
            //          aGroup.Table[e.RowIndex].Col2 = val;
            //      }
            //      else
            //      { //Data entered is in the last empty row.

            //        //Create a temporary empty table (only the table, not file name), with an additional row:
            //        var tmpSeries = new Universal.ExtraData[aGroup.Table.Length + 1];
            //        //Copy to temporary table the contents of table in memory without the empty row:
            //        aGroup.Table.CopyTo(tmpSeries, 0);

            //        //Store in empty column the new value (previously copy from (row,column) of table in DIP)::
            //        if (e.ColumnIndex == 0)
            //          tmpSeries[tmpSeries.Length - 1].Col0 = val;
            //        else if (e.ColumnIndex == 1)
            //          tmpSeries[tmpSeries.Length - 1].Col1 = val;
            //        else
            //          tmpSeries[tmpSeries.Length - 1].Col2 = val;

            //        //Change the table in aGroup:
            //        aGroup.Table = tmpSeries;
            //        //Update number of points (rows):
            //        aGroup.NPoints = aGroup.NPoints + 1;
            //      }

            //      //Replace table in group as indexed by name of file:
            //      Universal.SecondaryGroups[fileName] = aGroup;

            //    }
            //  }
            //  catch (Exception ex)
            //  {
            //    MessageBox.Show(Universal.Idioma("ERROR 2103170903: error modifying value. " + ex.Message, "RiverFlow2D", MessageBoxButtons.OK,
            //      MessageBoxIcon.Error);
            //  }
            //}
        }

        private void UpdateIndividualCellValueInSecondaryTableStructure(string fileName, string val, DataGridViewCellEventArgs row)
        {
            //Value was changed in cell of this secundary (dependant) table in DIP. 
            //Update value in stored copy of table in memory.

            if (row.ColumnIndex < 0 || row.RowIndex < 0) return;
            if (Universal.EnableTextChangedEvent)
            {
                try
                {
                    //See if secundary (dependant) table is stored in structure in memory: 
                    if (Universal.SecondaryGroups.ContainsKey(fileName))
                    {
                        //Get copy of the whole structure that contains table (referenced by file name) from stored collection of data groups:
                        Universal.SecondaryGroup aGroup = Universal.SecondaryGroups[fileName];

                        //See if row where new value is typed is an existing row and not the last empty row:
                        if (row.RowIndex <= aGroup.Table.Length - 1)
                        {
                            //This is an existing row.
                            //Replace old value of cell with the new value:
                            if (row.ColumnIndex == 0)
                                aGroup.Table[row.RowIndex].Col0 = val;
                            else if (row.ColumnIndex == 1)
                                aGroup.Table[row.RowIndex].Col1 = val;
                            else if (row.ColumnIndex == 2)
                                aGroup.Table[row.RowIndex].Col2 = val;
                            else if (row.ColumnIndex == 3)
                                aGroup.Table[row.RowIndex].Col3 = val;
                            else if (row.ColumnIndex == 4)
                                aGroup.Table[row.RowIndex].Col4 = val;
                            else if (row.ColumnIndex == 5)
                                aGroup.Table[row.RowIndex].Col5 = val;
                            else if (row.ColumnIndex == 6)
                                aGroup.Table[row.RowIndex].Col6 = val;
                            else if (row.ColumnIndex == 7)
                                aGroup.Table[row.RowIndex].Col7 = val;
                            else if (row.ColumnIndex == 8)
                                aGroup.Table[row.RowIndex].Col8 = val;
                            else if (row.ColumnIndex == 9)
                                aGroup.Table[row.RowIndex].Col9 = val;
                            else if (row.ColumnIndex == 10)
                                aGroup.Table[row.RowIndex].Col10 = val;
                            else if (row.ColumnIndex == 11)
                                aGroup.Table[row.RowIndex].Col11 = val;
                            else
                                aGroup.Table[row.RowIndex].Col12 = val;
                        }
                        else
                        { //Data entered is in the last empty row.

                            //Create a temporary empty table (only the table, not file name), with an additional row:
                            var tmpSeries = new Universal.SecondaryTable[aGroup.Table.Length + 1];
                            //Copy to temporary table the contents of table in memory without the empty row:
                            aGroup.Table.CopyTo(tmpSeries, 0);

                            //Store in empty column the new value (previously copy from (row,column) of table in DIP)::
                            if (row.ColumnIndex == 0)
                                tmpSeries[tmpSeries.Length - 1].Col0 = val;
                            else if (row.ColumnIndex == 1)
                                tmpSeries[tmpSeries.Length - 1].Col1 = val;
                            else
                                tmpSeries[tmpSeries.Length - 1].Col2 = val;

                            //Change the table in aGroup:
                            aGroup.Table = tmpSeries;
                            //Update number of points (rows):
                            aGroup.NPoints = aGroup.NPoints + 1;
                        }

                        //Replace table in group as indexed by name of file:
                        Universal.SecondaryGroups[fileName] = aGroup;

                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show(Universal.Idioma("ERROR 2103170902: error modifying value. ", "ERROR 2103170902: error modificando valor. ") +
                        ex.Message,
                        "RiverFlow2D", MessageBoxButtons.OK,
                      MessageBoxIcon.Error);
                }
            }

        }

        private void AddColumnsToSecondaryTableStructure(string fileName, int fromColumn, int nNewColumns)
        {
            try
            {
                //See if secundary table is stored in memory: 
                if (Universal.SecondaryGroups.ContainsKey(fileName))
                {
                    //Get copy of the whole structure that contains table (referenced by file name) from stored collection of data groups:
                    Universal.SecondaryGroup aGroup = Universal.SecondaryGroups[fileName];

                    for (int row = 0; row < aGroup.NPoints; row++)
                    {
                        for (int j = fromColumn; j < fromColumn + nNewColumns; j++)
                            switch (j)
                            {
                                case 0:
                                    aGroup.Table[row].Col0 = "0";
                                    break;
                                case 1:
                                    aGroup.Table[row].Col1 = "0";
                                    break;
                                case 2:
                                    aGroup.Table[row].Col2 = "0";
                                    break;
                                case 3:
                                    aGroup.Table[row].Col3 = "0";
                                    break;
                                case 4:
                                    aGroup.Table[row].Col4 = "0";
                                    break;
                                case 5:
                                    aGroup.Table[row].Col5 = "0";
                                    break;
                                case 6:
                                    aGroup.Table[row].Col6 = "0";
                                    break;
                                case 7:
                                    aGroup.Table[row].Col7 = "0";
                                    break;
                                case 8:
                                    aGroup.Table[row].Col8 = "0";
                                    break;
                                case 9:
                                    aGroup.Table[row].Col9 = "0";
                                    break;
                                case 10:
                                    aGroup.Table[row].Col10 = "0";
                                    break;
                                case 11:
                                    aGroup.Table[row].Col1 = "0";
                                    break;
                                case 12:
                                    aGroup.Table[row].Col2 = "0";
                                    break;
                                case 13:
                                    aGroup.Table[row].Col3 = "0";
                                    break;
                                case 14:
                                    aGroup.Table[row].Col4 = "0";
                                    break;
                                default:
                                    MessageBox.Show(Universal.Idioma("ERROR 180817171847: error adding columns to table of file:  ", "ERROR 180817171847: error agregando columnas a tabla del archivo:  ") +
                                        fileName, "RiverFlow2D", MessageBoxButtons.OK,
                                                    MessageBoxIcon.Error);
                                    break;
                            }
                    }

                    //Replace table in group as indexed by name of file:
                    Universal.SecondaryGroups[fileName] = aGroup;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 1408171634: error adding columns to table for file ", "ERROR 1408171634: error agregando columnas a tabla del archivo ") +
                    fileName + ex.Message, "RiverFlow2D", MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
            }
        }

        private void RemoveColumnsFromSecondaryTableStructure(string fileName, int fromColumn, int nColumnsToRemove)
        {

            try
            {
                //See if secundary table is stored in memory: 
                if (Universal.SecondaryGroups.ContainsKey(fileName))
                {
                    //Get copy of the whole structure that contains table (referenced by file name) from stored collection of data groups:
                    Universal.SecondaryGroup aGroup = Universal.SecondaryGroups[fileName];


                    for (int row = 0; row < aGroup.NPoints; row++)
                    {
                        for (int j = fromColumn; j >= fromColumn - nColumnsToRemove; j--)
                            switch (j)
                            {
                                case 0:
                                    aGroup.Table[row].Col0 = null;
                                    break;
                                case 1:
                                    aGroup.Table[row].Col1 = null;
                                    break;
                                case 2:
                                    aGroup.Table[row].Col2 = null;
                                    break;
                                case 3:
                                    aGroup.Table[row].Col3 = null;
                                    break;
                                case 4:
                                    aGroup.Table[row].Col4 = null;
                                    break;
                                case 5:
                                    aGroup.Table[row].Col5 = null;
                                    break;
                                case 6:
                                    aGroup.Table[row].Col6 = null;
                                    break;
                                case 7:
                                    aGroup.Table[row].Col7 = null;
                                    break;
                                case 8:
                                    aGroup.Table[row].Col8 = null;
                                    break;
                                case 9:
                                    aGroup.Table[row].Col9 = null;
                                    break;
                                case 10:
                                    aGroup.Table[row].Col10 = null;
                                    break;
                                case 11:
                                    aGroup.Table[row].Col1 = null;
                                    break;
                                case 12:
                                    aGroup.Table[row].Col2 = null;
                                    break;
                                case 13:
                                    aGroup.Table[row].Col3 = null;
                                    break;
                                case 14:
                                    aGroup.Table[row].Col4 = null; ;
                                    break;
                                default:
                                    MessageBox.Show(Universal.Idioma("ERROR 180817171843: error removing columns from table of file:  ", "ERROR 180817171843: error eliminando columnas de la tabla del archivo:  ") +
                                        fileName, "RiverFlow2D", MessageBoxButtons.OK,
                                                    MessageBoxIcon.Error);
                                    break;
                            }
                    }

                    //Replace table in group as indexed by name of file:
                    Universal.SecondaryGroups[fileName] = aGroup;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 1408171634: error removing columns from table for file: ", "ERROR 1408171634: error eliminando columnas de la tabla del archivo: ") +
                    fileName + ex.Message, "RiverFlow2D", MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
            }
        }

        private void dataRainfallEvaporation_RowsAdded(object sender, DataGridViewRowsAddedEventArgs e)
        {
            //if (!_updating)
            //      UpdateData(dataRainfallEvaporation);
        }

        private void dataRainfallEvaporation_RowsRemoved(object sender, DataGridViewRowsRemovedEventArgs e)
        {
            //if (!_updating)
            //  UpdateData(dataRainfallEvaporation);
        }

        //CrossSection Data Grid Events
        private void dataCrossSection_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex < 0 || e.RowIndex < 0) return;

            string value = ""; // = "0.0";
            try
            {
                value = dataCrossSection[e.ColumnIndex, e.RowIndex].Value.ToString();
            }
            catch (Exception)
            {
            }
            finally
            {
                dataCrossSection[e.ColumnIndex, e.RowIndex].Value = value;
                UpdateData(dataCrossSection);
            }
        }

        private void dataCrossSection_RowsAdded(object sender, DataGridViewRowsAddedEventArgs e)
        {
            if (!_updating)
            {
                UpdateData(dataCrossSection);
                ColorRepeats(dataCrossSection);
            }
        }

        private void dataCrossSection_RowsRemoved(object sender, DataGridViewRowsRemovedEventArgs e)
        {
            if (!_updating)
            {
                UpdateData(dataCrossSection);
                ColorRepeats(dataCrossSection);
            }
        }

        //Profile1 Data Grid Events
        private void dataProfile_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex < 0 || e.RowIndex < 0) return;

            string value = ""; // = "0.0";
            try
            {
                value = dataProfile[e.ColumnIndex, e.RowIndex].Value.ToString();
            }
            catch (Exception)
            {
            }
            finally
            {
                dataProfile[e.ColumnIndex, e.RowIndex].Value = value;
                UpdateData(dataProfile);
            }
            //if (e.ColumnIndex < 0 || e.RowIndex < 0) return;

            //string value = "0.0";
            //try
            //{
            //    value =dataProfile[e.ColumnIndex, e.RowIndex].Value.ToString();
            //}
            //catch (Exception) { }
            //finally
            //{
            //    dataProfile[e.ColumnIndex, e.RowIndex].Value = value;
            //    updateData(dataProfile);
            //}
        }


        private void dataProfile_RowsAdded(object sender, DataGridViewRowsAddedEventArgs e)
        {
            if (!_updating)
            {
                UpdateData(dataProfile);
                ColorRepeats(dataProfile);
            }
        }

        private void dataProfile_RowsRemoved(object sender, DataGridViewRowsRemovedEventArgs e)
        {
            if (!_updating)
            {
                UpdateData(dataProfile);
                ColorRepeats(dataProfile);
            }
        }


        //TimeQ (Inflow) Data Grid Events
        private void dataTimeQ_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {

            if (e.ColumnIndex < 0 || e.RowIndex < 0) return;
            string value = "0.0";
            try
            {
                value = Convert.ToDouble(dataTimeQ[e.ColumnIndex, e.RowIndex].Value).ToString("N2");
            }
            catch (Exception)
            {
            }
            finally
            {
                dataTimeQ[e.ColumnIndex, e.RowIndex].Value = value;
                UpdateData(dataTimeQ);
            }
        }

        private void dataTimeQ_RowsAdded(object sender, DataGridViewRowsAddedEventArgs e)
        {
            if (!_updating) UpdateData(dataTimeQ);
        }

        private void dataTimeQ_RowsRemoved(object sender, DataGridViewRowsRemovedEventArgs e)
        {
            if (!_updating) UpdateData(dataTimeQ);
        }


        private void chckVariableTimeStep_CheckedChanged(object sender, EventArgs e)
        {
            if (chckVariableTimeStep.Checked)
            {
                txtTimeStepFactor.Enabled = true;
                txtTimeStep.Enabled = false;
                if (txtTimeStepFactor.Text == "")
                {
                    AddError(txtTimeStepFactor,
                        Universal.Idioma("Control Data Courant number cannot be empty if the Variable Time Step Option is selected.", 
                        "El número de Courant no puede estar vacío si el intervalo de reporte es selecionado."),
                        "Control Data panel");
                    txtTimeStepFactor.BackColor = Color.FromArgb(255, 255, 180, 180);
                    if (!_errors.Contains(txtTimeStepFactor)) _errors.Add(txtTimeStepFactor);
                    return;
                }

                double x = Double.Parse(txtTimeStepFactor.Text);
                if (x <= 0 || x > 3)
                {
                    AddError(txtTimeStepFactor, Universal.Idioma("Control Data Time Step Factor must be in the range (0,3]",
                                                                  "El intervalo de tiempo debe estar en el intervalo (0,3]"), "Control Data panel");
                    txtTimeStepFactor.BackColor = Color.FromArgb(255, 255, 180, 180);
                    _errors.Add(txtTimeStepFactor);
                    return;
                }

                txtTimeStepFactor.BackColor = SystemColors.Window;

            }
            else
            {
                txtTimeStepFactor.Enabled = false;
                txtTimeStep.Enabled = true;
                errorProvider.SetError(txtTimeStepFactor, "");
                txtTimeStepFactor.BackColor = SystemColors.Control;
                _errors.Remove(txtTimeStepFactor);

            }

        }

        private void txtTimeStep_Validating(object sender, CancelEventArgs e)
        {
            if (txtTimeStep.Text == "")
            {
                if (RiverDipModel == "Model CPU")
                {
                    AddError(txtTimeStep, Universal.Idioma("Courant number CFL cannot be empty.","Número de Courant CFL no puede estar vacío."), "Control Data panel");
                    txtTimeStep.BackColor = Color.FromArgb(255, 255, 180, 180);
                    if (!_errors.Contains(txtTimeStep)) _errors.Add(txtTimeStep);
                    return;
                }
                else
                {
                    AddError(txtTimeStep, Universal.Idioma("Courant number CFL cannot be empty", "Número de Courant CFL no puede estar vacío."), "Control Data panel");
                    txtTimeStep.BackColor = Color.FromArgb(255, 255, 180, 180);
                    if (!_errors.Contains(txtTimeStep)) _errors.Add(txtTimeStep);
                    return;
                }
            }

            double x = Double.Parse(txtTimeStep.Text);
            if (RiverDipModel == "Model CPU" || RiverDipModel == "Model GPU")
                if (x <= 0 || x > 1)
                {
                    AddError(txtTimeStep, Universal.Idioma("CFL must be in the range (0, 1]", "CFL debe estar en el intervalo (0,1]"), "Control Data panel");
                    txtTimeStep.BackColor = Color.FromArgb(255, 255, 180, 180);
                    if (!_errors.Contains(txtTimeStep)) _errors.Add(txtTimeStep);
                }
                else
                {
                    errorProvider.SetError(txtTimeStep, "");
                    txtTimeStep.BackColor = SystemColors.Window;
                    _errors.Remove(txtTimeStep);
                }
            else if (x <= 0)
            {
                AddError(txtTimeStep, Universal.Idioma("Courant number CFL must be greater than 0.", "Número de Courant CFL debe ser mayor que 0."), "Control Data panel");
                txtTimeStep.BackColor = Color.FromArgb(255, 255, 180, 180);
                if (!_errors.Contains(txtTimeStep)) _errors.Add(txtTimeStep);
            }
            else
            {
                errorProvider.SetError(txtTimeStep, "");
                txtTimeStep.BackColor = SystemColors.Window;
                _errors.Remove(txtTimeStep);
            }
        }

        private void txtTimeStepFactor_Validating(object sender, CancelEventArgs e)
        {
            if (chckVariableTimeStep.Checked)
            {
                if (txtTimeStepFactor.Text == "")
                {
                    AddError(txtTimeStepFactor,
                        Universal.Idioma("Control Data Time Step Factor cannot be empty if the Variable Time Step Option is selected.", "El factor de paso del tiempo no puede estar vacío si la opción de pasos de tiempo variables está seleccionado."),
                        "Control Data panel");
                    txtTimeStepFactor.BackColor = Color.FromArgb(255, 255, 180, 180);
                    if (!_errors.Contains(txtTimeStepFactor)) _errors.Add(txtTimeStepFactor);
                    return;
                }

                double x = Double.Parse(txtTimeStepFactor.Text);
                if (x <= 0 || x > 3)
                {
                    AddError(txtTimeStepFactor, Universal.Idioma("Control Data Time Step Factor must be in the range (0,3]", "El intervalo de tiempo debe estar en el rango (0,3]"), "Control Data panel");
                    txtTimeStepFactor.BackColor = Color.FromArgb(255, 255, 180, 180);
                    _errors.Add(txtTimeStepFactor);
                }
                else
                {
                    errorProvider.SetError(txtTimeStepFactor, "");
                    txtTimeStepFactor.BackColor = SystemColors.Window;
                    _errors.Remove(txtTimeStepFactor);
                }
            }
        }

        private void chckSedimentTransport_CheckedChanged(object sender, EventArgs e)
        {

            ////Sediment transport FE.
            //int size = tabSedimentTransport.Controls.Count;

            //for (int newCol = 0; newCol < size; ++newCol)
            //{
            //	tabSedimentTransport.Controls[newCol].Enabled = chckSedimentTransport.Checked;
            //	RemoveError(tabSedimentTransport.Controls[newCol]);

            //	if (tabSedimentTransport.Controls[newCol] is Panel)
            //	{
            //		int sizePanel = tabSedimentTransport.Controls[newCol].Controls.Count;

            //		for (int j = 0; j < sizePanel; ++j)
            //		{
            //			tabSedimentTransport.Controls[newCol].Controls[j].Enabled = chckSedimentTransport.Checked;
            //			RemoveError(tabSedimentTransport.Controls[newCol].Controls[j]);
            //		}
            //	}
            //}

            //if (comboTransportFormula.SelectedIndex != 6) //Van Rijn
            //	txtD90.Enabled = false;
            //if (comboTransportFormula.SelectedIndex != 8) //rating curve
            //{
            //	txtA.Enabled = false;
            //	txtB.Enabled = false;
            //}

            //chckSTFRAC.Enabled = false;

            ////Sediment transport plus.
            //size = tabPageSedimentTransportPlus.Controls.Count;

            //for (int newCol = 0 ; newCol < size ; ++newCol)
            //{
            //	tabPageSedimentTransportPlus.Controls[newCol].Enabled = chckSedimentTransport.Checked;
            //	RemoveError(tabPageSedimentTransportPlus.Controls[newCol]);

            //	if (tabPageSedimentTransportPlus.Controls[newCol] is Panel)
            //	{
            //		int sizePanel = tabPageSedimentTransportPlus.Controls[newCol].Controls.Count;

            //		for (int j = 0 ; j < sizePanel ; ++j)
            //		{
            //			tabPageSedimentTransportPlus.Controls[newCol].Controls[j].Enabled = chckSedimentTransport.Checked;
            //			RemoveError(tabPageSedimentTransportPlus.Controls[newCol].Controls[j]);
            //		}
            //	}
            //}

            ////Sediment transport, mud/debris, and pollutant transport are mutually exclusive in PLUSes.

            //			//if (chckSedimentTransport.Checked)
            //			//    if (RiverDipModel == "Model CPU" || RiverDipModel == "Model GPU")
            //			//    {
            //			//        chckMud.Enabled = true;
            //			//        chckMud.Checked = false;
            //			//        chckAdvectionDispersion.Checked = true;
            //			//        chckAdvectionDispersion.Checked = false;
            //			//    }
            //			//    else if (RiverDipModel == "Model FE")
            //			//    {
            //			//        chckMud.Enabled = false;
            //			//        chckMud.Checked = false;
            //			//    }

            //UpdateData(radioSedimentTransport);
            //UpdateData(radioMudDebris);
            //UpdateData(radioPollutantTransport);
        }

        private void chckRainfallEvaporation_CheckedChanged(object sender, EventArgs e)
        {
            int size = tabRainfallEvaporation.Controls.Count;

            for (int i = 0; i < size; ++i)
            {
                tabRainfallEvaporation.Controls[i].Enabled = chckRainfallEvaporation.Checked;
                RemoveError(tabRainfallEvaporation.Controls[i]);

                if (tabRainfallEvaporation.Controls[i] is Panel)
                {
                    int sizePanel = tabRainfallEvaporation.Controls[i].Controls.Count;

                    for (int j = 0; j < sizePanel; ++j)
                    {
                        tabRainfallEvaporation.Controls[i].Controls[j].Enabled = chckRainfallEvaporation.Checked;
                        RemoveError(tabRainfallEvaporation.Controls[i].Controls[j]);
                    }
                }
            }
            SetIRAIN();
        }

        private void chckOutputResultsProfile_CheckedChanged(object sender, EventArgs e)
        {
            int size = tabProfileCutOutput.Controls.Count;

            for (int i = 0; i < size; ++i)
            {
                tabProfileCutOutput.Controls[i].Enabled = chckOutputResultsProfile.Checked;
                RemoveError(tabProfileCutOutput.Controls[i]);

                if (tabProfileCutOutput.Controls[i] is Panel)
                {
                    int sizePanel = tabProfileCutOutput.Controls[i].Controls.Count;

                    for (int j = 0; j < sizePanel; ++j)
                    {
                        tabProfileCutOutput.Controls[i].Controls[j].Enabled = chckOutputResultsProfile.Checked;
                        RemoveError(tabProfileCutOutput.Controls[i].Controls[j]);
                    }
                }
            }
        }

        private void chckOutputResultsCrossSections_CheckedChanged(object sender, EventArgs e)
        {
            int size = tabCrossSectionOutput.Controls.Count;

            for (int i = 0; i < size; ++i)
            {
                tabCrossSectionOutput.Controls[i].Enabled = chckOutputResultsCrossSections.Checked;
                RemoveError(tabCrossSectionOutput.Controls[i]);

                if (tabCrossSectionOutput.Controls[i] is Panel)
                {
                    int sizePanel = tabCrossSectionOutput.Controls[i].Controls.Count;

                    for (int j = 0; j < sizePanel; ++j)
                    {
                        tabCrossSectionOutput.Controls[i].Controls[j].Enabled = chckOutputResultsCrossSections.Checked;
                        RemoveError(tabCrossSectionOutput.Controls[i].Controls[j]);
                    }
                }
            }
        }



        //private void txtSelectiveLumpingParameter_Validating(object sender, CancelEventArgs e)
        //{
        //    if (txtSelectiveLumpingParameter.Text == "")
        //    {
        //        AddError(txtSelectiveLumpingParameter, "Selective Lumping Parameter cannot be empty.", "Control Data panel");
        //        return;
        //    }
        //    double x = Double.Parse(txtSelectiveLumpingParameter.Text);
        //    if (x < 0)
        //    {
        //        AddError(txtSelectiveLumpingParameter, "Selective Lumping Parameter cannot be negative.", "Control Data panel");
        //    }
        //    else
        //    {
        //        RemoveError(txtSelectiveLumpingParameter);
        //    }
        //}

        private void txtManningsFactor_Validating(object sender, CancelEventArgs e)
        {
            if (txtManningsFactor.Text == "")
            {
                AddError(txtManningsFactor, Universal.Idioma("Manning's n Factor cannot be empty.", "Factor n de Manning no puede estar vacío."), "Control Data panel");
                return;
            }
            double x = Double.Parse(txtManningsFactor.Text);
            if (x < 0.0 || x > 3)
            {
                AddError(txtManningsFactor, Universal.Idioma("Manning's n Factor must be in the range [0.0, 3]", "Factor n de Manning debe estar en el intervalo [0, 3]"), "Control Data panel");
            }
            else
            {
                RemoveError(txtManningsFactor);
            }
        }

        private void txtSimulationTime_Validating(object sender, CancelEventArgs e)
        {
            //Output interval cannot be empty
            if (txtSimulationTime.Text == "")
            {
                AddError(txtSimulationTime, Universal.Idioma("Simulation Time cannot be empty.", "El tiempo de simulación no puede estar vacío."), "Control Data panel");
                return;
            }

            if (txtOutputInterval.Text != "")
            {
                //Output interval must be less than simulation time
                double simTime = Double.Parse(txtSimulationTime.Text);
                double outputInterval = Double.Parse(txtOutputInterval.Text);

                if (outputInterval > simTime)
                {
                    //If output inveterate is less than simulation time there is an error with both of them
                    AddError(txtSimulationTime, Universal.Idioma("Simulation Time must be greater than Output Interval.", 
                        "El tiempo de simulación debe ser mayor que el intervalo de reportes"), "Control Data panel");
                    AddError(txtOutputInterval, Universal.Idioma("Output Interval must be less or equal to Simulation Time.", 
                        "El intervalo de reportes debe ser menor que tiempo de simulación"), "Control Data panel");
                    return;
                }

                //If simulation time is greater and is not empty then it has no problems
                RemoveError(txtOutputInterval);
            }
            else
            {
                AddError(txtSimulationTime, Universal.Idioma("Simulation Time must be greater than Output Interval.", 
                    "El tiempo de simulación debe ser mayor que el intervalo de reportes"), "Control Data panel");
                return;
            }

            RemoveError(txtSimulationTime);
        }

        private void txtOutputInterval_Validating(object sender, CancelEventArgs e)
        {
            //Output interval cannot be empty
            if (txtOutputInterval.Text == "")
            {
                AddError(txtOutputInterval, Universal.Idioma("Output Interval cannot be empty.", "El intervalo de reportes no puede estar vacío."), "Control Data panel");
                return;
            }

            if (txtSimulationTime.Text != "")
            {
                //Output interval must be less than simulation time
                double simTime = Double.Parse(txtSimulationTime.Text);
                double outputInterval = Double.Parse(txtOutputInterval.Text);

                if (outputInterval > simTime)
                {
                    //If output interval is less than simulation time there is an error with both of them
                    AddError(txtSimulationTime, Universal.Idioma("Simulation Time must be greater than Output Interval.", 
                        "El tiempo de simulación debe ser mayor que el intervalo de reportes."), "Control Data panel");
                    AddError(txtOutputInterval, Universal.Idioma("Output Interval must be less than the Simulation Time.", 
                        "El intervalo de reportes debe ser menor que el tiempo de simulación."), "Control Data panel");
                    return;
                }

                //If simulation time is greater and is not empty then it has no problems
                RemoveError(txtSimulationTime);
            }
            else
                AddError(txtOutputInterval, Universal.Idioma("Output Interval must be less or equal to Simulation Time.", "El intervalo de reportes debe ser menor o igual al tiempo de simulación."), "Control Data panel");

            RemoveError(txtOutputInterval);
        }

        private void txtD50_Validating(object sender, CancelEventArgs e)
        {
            if (txtD50.Text == "")
            {
                AddError(txtD50, Universal.Idioma("D50 cannot be empty.", "D50 no puede estar vacío."), "Sediment Transport panel");
                return;
            }
            double x = Double.Parse(txtD50.Text);
            if (x < 0.000001 || x > 50)
            {
                AddError(txtD50, Universal.Idioma("D50 must be in the range [0.000001, 50]", "D50 debe estar en el intervalo [0.000001, 50]"), "Sediment Transport panel");
                return;
            }

            if (comboTransportFormula.SelectedIndex == 6) //Van Rijn
            {
                if (txtD90.Text == "")
                {
                    AddError(txtD90, Universal.Idioma("D90 cannot be empty.", "D90 no puede estar vacío."), "Sediment Transport panel");
                    return;
                }

                //D90 must be greater than D50
                double d90 = Convert.ToDouble(txtD90.Text);
                if (x > d90)
                {
                    //If D90 is less than D50 there is an error with both of them
                    AddError(txtD90, Universal.Idioma("D90 must be greater than D50.", "D90 debe ser mayor que D50."), "Sediment Transport panel");
                    AddError(txtD50, Universal.Idioma("D50 must be less than D90.", "D50 debe ser menor que D90."), "Sediment Transport panel");
                    return;
                }

                RemoveError(txtD90);
            }

            RemoveError(txtD50);
        }

        private void txtGr_Validating(object sender, CancelEventArgs e)
        {
            if (txtSG.Text == "")
            {
                AddError(txtSG, Universal.Idioma("Sediment Specific Gravity cannot be empty.", "La gravedad específica del sedimento no puede estar vacía."), "Sediment Transport panel");
                return;
            }
            double x = Double.Parse(txtSG.Text);
            if (x < 2.0 || x > 2.8)
            {
                AddError(txtSG, Universal.Idioma("Sediment Specific Gravity must be in the range [2.0, 2.8]", "La gravedad específica del sedimento debe estar en el intervalo [2.0,2.8]"), "Sediment Transport panel");
            }
            else RemoveError(txtSG);
        }

        private void txtPorosity_Validating(object sender, CancelEventArgs e)
        {
            if (txtPorosity.Text == "")
            {
                AddError(txtPorosity, Universal.Idioma("Porosity cannot be empty.", "La porosidad no puede estar vacía."), "Sediment Transport panel");
                return;
            }
            double x = Double.Parse(txtPorosity.Text);
            if (x < 0.25 || x > 0.7)
            {
                AddError(txtPorosity, Universal.Idioma("Porosity must be in the range [0.25, 0.7]", "La porosidad debe estar en el intervalo [0.25, 0.7]"), "Sediment Transport panel");
            }
            else RemoveError(txtPorosity);
        }

        private void txtMin_Validating(object sender, CancelEventArgs e)
        {
            if (txtMin.Text == "") AddError(txtMin, Universal.Idioma("Min cannot be empty.", "Min no puede estar vacío."), "Graphic Output Options panel");
            else RemoveError(txtMin);
        }

        private void txtMax_Validating(object sender, CancelEventArgs e)
        {
            if (txtMax.Text == "") AddError(txtMax, Universal.Idioma("Max cannot be empty.", "Max no puede estar vacío."), "Graphic Output Options panel");
            else RemoveError(txtMax);
        }

        private void txtX1_Validating(object sender, CancelEventArgs e)
        {
            if (txtX1.Text == "") AddError(txtX1, Universal.Idioma("X1 cannot be empty.", "X1 no puede estar vacío."), "Graphic Output Options panel");
            else RemoveError(txtX1);
        }

        private void txtY1_Validating(object sender, CancelEventArgs e)
        {
            if (txtY1.Text == "") AddError(txtY1, Universal.Idioma("Y1 cannot be empty.", "Y1 no puede estar vacío."), "Graphic Output Options panel");
            else RemoveError(txtY1);
        }

        private void txtX2_Validating(object sender, CancelEventArgs e)
        {
            if (txtX2.Text == "") AddError(txtX2, Universal.Idioma("X2 cannot be empty.", "X2 no puede estar vacío."), "Graphic Output Options panel");
            else RemoveError(txtX2);
        }

        private void txtY2_Validating(object sender, CancelEventArgs e)
        {
            if (txtY2.Text == "") AddError(txtY2, Universal.Idioma("Y2 cannot be empty.", "Y2 no puede estar vacío"), "Graphic Output Options panel");
            else RemoveError(txtY2);
        }

        private void txtMaxVelocityVector_Validating(object sender, CancelEventArgs e)
        {
            if (txtMaxVelocityVector.Text == "")
            {
                AddError(txtMaxVelocityVector, Universal.Idioma("Max Velocity Vector cannot be empty.", "El Vector max. de Velocidad no puede estar vacío"), "Graphic Output Options panel");
                return;
            }
            double x = Double.Parse(txtMaxVelocityVector.Text);
            if (x <= 0)
            {
                AddError(txtMaxVelocityVector, Universal.Idioma("Time Step must be greater than 0.", "El intervalo de tiempo debe ser mayor que 0."), "Graphic Output Options panel");
            }
            else
            {
                RemoveError(txtMaxVelocityVector);
            }
        }

        private void txtVelocityVectorFactor_Validating(object sender, CancelEventArgs e)
        {
            if (txtVelocityVectorFactor.Text == "")
            {
                AddError(txtVelocityVectorFactor, Universal.Idioma("Velocity Vector Factor cannot be empty.", "El factor de velocidad no puede estar vacío."), "Graphic Output Options panel");
                return;
            }
            double x = Double.Parse(txtVelocityVectorFactor.Text);
            if (x <= 0 || x >= 20)
            {
                AddError(txtVelocityVectorFactor, Universal.Idioma("Velocity Vector Factor must be in the range [0,20]", "El factor de velocidad debe estar en el intervalo [0, 20]"),
                    "Graphic Output Options panel");
            }
            else
            {
                RemoveError(txtVelocityVectorFactor);
            }
        }

        private void AddError(Control ctrl, string message, string panel)
        {
            errorProvider.SetError(ctrl, message);
            ctrl.BackColor = Color.FromArgb(255, 255, 180, 180);
            if (!_errors.Contains(ctrl)) _errors.Add(ctrl);
            int i = _errors.IndexOf(ctrl);
            _errors[i].Tag = panel;
        }

        private void RemoveError(Control ctrl)
        {
            errorProvider.SetError(ctrl, "");
            if (ctrl is TextBox) ctrl.BackColor = SystemColors.Window;
            _errors.Remove(ctrl);
        }

        private bool ValidAllDipData()
        {
            //Validate Fields
            //if (_errors.Count > 0)
            //{


            //	int size = tabOptions.TabPages.Count;

            //	for (int newCol = 0 ; newCol < size ; ++newCol)
            //	{
            //		TabPage tPage = tabOptions.TabPages[newCol];
            //		if (tPage.Contains(_errors[0]))
            //		{
            //			tabOptions.SelectedIndex = newCol;
            //			_errors[0].Focus();

            //		}

            //	}

            //	MessageBox.Show(errorProvider.GetError(_errors[0]), "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);

            //	return false;
            //}



            if (_errors.Count > 0)
            {
                string errorsList = "";
                for (int i = 0; i < _errors.Count; ++i)
                {
                    errorsList += "\n" + "* " + _errors[i].Tag + ": " + errorProvider.GetError(_errors[i]);
                }

                MessageBox.Show(Universal.Idioma("The following errors were found:", "Se encontraron los siguientes errores:") + errorsList, 
                    "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);

                return false;
            }


            //if (RiverDipModel == "Model CPU" || RiverDipModel == "Model GPU")
            //{
            //	if (chckSedimentTransport.Checked && dataSuspendedSediment.Columns.Count < 2 &&
            //			dataBedLoadSediment.Columns.Count < 2)
            //	{
            //		MessageBox.Show(Universal.Idioma("Sediment transport is selected in the Control Data panel but the fraction tables are empty.\nOne or two tables are needed for the model to run.", "RiverFlow2D",
            //										MessageBoxButtons.OK, MessageBoxIcon.Error);
            //		return false;
            //	}

            //	if (chckSedimentTransport.Checked && !ValidateSedimentPlusVariables()) return false;

            //	return true;
            //}

            return true;
        }



        private void btnSaveInflow_Click(object sender, EventArgs e)
        {

            if (dataTimeQ.RowCount >= 2)
            {
                var saveFileDialog = new SaveFileDialog
                {
                    InitialDirectory = _currentProjectPath,
                    FilterIndex = 1,
                    RestoreDirectory = true
                };

                if (radioDischargeTimeInflow.Checked) saveFileDialog.Filter = "QVT files (*.QVT)|*.QVT|All files (*.*)|*.*";
                else saveFileDialog.Filter = "HVT files (*.HVT)|*.HVT|All files (*.*)|*.*";

                try
                {
                    if (saveFileDialog.ShowDialog() == DialogResult.OK) _dataManager.SaveInflowToFile(saveFileDialog.FileName);
                }
                catch
                {
                    MessageBox.Show(Universal.Idioma("ERROR 2810111731: error trying to save inflow file.", "ERROR 2810111731: error almacenando archivo de datos de entrada."),
                        "RiverFlow2D", MessageBoxButtons.OK,
                        MessageBoxIcon.Error);
                }
            }
            else
            {
                MessageBox.Show(Universal.Idioma("Inflow data table is empty. It was not saved.", "La tabla de datos de entradas está vacía. No fue almacenada."), 
                    "RiverFlow2D", MessageBoxButtons.OK,  MessageBoxIcon.Information);
            }




        }

        private void btnOpenOutflow_Click(object sender, EventArgs e)
        {
            var openFileDialog = new OpenFileDialog
            {
                InitialDirectory = _currentProjectPath,
                FilterIndex = 1,
                RestoreDirectory = true,
                CheckFileExists = true
            };

            if (radioDischargeTimeOutflow.Checked) openFileDialog.Filter = "QVT files (*.QVT)|*.QVT|All files (*.*)|*.*";
            else if (radioWSETime.Checked) openFileDialog.Filter = "HVT files (*.HVT)|*.HVT|All files (*.*)|*.*";
            else //radioDischargeCurve
                openFileDialog.Filter = "QVT files (*.QVT)|*.QVT|All files (*.*)|*.*";

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                FileName.Text = openFileDialog.FileName;
                _dataManager.LoadOutflowFromFile(openFileDialog.FileName);
                UpdateWithOUTFLOWFile();
            }
        }

        private void btnSaveOutflow_Click(object sender, EventArgs e)
        {
            if (dataOutflow.RowCount >= 2)
            {
                var saveFileDialog = new SaveFileDialog
                {
                    InitialDirectory = _currentProjectPath,
                    FilterIndex = 1,
                    RestoreDirectory = true
                };

                if (radioDischargeTimeOutflow.Checked) saveFileDialog.Filter = "QVT files (*.QVT)|*.QVT|All files (*.*)|*.*";
                else if (radioWSETime.Checked) saveFileDialog.Filter = "HVT files (*.HVT)|*.HVT|All files (*.*)|*.*";
                else //radioDischargeCurve
                    saveFileDialog.Filter = "QVT files (*.QVT)|*.QVT|All files (*.*)|*.*";


                if (saveFileDialog.ShowDialog() == DialogResult.OK)
                {
                    //update data with changes
                    _dataManager.SaveOutflowToFile(saveFileDialog.FileName);
                    FileName.Text = saveFileDialog.FileName;
                }
            }
            else
            {
                MessageBox.Show(Universal.Idioma("Outflow data table is empty. It was not saved.", "La tabla de datos de salidas está vacía. No fue almacenada."), 
                    "RiverFlow2D",  MessageBoxButtons.OK,  MessageBoxIcon.Information);
            }

        }


        private void RunRiverFLO()
        {
            //Check that required files exist:
            // .DAT (control data), .TBA (mesh boundary data), .FED (finite element data), .IFL (open boundary conditions)
            // Latest: .TBA and IFL may not exist. Model will create it
            string neededFiles = "";

            if (RiverFlo2D._DIPPath == null)
            {
                //DIP is called directly (not from SMS or QGIS), therefore .DAT must exist
                if (!File.Exists(_currentProjectPathAndName + ".DAT"))
                    neededFiles += "\n\n" + "° File " + _currentProjectPathAndName + ".DAT is required.";
            }

            int dip = (int)_dataManager.Get("DIP"); //variable DIP is in .DAT to see if DIP is run from QGIS
            if (dip == 1  || dip == 0)
            {
                //DIP is not called from QGIS, needs .FED
                if (!File.Exists(_currentProjectPathAndName + ".FED") )
                    neededFiles += "\n\n" + "° File " + _currentProjectPathAndName + ".FED is required.";
            }
			else if (dip == 2) //DIP is called from QGIS, needs .FED or .FED0
				if (!File.Exists(_currentProjectPathAndName + ".FED") & !File.Exists(_currentProjectPathAndName + ".FED0"))
					neededFiles += "\n\n" + "° File " + _currentProjectPathAndName + ".FED or .FED0 is required.";

			if (neededFiles != "")
            {
                neededFiles = Universal.Idioma("ERROR 2003141854: The model can't run without the following file(s):",
                                               "ERROR 2003141854: El modelo no puede correr sin los siguientes archivos(s):") 
                                               + "\n" + neededFiles;
                MessageBox.Show(neededFiles, "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            //Check that .2DM exists:
            //string file2DM = _currentProjectPathAndName + ".2DM";
            //DialogResult dlgResult; 

            //Boolean exists = File.Exists(file2DM);
            //if (exists)
            //{

            //	if (File.Exists(_currentProjectPathAndName + ".DAT"))
            //		//Offer Yes, No, or Cancel:
            //		dlgResult = MessageBox.Show(Universal.Idioma("Do you want to use the data from the .2DM file:" + "\n" + _currentProjectPathAndName + ".2DM?",
            //			"RiverFlow2D", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question);
            //	else
            //		//Offer only OK or Cancel (can't run if not use .2DM without .DAT:
            //		dlgResult = MessageBox.Show(Universal.Idioma("Use the data from the .2DM file?:" + "\n" + _currentProjectPathAndName + ".2DM?",
            //			"RiverFlow2D", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
            //}
            //else dlgResult = DialogResult.No;

            //if (dlgResult== DialogResult.Cancel)
            //	return;
            //else if (dlgResult == DialogResult.Yes || dlgResult == DialogResult.OK)
            //{
            //	//.2DM existe and user wants to use it: delete SKIP2DM.TXT:
            //	string fileSKIP2DM = _currentProjectPath + "\\SKIP2DM.TXT";
            //	File.Delete(fileSKIP2DM);
            //}
            //else //dlgResult = No
            //{
            //	//.2DM doesn´t exist or user doesn't want to use it. Write SKIP2DM.TXT
            //	string fileSKIP2DM = _currentProjectPath+ "\\SKIP2DM.TXT";
            //	TextWriter w = new StreamWriter(fileSKIP2DM);
            //	w.Close();				
            //}


            //run model
            string args;
            var proc = new Process();

            if (File.Exists(_startupPath + "\\RiverFlow2Dm5.exe"))
            {
                try
                {
                    args = _currentProjectPathAndName;
                    proc.StartInfo.Arguments = args;
                    proc.StartInfo.FileName = _startupPath + "\\RiverFlow2Dm5.exe";
                    proc.StartInfo.UseShellExecute = true;
                    proc.StartInfo.RedirectStandardOutput = false;
                    //MessageBox.Show(Universal.Idioma("RiverFLow2Dm5.exe will run with project\n\n" + _currentProjectPathAndName,
                    //"RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    proc.Start();

                    //Close DIP:
                    Close();
                }
                catch (Exception ex)
                {
                    MessageBox.Show(Universal.Idioma("ERROR 2101121045: error running the model. ", "ERROR 2101121045: error corriendo el modelo. ") +
                        ex.Message + ": RiverFlow2Dm5.exe",
                        "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            else
            {
                MessageBox.Show(Universal.Idioma("Model RiverFlow2Dm5.exe not found. Select it in the following dialog.", 
                    "El modelo RiverFlow2Dm5.exe no se encontró. Selecciónelo en el siguiente diálogo:"), 
                    "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                var openFileDialog = new OpenFileDialog
                {
                    Filter = "RiverFlow2Dm5.exe (*.exe)|*.exe",
                    FilterIndex = 1,
                    Title = "Choose executable RiverFlow2D model",
                    CheckFileExists = true,
                    FileName = "RiverFlow2Dm5.exe"
                };

                if (openFileDialog.ShowDialog() == DialogResult.OK)
                    try
                    {
                        int index = openFileDialog.FileName.LastIndexOf("\\", StringComparison.Ordinal);
                        openFileDialog.FileName.Remove(index);

                        args = _currentProjectPathAndName;
                        proc.StartInfo.Arguments = args;
                        proc.StartInfo.FileName = openFileDialog.FileName;
                        proc.StartInfo.UseShellExecute = true;
                        proc.StartInfo.RedirectStandardOutput = false;
                        //MessageBox.Show(Universal.Idioma("RiverFLow2Dm5.exe will run with project\n\n" + _currentProjectPathAndName,
                        //    "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        proc.Start();

                        //Close DIP:
                        Close();
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(Universal.Idioma("ERROR 2101121159: error running the model. ", "ERROR 2101121159: error corriendo el modelo. ") +
                            ex.Message + ": RiverFlow2Dm5.exe",
                            "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
            }

        }

        private bool SaveAllFiles(string validate, ref bool warnings)
        {
            Boolean validData;
            if (validate == "Do not validate")
                validData = true;
            else
                validData = ValidAllDipData();

            if (validData)
            {
                var saveFileDialog = new SaveFileDialog
                {
                    Filter = "DAT files (*.DAT)|*.DAT",
                    InitialDirectory = _currentProjectPath,
                    FileName = _currentProjectName,
                    FilterIndex = 1,
                    RestoreDirectory = false
                };


                if (saveFileDialog.ShowDialog() == DialogResult.OK)
                {
                    try
                    {
                        warnings = false;

                        //Reset variables to write RiverFLO2Ddata.VAL
                        ValFile.ValIndex = 0;
                        ValFile.RiverFLO2DdataVal = new string[200];
                        ValFile.SaveRiverFLO2DdataVal = true;

                        _saveAllwarnings = "";
                        _emptyTables = "";
                        _notLoadedFiles = "";

                        string filenameDAT = saveFileDialog.FileName;

                        //See if path or name is new.
                        bool newPathOrName = filenameDAT.ToUpper() != _currentProjectPathAndName.ToUpper() + ".DAT";

                        #region  #Region For all data that is always saved

                        //---------------------------------------
                        //save .DAT
                        //---------------------------------------
                        try
                        {
                            //_dataManager.Set("Version", "201804");
                            _dataManager.SaveControlDataToFile(filenameDAT);
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show(Universal.Idioma("ERROR 2810111722: error trying to save .DAT file. ", "ERROR 2810111722: error almacenado archivo .DAT. ") +
                                ex.Message, "RiverFlow2D",
                                MessageBoxButtons.OK, MessageBoxIcon.Error);
                            warnings = true;
                        }

                        //NOTE: now no need to save .IFL, model will do it.

                        //---------------------------------------
                        //Inflow: always save inflow if not empty
                        //---------------------------------------
                        if (dataTimeQ.RowCount >= 2)
                        {
                            try
                            {
                                string filenameINFLOW = FileName.Text;
                                _dataManager.SaveInflowToFile(filenameINFLOW);
                            }
                            catch (Exception ex)
                            {
                                MessageBox.Show(Universal.Idioma("ERROR 0512111620: error trying to save inflow file. ", "ERROR 0512111620: error almacenando archivo de datos de entrada. ") +
                                    ex.Message, "RiverFlow2D", MessageBoxButtons.OK,
                                    MessageBoxIcon.Error);
                                warnings = true;
                            }
                        }
                        // do not need this "else". The inflow could not be used
                        //else
                        //{
                        //    saveAllwarnings += "\n" + "° The inflow table empty. It was not saved.";
                        //}

                        //---------------------------------------
                        //Outflow: always save outflow if not empty
                        //---------------------------------------
                        if (dataOutflow.RowCount >= 2)
                        {
                            try
                            {
                                string filenameOUTFLOW = FileName.Text;
                                _dataManager.SaveOutflowToFile(filenameOUTFLOW);
                            }
                            catch
                            {
                                MessageBox.Show(Universal.Idioma("ERROR 2599001125: error trying to save outflow file.", "ERROR 2599001125: error almacenando archivo de datos de salida."),
                                    "RiverFlow2D", MessageBoxButtons.OK,
                                    MessageBoxIcon.Error);
                                warnings = true;
                            }
                        }

                        //---------------------------------------
                        // .PLOT
                        //---------------------------------------
                        if (!_disablePlotter)
                        {
                            try
                            {
                                string filenamePLOT = filenameDAT.Remove(filenameDAT.Length - 3) + "PLOT";
                                _dataManager.SavePlotToFile(filenamePLOT);
                            }
                            catch (Exception ex)
                            {
                                MessageBox.Show(Universal.Idioma("ERROR 2704121127: error trying to save .PLOT file. ", "ERROR 2704121127: error almacenando archivo .PLOT. ") +
                                    ex.Message, "RiverFlow2D",
                                    MessageBoxButtons.OK, MessageBoxIcon.Error);
                                warnings = true;
                            }
                        }

                        #endregion For all data that it is allways saved

                        #region Region For data that is saved if checked and if exists, or name or directory are different

                        //---------------------------------------
                        //Graphic options .PLT
                        //---------------------------------------
                        //     if checked, save it     or          if exists here and has a new name or path, save it
                        if (chckGraphicOutput.Checked || (File.Exists(_currentProjectPathAndName + ".PLT") && newPathOrName))
                        {
                            //save graphic options in .PLT
                            try
                            {
                                string filenamePLT = filenameDAT.Remove(filenameDAT.Length - 3) + "PLT";
                                _dataManager.SaveGraphicOptionsToFile(filenamePLT);
                            }
                            catch
                            {
                                MessageBox.Show(Universal.Idioma("ERROR 2810111723: error trying to save .PLT file.", "ERROR 2810111723: error almacenando archivo .PLT."),
                                    "RiverFlow2D", MessageBoxButtons.OK,
                                    MessageBoxIcon.Error);
                                warnings = true;
                            }
                        }

                        //---------------------------------------
                        //Rainfall/Evaporation .RET
                        //---------------------------------------
                        //     if checked, save it          or        if exists here and has a new name or path, save it
                        if (chckRainfallEvaporation.Checked || (File.Exists(_currentProjectPathAndName + ".RET") && newPathOrName))
                        {
                            if (dataRainfallEvaporation.RowCount >= 2)
                            {
                                //save rainfall/evaporation in .RET
                                try
                                {
                                    string filenameRET = filenameDAT.Remove(filenameDAT.Length - 3) + "RET";
                                    _dataManager.SaveRainfallToFile(filenameRET);
                                }
                                catch
                                {
                                    MessageBox.Show(Universal.Idioma("ERROR 2810111724: error trying to save .RET file.", "ERROR 2810111724: error almacenando archivo .RET."),
                                        "RiverFlow2D", MessageBoxButtons.OK,
                                        MessageBoxIcon.Error);
                                    warnings = true;
                                }
                            }
                            else
                            {
                                _emptyTables += "\n" + "     ° Rainfall evaporation table. File " + _currentProjectName + ".RET";
                            }
                        }


                        //------------------
                        //Sediment Transport
                        //------------------
                        if (RiverDipModel == "Model CPU" || RiverDipModel == "Model GPU")
                        {
                            //---------------------------------------
                            //Sediment transport .SEDS
                            //---------------------------------------
                            //     if checked, save it        or          if exists here and has a new name or path, save it
                            if (radioSedimentTransport.Checked || (File.Exists(_currentProjectPathAndName + ".SEDS") && newPathOrName))
                                if (dataSuspendedSediment.ColumnCount >= 2 || dataBedLoadSediment.ColumnCount >= 2)
                                {
                                    //Save sediment in SEDS
                                    try
                                    {
                                        string filenameSEDIMENT = filenameDAT.Remove(filenameDAT.Length - 3) + "SEDS";
                                        _dataManager.SaveSedsToFile(filenameSEDIMENT);
                                    }
                                    catch
                                    {
                                        MessageBox.Show(Universal.Idioma("ERROR 1510131542: error trying to save .SEDS file.", "ERROR 1510131542: error almacenando archivo .SEDS."),
                                            "RiverFlow2D", MessageBoxButtons.OK,
                                            MessageBoxIcon.Error);
                                        warnings = true;
                                    }
                                }
                                else
                                {
                                    MessageBox.Show(Universal.Idioma("The sediment tables are empty. They were not saved.", 
                                        "La tablas de sedimentos están vacías. No fueron almacenadas."), 
                                        "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                }


                            //---------------------------------------
                            // .SOLUTES
                            //---------------------------------------
                            //     if checked, save it        or          if exists here and has a new name or path, save it
                            if (radioPollutantTransport.Checked || (File.Exists(_currentProjectPathAndName + ".SOLUTES") && newPathOrName))
                                //Save pollutant in SOLUTES
                                try
                                {
                                    string filenameSOLUTES = filenameDAT.Remove(filenameDAT.Length - 3) + "SOLUTES";
                                    _dataManager.SaveSolutesToFile(filenameSOLUTES);
                                }
                                catch
                                {
                                    MessageBox.Show(Universal.Idioma("ERROR 1203141045: error trying to save .SOLUTES file.", "ERROR 1203141045: error almacenando archivo .SOLUTES."),
                                        "RiverFlow2D", MessageBoxButtons.OK,
                                        MessageBoxIcon.Error);
                                }
                        }
                        else
                        {
                            //---------------------------------------
                            //Sediment transport .SED
                            //---------------------------------------
                            //     if checked, save it        or          if exists here and has a new name or path, save it
                            if (radioSedimentTransport.Checked || (File.Exists(_currentProjectPathAndName + ".SED") && newPathOrName))
                            {
                                //save sediment in .SED
                                try
                                {
                                    string filenameSEDIMENT = filenameDAT.Remove(filenameDAT.Length - 3) + "SED";
                                    _dataManager.SaveSedimentToFile(filenameSEDIMENT);
                                }
                                catch
                                {
                                    MessageBox.Show(Universal.Idioma("ERROR 2199112820: error trying to save .SED file.", "ERROR 2199112820: error almacenando archivo .SED."),
                                        "RiverFlow2D", MessageBoxButtons.OK,
                                        MessageBoxIcon.Error);
                                    warnings = true;
                                }
                            }
                        }

                        //---------------------------------------
                        //Pollutant Transport .AD
                        //---------------------------------------
                        //     if checked, save it        or          if exists here and has a new name or path, save it
                        if (radioPollutantTransport.Checked || (File.Exists(_currentProjectPathAndName + ".AD") && newPathOrName))
                        {

                            //save Pollutant Transport in .AD
                            try
                            {
                                string filenameAD = filenameDAT.Remove(filenameDAT.Length - 3) + "AD";
                                _dataManager.SaveAdToFile(filenameAD);
                            }
                            catch
                            {
                                MessageBox.Show(Universal.Idioma("ERROR 2404131617: error trying to save .AD file.", "ERROR 2404131617: error almacenando archivo .AD."),
                                    "RiverFlow2D", MessageBoxButtons.OK,
                                    MessageBoxIcon.Error);
                                warnings = true;
                            }
                        }


                        //---------------------------------------
                        //Cross sections .XSECS
                        //---------------------------------------
                        //     if checked, save it                 or          if exists here and has a new name or path, save it
                        if (chckOutputResultsCrossSections.Checked ||
                            (File.Exists(_currentProjectPathAndName + ".XSECS") && newPathOrName))
                        {
                            if (dataCrossSection.RowCount >= 2)
                            {
                                //save cross sections in .XSECS
                                try
                                {
                                    string filenameXSECS = filenameDAT.Remove(filenameDAT.Length - 3) + "XSECS";
                                    _dataManager.SaveCrossSectionsToFile(filenameXSECS);
                                }
                                catch
                                {
                                    MessageBox.Show(Universal.Idioma("ERROR 2810112726: error trying to save .XSECS file.", "ERROR 2810112726: error almacenando archivo .XSECS."),
                                        "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                    warnings = true;
                                }
                            }
                            else
                            {
                                _emptyTables += "\n" + "     ° Cross sections table. File " + _currentProjectName + ".XSECS";
                            }

                        }

                        //---------------------------------------
                        //Observation points .OBS
                        //---------------------------------------
                        //     if checked, save it                 or          if exists here and has a new name or path, save it
                        if (chckResultsAtObservationPoints.Checked || (File.Exists(_currentProjectPathAndName + ".OBS") && newPathOrName))
                        {
                            if (dataObservationPoints.RowCount >= 2)
                            {
                                try
                                {
                                    string filenameOBS = filenameDAT.Remove(filenameDAT.Length - 3) + "OBS";
                                    _dataManager.SaveObservationPointsToFile(filenameOBS);
                                }
                                catch
                                {
                                    MessageBox.Show(Universal.Idioma("ERROR 2499110918: error trying to save .OBS file.", "ERROR 2499110918: error almacenando archivo .OBS."),
                                        "RiverFlow2D", MessageBoxButtons.OK,
                                        MessageBoxIcon.Error);
                                    warnings = true;
                                }
                            }
                            else
                            {
                                _emptyTables += "\n" + "     ° Observation points table. File " + _currentProjectName + ".OBS";
                            }
                        }

                        //---------------------------------------
                        //Piers .PIERS
                        //---------------------------------------
                        //  if checked, save it     or          if exists here and has a new name or path, save it
                        if (chckPiers.Checked || (File.Exists(_currentProjectPathAndName + ".PIERS") && newPathOrName))
                        {
                            if (dataPiersDragForces.RowCount >= 2)
                            {
                                //save piers in .PIERS
                                try
                                {
                                    string filenamePIERS = filenameDAT.Remove(filenameDAT.Length - 3) + "PIERS";
                                    _dataManager.SavePiersToFile(filenamePIERS);
                                }
                                catch
                                {
                                    MessageBox.Show(Universal.Idioma("ERROR 2299111351: error trying to save .PIERS file.", "ERROR 2299111351: error almacenando archivo .PIERS."),
                                        "RiverFlow2D", MessageBoxButtons.OK,
                                        MessageBoxIcon.Error);
                                    warnings = true;
                                }
                            }
                            else
                            {
                                _emptyTables += "\n" + "     ° Pier drag forces table. File " + _currentProjectName + ".PIERS";
                            }

                        }

                        //---------------------------------------
                        //Culverts .CULVERTS
                        //---------------------------------------
                        //     if checked, save it     or          if exists here and has a new name or path, save it
                        if (chckCulverts.Checked || (File.Exists(_currentProjectPathAndName + ".CULVERTS") && newPathOrName))
                        {
                            if (dataCulverts.RowCount >= 1)
                            {
                                //save culverts in .CULVERTS
                                try
                                {
                                    string filenameCULVERTS = filenameDAT.Remove(filenameDAT.Length - 3) + "CULVERTS";
                                    _dataManager.SaveCulvertsToFile(filenameCULVERTS);
                                }
                                catch
                                {
                                    MessageBox.Show(Universal.Idioma("ERROR 2299111352: error trying to save .CULVERTS file.", "ERROR 2299111352: error almacenando archivo .CULVERTS."),
                                        "RiverFlow2D", MessageBoxButtons.OK,
                                        MessageBoxIcon.Error);
                                    warnings = true;
                                }
                            }
                            else
                            {
                                _emptyTables += "\n" + "     ° Culverts table. File " + _currentProjectName + ".CULVERTS";
                            }
                        }

                        //---------------------------------------
                        //Sources ans sinks .SOURCES
                        //---------------------------------------
                        //     if checked, save it      or          if exists here and has a new name or path, save it
                        if (chckSourcesAndSinks.Checked || (File.Exists(_currentProjectPathAndName + ".SOURCES") && newPathOrName))
                        {
                            if (dataSourcesAndSinks.RowCount >= 2)
                            {
                                //save sources and sinks in .SOURCES
                                try
                                {
                                    string filenameSOURCES = filenameDAT.Remove(filenameDAT.Length - 3) + "SOURCES";
                                    _dataManager.SaveSourcesToFile(filenameSOURCES);
                                }
                                catch
                                {
                                    MessageBox.Show(Universal.Idioma("ERROR 2299111353: error trying to save .SOURCES file.", "ERROR 2299111353: error almacenando archivo .SOURCES."),
                                        "RiverFlow2D", MessageBoxButtons.OK,
                                        MessageBoxIcon.Error);
                                    warnings = true;
                                }
                            }
                            else
                            {
                                _emptyTables += "\n" + "     ° Sources and sinks table. File " + _currentProjectName + ".SOURCES";
                            }
                        }

                        //---------------------------------------
                        //Weirs .WEIRS
                        //---------------------------------------
                        //  if checked, save it     or          if exists here and has a new name or path, save it
                        if (chckWeirs.Checked || (File.Exists(_currentProjectPathAndName + ".WEIRS") && newPathOrName))
                        {
                            if (dataWeirs.RowCount >= 1)
                            {
                                //save weirs in .WEIRS
                                try
                                {
                                    string filenameWEIRS = filenameDAT.Remove(filenameDAT.Length - 3) + "WEIRS";
                                    _dataManager.SaveWeirsToFile(filenameWEIRS);
                                }
                                catch
                                {
                                    MessageBox.Show(Universal.Idioma("ERROR 2299111355: error trying to save .WEIRS file.", "ERROR 2299111355: error almacenando archivo .WEIRS."),
                                        "RiverFlow2D", MessageBoxButtons.OK,
                                        MessageBoxIcon.Error);
                                    warnings = true;
                                }
                            }
                            else
                            {
                                _emptyTables += "\n" + "     ° Weirs table. File " + _currentProjectName + ".WEIRS";
                            }
                        }


                        //---------------------------------------
                        //Profiles .PROFILES
                        //---------------------------------------
                        //     if checked, save it           or          if exists here and has a new name or path, save it
                        if (chckOutputResultsProfile.Checked || (File.Exists(_currentProjectPathAndName + ".PROFILES") && newPathOrName))
                        {
                            if (dataProfile.RowCount >= 2)
                            {
                                //save results output in .PROFILES
                                try
                                {
                                    string filenamePROFILES = filenameDAT.Remove(filenameDAT.Length - 3) + "PROFILES";
                                    _dataManager.SaveProfileCutsToFile(filenamePROFILES);
                                }
                                catch
                                {
                                    MessageBox.Show(Universal.Idioma("ERROR 2299111407: error trying to save .PROFILES file.", "ERROR 2299111407: error almacenando archivo .PROFILES."),
                                        "RiverFlow2D", MessageBoxButtons.OK,
                                        MessageBoxIcon.Error);
                                    warnings = true;
                                }
                            }
                            else
                            {
                                _emptyTables += "\n" + "     ° Profiles table. File " + _currentProjectName + ".PROFILES";
                            }
                        }

                        //---------------------------------------
                        //Wind .WIND
                        //---------------------------------------
                        //     if checked, save it        or          if exists here and has a new name or path, save it
                        if (chckWind.Checked || (File.Exists(_currentProjectPathAndName + ".WIND") && newPathOrName))
                        {

                            //save wind in .WIND
                            try
                            {
                                string filenameWIND = filenameDAT.Remove(filenameDAT.Length - 3) + "WIND";
                                _dataManager.SaveWindPlusToFile(filenameWIND);
                            }
                            catch
                            {
                                MessageBox.Show(Universal.Idioma("ERROR 0708131241: error trying to save .WIND file.", "ERROR 0708131241: error almacenando archivo .WIND."),
                                    "RiverFlow2D", MessageBoxButtons.OK,
                                    MessageBoxIcon.Error);
                                warnings = true;
                            }
                        }


                        //---------------------------------------
                        //Mud/Debris .MUD
                        //---------------------------------------
                        //     if checked, save it        or          if exists here and has a new name or path, save it
                        if (radioMudDebris.Checked || (File.Exists(_currentProjectPathAndName + ".MUD") && newPathOrName))
                        {

                            //save mud/debris in .MUD
                            try
                            {
                                string filenameMUD = filenameDAT.Remove(filenameDAT.Length - 3) + "MUD";
                                _dataManager.SaveMudToFile(filenameMUD);
                            }
                            catch
                            {
                                MessageBox.Show(Universal.Idioma("ERROR 0708131243: error trying to save .MUD file.", "ERROR 0708131243: error almacenando archivo .MUD."),
                                    "RiverFlow2D", MessageBoxButtons.OK,
                                    MessageBoxIcon.Error);
                                warnings = true;
                            }
                        }


                        //---------------------------------------
                        //Oil Spill on Land .OILP
                        //---------------------------------------
                        //     if checked, save it        or          if exists here and has a new name or path, save it
                        if (radioOilSpillOnLand.Checked || (File.Exists(_currentProjectPathAndName + ".OILP") && newPathOrName))
                        {

                            //save oil spill on land in .OILP
                            try
                            {
                                string filenameOILP = filenameDAT.Remove(filenameDAT.Length - 3) + "OILP";
                                _dataManager.SaveOilPlusToFile(filenameOILP);
                            }
                            catch
                            {
                                MessageBox.Show(Universal.Idioma("ERROR 1709141444: error trying to save .OILP file.", "ERROR 1709141444: error almacenando archivo .OILP."),
                                    "RiverFlow2D", MessageBoxButtons.OK,
                                    MessageBoxIcon.Error);
                                warnings = true;
                            }
                        }

                        //---------------------------------------
                        //Gates .GATES
                        //---------------------------------------
                        //  if checked, save it     or          if exists here and has a new name or path, save it
                        if (chckGates.Checked || (File.Exists(_currentProjectPathAndName + ".GATES") && newPathOrName))
                        {
                            if (dataGates.RowCount >= 2)
                            {
                                //save gates in .GATES
                                try
                                {
                                    string filenameGates = filenameDAT.Remove(filenameDAT.Length - 3) + "GATES";
                                    _dataManager.SaveGatesToFile(filenameGates);
                                }
                                catch
                                {
                                    MessageBox.Show(Universal.Idioma("ERROR 1406141228: error trying to save .GATES file.", "ERROR 1406141228: error almacenando archivo .GATES."),
                                        "RiverFlow2D", MessageBoxButtons.OK,
                                        MessageBoxIcon.Error);
                                    warnings = true;
                                }
                            }
                            else
                            {
                                _emptyTables += "\n" + "     ° Gates table. File " + _currentProjectName + ".GATES";
                            }

                        }


                        //---------------------------------------
                        //Dam Breach .DAMBREACH
                        //---------------------------------------
                        //  if checked, save it     or          if exists here and has a new name or path, save it
                        if (chckDamBreach.Checked || (File.Exists(_currentProjectPathAndName + ".DAMBREACH") && newPathOrName))
                        {
                            if (dataDamBreach.RowCount >= 2)
                            {
                                //save gates in .DAMBREACH
                                try
                                {
                                    string filenameDamBreach = filenameDAT.Remove(filenameDAT.Length - 3) + "DAMBREACH";
                                    _dataManager.SaveDamBreachToFile(filenameDamBreach);
                                }
                                catch
                                {
                                    MessageBox.Show(Universal.Idioma("ERROR 1206171430: error trying to save .DAMBREACH file.", "ERROR 1206171430: error almacenando archivo .DAMBREACH."),
                                        "RiverFlow2D", MessageBoxButtons.OK,
                                      MessageBoxIcon.Error);
                                    warnings = true;
                                }
                            }
                            else
                            {
                                _emptyTables += "\n" + "     ° Gates table. File " + _currentProjectName + ".DAMBREACH";
                            }

                        }

                        //---------------------------------------
                        //Gates .BRIDGES
                        //---------------------------------------
                        //  if checked, save it     or          if exists here and has a new name or path, save it
                        if (chckBridges.Checked || (File.Exists(_currentProjectPathAndName + ".BRIDGES") && newPathOrName))
                        {
                            if (dataBridges.RowCount >= 2)
                            {
                                //save gates in .BRIDGES
                                try
                                {
                                    string filenameBridges = filenameDAT.Remove(filenameDAT.Length - 3) + "BRIDGES";
                                    _dataManager.SaveBridgesToFile(filenameBridges);
                                }
                                catch
                                {
                                    MessageBox.Show(Universal.Idioma("ERROR 2306141607: error trying to save .BRIDGES file.", "ERROR 2306141607: error almacenando archivo .BRIDGES."),
                                        "RiverFlow2D", MessageBoxButtons.OK,
                                        MessageBoxIcon.Error);
                                    warnings = true;
                                }
                            }
                            else
                            {
                                _emptyTables += "\n" + "     ° Bridges table. File " + _currentProjectName + ".BRIDGES";
                            }

                        }

                        //See checked components or output but file doesn't exist. Give warning.
                        string checkedAndDontExist = "";

                        if (chckGraphicOutput.Checked && (!File.Exists(_currentProjectPathAndName + ".PLT")))
                            checkedAndDontExist += "\n" + "     ° File " + _currentProjectName + ".PLT (Graphic Output Options)";

                        if (chckRainfallEvaporation.Checked && (!File.Exists(_currentProjectPathAndName + ".RET")))
                            checkedAndDontExist += "\n" + "     ° File " + _currentProjectName + ".RET (Rainfall/Evaporation)";

                        if (radioSedimentTransport.Checked && (RiverDipModel == "Model CPU" || RiverDipModel == "Model GPU"))
                            if ((!File.Exists(_currentProjectPathAndName + ".SEDS") && !File.Exists(_currentProjectPathAndName + ".SEDB")))
                                checkedAndDontExist += "\n" + "     ° File " + _currentProjectName + ".SEDS and .SEDB (Sediment Transport)";

                        if (radioSedimentTransport.Checked && RiverDipModel == "Model FE" &&
                            (!File.Exists(_currentProjectPathAndName + ".SED")))
                            checkedAndDontExist += "\n" + "     ° File " + _currentProjectName + ".SED (Sediment Transport)";

                        if (radioPollutantTransport.Checked && (!File.Exists(_currentProjectPathAndName + ".AD")))
                            checkedAndDontExist += "\n" + "     ° File " + _currentProjectName + ".AD (Pollutant Transport";


                        if (chckOutputResultsCrossSections.Checked && (!File.Exists(_currentProjectPathAndName + ".XSECS")))
                            checkedAndDontExist += "\n" + "     ° File " + _currentProjectName + ".XSECS (Cross Sections)";

                        if (chckResultsAtObservationPoints.Checked && (!File.Exists(_currentProjectPathAndName + ".OBS")))
                            checkedAndDontExist += "\n" + "     ° File " + _currentProjectName + ".OBS (Observation Points)";

                        if (chckPiers.Checked && (!File.Exists(_currentProjectPathAndName + ".PIERS")))
                            checkedAndDontExist += "\n" + "     ° File " + _currentProjectName + ".PIERS (Bridge Piers)";

                        if (chckCulverts.Checked && (!File.Exists(_currentProjectPathAndName + ".CULVERTS")))
                            checkedAndDontExist += "\n" + "     ° File " + _currentProjectName + ".CULVERTS (Culverts)";

                        if (chckSourcesAndSinks.Checked && (!File.Exists(_currentProjectPathAndName + ".SOURCES")))
                            checkedAndDontExist += "\n" + "     ° File " + _currentProjectName + ".SOURCES (Sources and Sinks)";

                        if (chckWeirs.Checked && (!File.Exists(_currentProjectPathAndName + ".WEIRS")))
                            checkedAndDontExist += "\n" + "     ° File " + _currentProjectName + ".WEIRS (Weirs)";

                        if (chckOutputResultsProfile.Checked && (!File.Exists(_currentProjectPathAndName + ".PROFILES")))
                            checkedAndDontExist += "\n" + "     ° File " + _currentProjectName + ".PROFILES (Output Results Profiles)";

                        if (checkedAndDontExist != "")
                            checkedAndDontExist =  
                                Universal.Idioma("The following components or output options files " +
                                                  "were selected in the 'Control Data' panel " +
                                                  "but they do not exist (in ",
                                                  "Los siguientes componentes u opciones de salida fueron seleccionados " +
                                                  "en el panel 'Datos de Control' pero no existen (en ") + 
                                                  _currentProjectPath + "):\n" + checkedAndDontExist;

                        #endregion For data that it is saved if checked


                        SaveRiverFLOW2DdataVAL(filenameDAT.Remove(filenameDAT.Length - 3) + "VAL");

                        //Write RiverFLO-2Dp.DAT in users temp directory.
                        //Writes project path in first line and <project>.DAT name in second line.
                        //This will be used to load project when RiverFLO-2D DIP starts.
                        string[] split = filenameDAT.Split(new Char[] { '\\' });
                        string DATname = split[split.Length - 1];
                        string str = filenameDAT.ToUpper();
                        int index = str.LastIndexOf(".DAT");

                        if (index >= 0)
                        {
                            //index = filenameDAT.LastIndexOf("\\");
                            //string path = filenameDAT.Remove(index);
                            //TextWriter sw = new StreamWriter(_riverFlow2Dp);
                            //sw.WriteLine(path);
                            //sw.WriteLine(DATname);
                            //sw.Close();
                        }
                        else
                            MessageBox.Show(Universal.Idioma("ERROR 0712111914: name of data file .DAT not found in ", "ERROR 0712111914: nombre de archivo .DAT no fue encontrado en ") +
                                filenameDAT + ".", "RiverFlow2D",
                                MessageBoxButtons.OK, MessageBoxIcon.Error);

                        //copy .TBA, .FED, .FEAD, and .DATP if name or path changed.
                        string thisFilename = filenameDAT.Remove(filenameDAT.Length - 4);
                        index = filenameDAT.LastIndexOf("\\");
                        string newPath = filenameDAT.Remove(index);

                        if (_currentProjectPath != "")
                            //see if path or filename have changed
                            if (newPathOrName)
                            {
                                string TBAfile = _currentProjectPathAndName + ".TBA";
                                if (File.Exists(TBAfile))
                                {
                                    //copy .TBA to new directory or with new name
                                    if (File.Exists(thisFilename + ".TBA")) File.Delete(thisFilename + ".TBA");
                                    File.Copy(TBAfile, thisFilename + ".TBA");
                                }

                                string FEDfile = _currentProjectPathAndName + ".FED";
                                if (File.Exists(FEDfile))
                                {
                                    //copy .FED to new directory or with new name
                                    if (File.Exists(thisFilename + ".FED")) File.Delete(thisFilename + ".FED");
                                    File.Copy(FEDfile, thisFilename + ".FED");
                                }

                                string FEADfile = _currentProjectPathAndName + ".FEAD";
                                if (File.Exists(FEADfile))
                                {
                                    //copy .FEAD to new directory or with new name
                                    if (File.Exists(thisFilename + ".FEAD")) File.Delete(thisFilename + ".FEAD");
                                    File.Copy(FEADfile, thisFilename + ".FEAD");
                                }

                                string DATPfile = _currentProjectPathAndName + ".DATP";
                                if (File.Exists(DATPfile))
                                {
                                    //copy .DATP to new directory or with new name
                                    if (File.Exists(thisFilename + ".DATP")) File.Delete(thisFilename + ".DATP");
                                    File.Copy(DATPfile, thisFilename + ".DATP");
                                }

                                if (!(newPath.Trim() == _currentProjectPath.Trim()))
                                {
                                    //if path is different, copy files described in the following tables:
                                    //Internal rating tables .IRT, sources .SOURCES, 
                                    //Open boundary conditions .IFL, Culverts .CULVERTS

                                    string[] fileNames;

                                    //copy .IFL file names
                                    if (File.Exists(_currentProjectPathAndName + ".IFL"))
                                    {
                                        fileNames = _dataManager.ReadIfLfileNames(_currentProjectPathAndName + ".IFL");
                                        fileNames = RemoveDuplicates(fileNames);
                                        foreach (string name in fileNames)
                                        {
                                            if (!File.Exists(newPath + "\\" + name))
                                                if (File.Exists(_currentProjectPath + "\\" + name))
                                                    //only copy file if exists in projectPath (old path) and not in thisPath (new path)
                                                    File.Copy(_currentProjectPath + "\\" + name, newPath + "\\" + name);
                                                else if (name.Trim().Length > 1)
                                                    _saveAllwarnings += "\n° " + _currentProjectName + ".IFL reference to file " + name.ToUpper() +
                                                                        " not found in " + _currentProjectPath;
                                            //else
                                            //            if (name.Trim().Length > 1)
                                            //            saveAllwarnings += "\n\n" + "° IFL reference to file " + name.ToUpper() + " already exists in " + newPath + ". It was not copied.";
                                        }
                                    }
                                    else //if .IFL doesn't exist find file names in .FED file (they are the same that those in .IFL)
                                    {
                                        fileNames = _dataManager.ReadFeDfileNames(_currentProjectPathAndName + ".FED");
                                        fileNames = RemoveDuplicates(fileNames);
                                        foreach (string name in fileNames)
                                        {
                                            if (!File.Exists(newPath + "\\" + name))
                                                if (File.Exists(_currentProjectPath + "\\" + name))
                                                    //only copy file if exists in projectPath (old path) and not in thisPath (new path)
                                                    File.Copy(_currentProjectPath + "\\" + name, newPath + "\\" + name);
                                                else if (name.Trim().Length > 1)
                                                    _saveAllwarnings += "\n° " + _currentProjectName + ".FED reference to file " + name.ToUpper() +
                                                                        " not found in " + _currentProjectPath;
                                            //else
                                            //            if (name.Trim().Length > 1)
                                            //            saveAllwarnings += "\n\n" + "° IFL reference to file " + name.ToUpper() + " already exists in " + newPath + ". It was not copied.";
                                        }

                                    }

                                    //copy .SOURCES file names
                                    if (File.Exists(_currentProjectPathAndName + ".SOURCES"))
                                    {
                                        fileNames = _dataManager.ReadSourceSfileNames(_currentProjectPathAndName + ".SOURCES");
                                        fileNames = RemoveDuplicates(fileNames);
                                        foreach (string name in fileNames)
                                        {
                                            if (!File.Exists(newPath + "\\" + name))
                                                if (File.Exists(_currentProjectPath + "\\" + name))
                                                    //only copy file if exists in projectPath (old path) and not in thisPath (new path)
                                                    File.Copy(_currentProjectPath + "\\" + name, newPath + "\\" + name);
                                                else
                                                    _saveAllwarnings += "\n° " + _currentProjectName + ".SOURCES reference to file " + name.ToUpper() +
                                                                        " not found in " + _currentProjectPath;
                                            //else
                                            //    saveAllwarnings += "\n\n" + "° Source reference to file " + name.ToUpper() + " already exists in " + newPath + ". It was not copied.";
                                        }
                                    }


                                    //copy .CULVERTS file names
                                    if (File.Exists(_currentProjectPathAndName + ".CULVERTS"))
                                    {
                                        fileNames = _dataManager.ReadCoulvertSfileNames(_currentProjectPathAndName + ".CULVERTS");
                                        fileNames = RemoveDuplicates(fileNames);
                                        foreach (string name in fileNames)
                                        {
                                            if (!File.Exists(newPath + "\\" + name))
                                                if (File.Exists(_currentProjectPath + "\\" + name))
                                                    //only copy file if exists in projectPath (old path) and not in thisPath (new path)
                                                    File.Copy(_currentProjectPath + "\\" + name, newPath + "\\" + name);
                                                else
                                                    _saveAllwarnings += "\n° " + _currentProjectName + ".CULVERTS reference to file " + name.ToUpper() +
                                                                        " not found in " + _currentProjectPath;
                                            //else
                                            //    saveAllwarnings += "\n\n" + "° Culvert reference to file " + name.ToUpper() + " already exists in " + newPath + ". It was not copied.";
                                        }
                                    }


                                    //copy .IRT (internal rating tables) file names
                                    if (File.Exists(_currentProjectPathAndName + ".IRT"))
                                    {
                                        fileNames = _dataManager.ReadIrTfileNames(_currentProjectPathAndName + ".IRT");
                                        fileNames = RemoveDuplicates(fileNames);
                                        foreach (string name in fileNames)
                                        {
                                            if (!File.Exists(newPath + "\\" + name))
                                                if (File.Exists(_currentProjectPath + "\\" + name))
                                                    //only copy file if exists in projectPath (old path) and not in thisPath (new path)
                                                    File.Copy(_currentProjectPath + "\\" + name, newPath + "\\" + name);
                                                else
                                                    _saveAllwarnings += "\n° " + _currentProjectName + ".IRT reference to file " + name.ToUpper() +
                                                                        " not found in " + _currentProjectPath;
                                            //else
                                            //    saveAllwarnings += "\n\n" + "° IRT reference to file " + name.ToUpper() + " already exists in " + newPath + ". It was not copied.";
                                        }
                                    }
                                }
                            }

                        _currentProjectPathAndName = thisFilename;
                        index = thisFilename.LastIndexOf("\\");
                        _currentProjectPath = thisFilename.Remove(index);
                        _currentProjectName = _currentProjectPathAndName.Remove(0, index + 1);

                        ReadNamesOfLastProjects("Include current .DAT");
                        WriteNamesOfLastprojects("Include current .DAT");

                        //Show tables that are empty (only if selected or the compulsory ones), and not found. 
                        if (_emptyTables != "")
                            _emptyTables = Universal.Idioma(
                                "Some components or output options are selected in the 'Control Data' panel, but their tables are empty. " +
                                "Their corresponding files were not created (in ",
                                "Algunos componentes u opciones de salida fueron seleccionados en el panel 'Datos de Control' " +
                                "pero sus tablas están vacías. " +
                                "Sus correspondientes archivos no se crearon (en ") + _currentProjectPath + "):\n" + _emptyTables;

                        if (_saveAllwarnings != "" || _emptyTables != "" || checkedAndDontExist != "")
                        {
                            _saveAllwarnings = Universal.Idioma("WARNING 1311120615!\n\n", "ADVERTENCIA 1311120615!\n\n") + _emptyTables + "\n" + _saveAllwarnings + checkedAndDontExist;
                            MessageBox.Show(_saveAllwarnings, "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Warning);

                            ////write warnings to WARNINGS.TXT
                            //TextWriter w = new StreamWriter(currentProjectPath + "\\WARNINGS.TXT");
                            //split = saveAllwarnings.Split(new Char[] { '\n' }, StringSplitOptions.RemoveEmptyEntries);
                            //for (int newCol = 0; newCol < split.Length; ++newCol)
                            //    w.WriteLine(split[newCol]);
                            //w.Close();
                        }

                        //Update Animation panel with dependencies
                        txtFileNameOutput.Text = _currentProjectName;
                        txtMidBedChange.Text = txtMinimumDepth.Text;

                        //Text = mainHeader + RiverDipModel + ") - " + _currentProjectPathAndName;
						Text = mainHeader + _currentProjectPathAndName;

						_dataManager.Changed = false;

                        if (_saveAllwarnings != "" || _emptyTables != "" || checkedAndDontExist != "")
                            warnings = true;

                        return true;

                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(Universal.Idioma("ERROR 0711199830: error while saving files. ", "ERROR 0711199830: error almacenando archivos. ") +
                            ex.Message, "Not saved", MessageBoxButtons.OK,
                            MessageBoxIcon.Error);
                    }
                }

                return false;

            }

            return false;
        }

        private void numericUpDownColorScheme_Validated(object sender, EventArgs e)
        {
            UpdateData(numericUpDownColorScheme);
            UpdateData(pictureBoxColorScheme);
        }


        private void btnViewGraph_Click(object sender, EventArgs e)
        {
            var listToPlot = (List<string[]>)_dataManager.Get((string)dataRainfallEvaporation.Tag);
            var data = new ArrayList();

            var timeRain = new ArrayList();
            var timeEvap = new ArrayList();

            int size = listToPlot.Count;
            for (int i = 0; i < size; ++i)
            {
                timeRain.Add(new PointF(float.Parse(listToPlot[i][0]), float.Parse(listToPlot[i][1])));
                timeEvap.Add(new PointF(float.Parse(listToPlot[i][0]), float.Parse(listToPlot[i][2])));
            }

            data.Add(timeRain);
            data.Add(timeEvap);

            var grapher = new Grapher(data);
            grapher.SetWindowAndPlotTitles(Universal.Idioma("Rainfall/Evaporation", "Lluvia/Evaporación"));
            grapher.SetAxisNameX(Universal.Idioma("Time (hrs)", "Tiempo (hrs)"));
            grapher.SetAxisNameY(dataRainfallEvaporation.Columns[1].HeaderText);
            grapher.SetYAxisChangeOnDataChange(true);
            var b = new ArrayList { dataRainfallEvaporation.Columns[1].HeaderText, dataRainfallEvaporation.Columns[2].HeaderText };
            grapher.SetDataNames(b);
            grapher.ShowDialog();

        }

        private void btnPlot_Click(object sender, EventArgs e)
        {
            var listToPlot = (List<string[]>)_dataManager.Get((string)dataTimeQ.Tag);
            var data = new ArrayList();

            var arrayTimeQ = new ArrayList();

            int size = listToPlot.Count;
            for (int i = 0; i < size; ++i)
            {
                arrayTimeQ.Add(new PointF(float.Parse(listToPlot[i][0]), float.Parse(listToPlot[i][1])));
            }

            data.Add(arrayTimeQ);


            var grapher = new Grapher(data);
            grapher.SetWindowAndPlotTitles(Universal.Idioma("Time/Q", "Tiempo/Q"));
            grapher.SetAxisNameX(dataTimeQ.Columns[0].HeaderText);
            grapher.SetAxisNameY(dataTimeQ.Columns[1].HeaderText);
            grapher.SetYAxisChangeOnDataChange(true);
            var b = new ArrayList { Universal.Idioma("Time/Q", "Tiempo/Q") };

            grapher.SetDataNames(b);

            grapher.ShowDialog();
        }

        private void btnPlotOutflow_Click(object sender, EventArgs e)
        {

            var listToPlot = (List<string[]>)_dataManager.Get((string)dataOutflow.Tag);
            var data = new ArrayList();

            var arrayWSETime = new ArrayList();

            int size = listToPlot.Count;
            for (int i = 0; i < size; ++i)
            {
                arrayWSETime.Add(new PointF(float.Parse(listToPlot[i][0]), float.Parse(listToPlot[i][1])));
            }

            data.Add(arrayWSETime);

            var grapher = new Grapher(data);

            if (radioDischargeTimeOutflow.Checked)
                grapher.SetWindowAndPlotTitles("Q/Time");
            if (radioWSETime.Checked)
                grapher.SetWindowAndPlotTitles("WSEL/Time");
            else
                grapher.SetWindowAndPlotTitles("Q/WSEL");

            grapher.SetAxisNameX(dataOutflow.Columns[0].HeaderText);
            grapher.SetAxisNameY(dataOutflow.Columns[1].HeaderText);
            grapher.SetYAxisChangeOnDataChange(true);
            var b = new ArrayList();

            if (radioDischargeTimeOutflow.Checked)
                b.Add("Q/Time");
            if (radioWSETime.Checked)
                b.Add("WSEL/Time");
            else
                b.Add("Q/WSEL");

            grapher.SetDataNames(b);

            grapher.ShowDialog();

        }

        private void chckGraphicOutput_CheckedChanged(object sender, EventArgs e)
        {

            int size = tabGraphicOutputOptions.Controls.Count;

            for (int i = 0; i < size; ++i)
            {
                tabGraphicOutputOptions.Controls[i].Enabled = chckGraphicOutput.Checked;
                RemoveError(tabGraphicOutputOptions.Controls[i]);

                if (tabGraphicOutputOptions.Controls[i] is Panel)
                {
                    int sizePanel = tabGraphicOutputOptions.Controls[i].Controls.Count;

                    for (int j = 0; j < sizePanel; ++j)
                    {
                        tabGraphicOutputOptions.Controls[i].Controls[j].Enabled = chckGraphicOutput.Checked;
                        RemoveError(tabGraphicOutputOptions.Controls[i].Controls[j]);
                    }
                }
            }
        }

        private void btnOpenControlData_Click(object sender, EventArgs e)
        {
            var openFileDialog = new OpenFileDialog
            {
                Filter = "DAT files (*.DAT)|*.DAT",
                InitialDirectory = _currentProjectPath,
                FileName = _currentProjectName + ".DAT",
                FilterIndex = 1,
                RestoreDirectory = true,
                CheckFileExists = true
            };

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                try
                {
                    RemoveError(txtSimulationTime);
                    RemoveError(txtOutputInterval);


                    loading = true;
                    _dataManager.LoadControlDataFromFile(openFileDialog.FileName);
                    UpdateWithDatFile();
                    loading = false;

                    //Update form header.
                    string project = openFileDialog.FileName.Remove(openFileDialog.FileName.Length - 4);
                    //Text = mainHeader + RiverDipModel + ") - " + _currentProjectPathAndName;
					Text = mainHeader + _currentProjectPathAndName;

					//Make visible/invisible 4th. column of Open Boundary Conditions panel.
					if (radioPollutantTransport.Checked)
                    {
                        var dataGridViewColumn = dataOpenBoundaryConditions.Columns["FILE_OBC_ADV_DIS"];
                        if (dataGridViewColumn != null)
                            dataGridViewColumn.Visible = true;
                    }
                    else
                    {
                        var gridViewColumn = dataOpenBoundaryConditions.Columns["FILE_OBC_ADV_DIS"];
                        if (gridViewColumn != null)
                            gridViewColumn.Visible = false;
                    }
                }
                catch
                {
                    MessageBox.Show(Universal.Idioma("ERROR 2810111728: error trying to open .DAT file.", "ERROR 2810111728: error abriendo archivo .DAT."),
                        "RiverFlow2D", MessageBoxButtons.OK,
                        MessageBoxIcon.Error);
                }

            }
        }

        private void btnOpenSediment_Click(object sender, EventArgs e)
        {
            var openFileDialog = new OpenFileDialog
            {
                Filter = "SED files (*.SED)|*.SED",
                InitialDirectory = _currentProjectPath,
                FileName = _currentProjectName + ".SED",
                FilterIndex = 1,
                RestoreDirectory = true,
                CheckFileExists = true
            };

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                try
                {
                    _dataManager.LoadSedimentFromFile(openFileDialog.FileName);
                    UpdateWithSedFile();
                }
                catch
                {
                    MessageBox.Show(Universal.Idioma("ERROR 2810111729: error trying to open .SED file.", "ERROR 2810111729: error abriendo archivo .SED."),
                        "RiverFlow2D", MessageBoxButtons.OK,
                        MessageBoxIcon.Error);
                }

            }
        }

        private void btnOpenGraphicOption_Click(object sender, EventArgs e)
        {
            var openFileDialog = new OpenFileDialog
            {
                Filter = "PLT files (*.PLT)|*.PLT",
                InitialDirectory = _currentProjectPath,
                FileName = _currentProjectName + ".PLT",
                FilterIndex = 1,
                RestoreDirectory = true,
                CheckFileExists = true
            };

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                try
                {
                    _dataManager.LoadGraphicOptionsFromFile(openFileDialog.FileName);
                    UpdateWithPLTFile();
                }
                catch
                {
                    //MessageBox.Show(Universal.Idioma("ERROR 2810191708: error trying to open file.", "RiverFlow2D", MessageBoxButtons.OK,
                    //                MessageBoxIcon.Error);
                }
            }
        }

        private void btnSaveGraphicOption_Click(object sender, EventArgs e)
        {
            var saveFileDialog = new SaveFileDialog
            {
                Filter = "PLT files (*.PLT)|*.PLT",
                InitialDirectory = _currentProjectPath,
                FileName = _currentProjectName + ".PLT",
                FilterIndex = 1,
                RestoreDirectory = true
            };

            try
            {
                if (saveFileDialog.ShowDialog() == DialogResult.OK)
                {
                    ValFile.SaveRiverFLO2DdataVal = true;
                    _dataManager.SaveGraphicOptionsToFile(saveFileDialog.FileName);
                    string fileNameVal = saveFileDialog.FileName.Remove(saveFileDialog.FileName.Length - 3) + "VAL";
                    SaveRiverFLOW2DdataVAL(fileNameVal);
                    ValFile.SaveRiverFLO2DdataVal = false;
                }
            }
            catch
            {
                MessageBox.Show(Universal.Idioma("ERROR 2810111735: error trying to save .PLT file.", "ERROR 2810111735: error abriendo archivi .PLT."),
                    "RiverFlow2D", MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
            }
        }

        private void btnSaveSediment_Click(object sender, EventArgs e)
        {
            var saveFileDialog = new SaveFileDialog
            {
                Filter = "SED files (*.SED)|*.SED",
                InitialDirectory = _currentProjectPath,
                FileName = _currentProjectName + ".SED",
                FilterIndex = 1,
                RestoreDirectory = true
            };

            try
            {
                if (saveFileDialog.ShowDialog() == DialogResult.OK)
                {
                    ValFile.SaveRiverFLO2DdataVal = true;
                    _dataManager.SaveSedimentToFile(saveFileDialog.FileName);
                    string fileNameVal = saveFileDialog.FileName.Remove(saveFileDialog.FileName.Length - 3) + "VAL";
                    SaveRiverFLOW2DdataVAL(fileNameVal);
                    ValFile.SaveRiverFLO2DdataVal = false;
                }
            }
            catch
            {
                MessageBox.Show(Universal.Idioma("ERROR 2810111736: error trying to save .SED file.", "ERROR 2810111736: error abriendo archivo .SED."),
                    "RiverFlow2D", MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
            }
        }

        private void btnSaveControlData_Click(object sender, EventArgs e)
        {
            var saveFileDialog = new SaveFileDialog
            {
                Filter = "DAT files (*.DAT)|*.DAT",
                InitialDirectory = _currentProjectPath,
                FileName = _currentProjectName + ".DAT",
                FilterIndex = 1,
                RestoreDirectory = true
            };

            try
            {
                if (saveFileDialog.ShowDialog() == DialogResult.OK)
                {
                    string fileName = saveFileDialog.FileName;
                    fileName = fileName.Remove(fileName.Length - 4).Remove(0, fileName.LastIndexOf("\\") + 1);
                    if (fileName == "")
                    {
                        MessageBox.Show(Universal.Idioma("File name can't be empty.", "El nombre de archivo no puede estar vacío."), 
                            "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    }
                    else
                    {
                        ValFile.SaveRiverFLO2DdataVal = true;
                        //_dataManager.Set("Version", "201804");
                        _dataManager.SaveControlDataToFile(saveFileDialog.FileName);
                        string fileNameVal = saveFileDialog.FileName.Remove(saveFileDialog.FileName.Length - 3) + "VAL";
                        SaveRiverFLOW2DdataVAL(fileNameVal);
                        ValFile.SaveRiverFLO2DdataVal = false;
                    }
                }

            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 2810111761: error trying to save .DAT file. ", "ERROR 2810111761: error almacenando archivo .DAT. ") +
                    ex.Message, "RiverFlow2D",
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void txtMinimumDepth_Validated(object sender, EventArgs e)
        {
            if (txtMinimumDepth.Text != "")
            {
                UpdateData(txtMinimumDepth);
                txtMidBedChange.Text = txtMinimumDepth.Text;
                UpdateData(txtMidBedChange);
            }
        }

        private void txtMinimumDepth_Validating(object sender, CancelEventArgs e)
        {
            if (txtMinimumDepth.Text == "")
                AddError(txtMinimumDepth, Universal.Idioma("Minimum Depth for Dry Bed cannot be empty.", "La profundidad mínima para velocidad nula no puede estar vacía."), "Control Data panel");
            else RemoveError(txtMinimumDepth);
        }

        private void chckHotStart_Validated(object sender, EventArgs e)
        {
            UpdateData(chckHotStart);
        }

        private void radioWSETimeInflow_CheckedChanged(object sender, EventArgs e)
        {
            bool unit = radioEnglish.Checked;
            if (radioDischargeTimeInflow.Checked)
                dataTimeQ.Columns[1].HeaderText = "Q (" + (unit ? "ft3/s" : "m3/s") + ")";
            else
                dataTimeQ.Columns[1].HeaderText = "WSEL (" + (unit ? "ft" : "m") + ")";
        }

        private void radioDischargeTimeOutflow_CheckedChanged(object sender, EventArgs e)
        {

            bool unit = radioEnglish.Checked;
            if (radioDischargeTimeOutflow.Checked)
            {
                dataOutflow.Columns[0].HeaderText = Universal.Idioma("Time (hrs)", "Tiempo (hrs)"); ;
                dataOutflow.Columns[1].HeaderText = "Q (" + (unit ? "ft3/s" : "m3/s") + ")";
            }
            else if (radioDischargeCurve.Checked)
            {
                dataOutflow.Columns[0].HeaderText = "Q (" + (unit ? "ft3/s" : "m3/s") + ")";
                dataOutflow.Columns[1].HeaderText = "WSEL (" + (unit ? "ft" : "m") + ")";
            }
            else // radioWSETime
            {
                dataOutflow.Columns[0].HeaderText = Universal.Idioma("Time (hrs)", "Tiempo (hrs)"); ;
                dataOutflow.Columns[1].HeaderText = "WSEL (" + (unit ? "ft" : "m") + ")";
            }
        }

        private void RiverFLO2D_FormClosing(object sender, FormClosingEventArgs e)
        {
            bool warnings = false;
            bool cancelAndReturn = false;
            DialogResult dlgResult = MessageBox.Show(
                Universal.Idioma("Would you like to save changes before exiting?", "¿Desea guardar los cambios antes de cerrar el programa?"),
                "RiverFlow2D",
                MessageBoxButtons.YesNoCancel);
            if (dlgResult == DialogResult.Yes)
            {
                if (ValidAllDipData())
                {
                    if (!SaveAllFiles("Do not validate", ref warnings))
                        cancelAndReturn = true;
                }
                else
                    cancelAndReturn = true;
            }
            else if (dlgResult == DialogResult.Cancel)
                cancelAndReturn = true;

            if (cancelAndReturn)
            {
                _closeAndOpen = false;
                e.Cancel = true;
                return;
            }

            if (_closeAndOpen)
            {

                // Delete current DIP, rename English or Spanish to new current DIP:
                try
                {
                    string newDIP;
                    if (Universal.DIPLanguage == "English")
                    {
                        newDIP = _startupPath + "\\RiverFlow2DDIP Spanish.exe";
                    }

                    else
                    {
                        newDIP = _startupPath + "\\RiverFlow2DDIP English.exe";
                    }

                    if (System.IO.File.Exists(newDIP))
                    {
                        if (System.IO.File.Exists(_startupPath + "\\RiverFlow2DDIP.exe copy"))
                            System.IO.File.Delete(_startupPath + "\\RiverFlow2DDIP.exe copy");

                        System.IO.File.Move(_startupPath + "\\RiverFlow2DDIP.exe", _startupPath + "\\RiverFlow2DDIP.exe copy");

                        System.IO.FileInfo FileInfoNew = new System.IO.FileInfo(newDIP);
                        FileInfoNew.CopyTo(_startupPath + "\\RiverFlow2DDIP.exe", true);

                    }
                    else
                    {
                        MessageBox.Show(Universal.Idioma("ERROR 0604181716: DIP selected language version not found.", "ERROR 2101121045: no se encontró la versión del lenguaje seleccionado del DIP."), "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        _closeAndOpen = false;
                        e.Cancel = true;
                        return;
                    }

                }
                catch (Exception ex)
                {
                    MessageBox.Show(Universal.Idioma("ERROR 0604180508: error restarting DIP. ", "ERROR 2101121045: error reempezando DIP. ") + "\n\n" + ex.Message +
						"\n\n" + Universal.Idioma("You need Administration credentials to change the DIP language.","Se necesitan credenciales de Administración para cambiar el lenguaje del DIP."), "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    _closeAndOpen = false;
                    e.Cancel = true;
                    return;
                }

                // Run DIP again:
                var proc = new Process();
                if (File.Exists(_startupPath + "\\RiverFlow2DDIP.exe"))
                {
                    try
                    {
                        proc.StartInfo.FileName = _startupPath + "\\RiverFlow2DDIP.exe";
                        proc.StartInfo.UseShellExecute = true;
                        proc.StartInfo.RedirectStandardOutput = false;
                        proc.Start();
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(Universal.Idioma("ERROR 0504181922: error restarting DIP. ", "ERROR 2101121045: error reempezando DIP. ") + "\n\n" + ex.Message, "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        _closeAndOpen = false;
                        e.Cancel = true;
                        return;

                    }
                }
            }


        }

        private void SetNOGRAPH()
        {
            //Graphic Output & Text File Output
            var NOGRAPH = (int)_dataManager.Get("NOGRAPH");
            if (chckGraphicOutput.Checked)
            {
                if (chckTextFileOutput.Checked)
                {
                    _dataManager.Set("NOGRAPH", 1);
                }
                else
                {
                    _dataManager.Set("NOGRAPH", 2);
                }
            }
            else
            {
                if (chckTextFileOutput.Checked)
                {
                    _dataManager.Set("NOGRAPH", 0);
                }
                else
                {
                    _dataManager.Set("NOGRAPH", 3);
                }
            }
        }

        private void SetIMANNINGDEPTH()
        {
            if (chckManningWithDepth.Checked)
                _dataManager.Set("rslipbc", 2);
            else
                _dataManager.Set("rslipbc", 1);
        }

        private void RemoveConcentrationsFromPlot()
        {
            while (comboGraphCode.Items.Count > 10)
            {
                comboGraphCode.Items.RemoveAt(comboGraphCode.Items.Count - 1);
            }

        }

        private void chckTextFileOutput_Validated(object sender, EventArgs e)
        {
            //SetNOGRAPH();

            //UpdateData(chckTextFileOutput);
        }

        private void chckCreateGraphicOutputFiles_Validated(object sender, EventArgs e)
        {
            UpdateData(chckCreateGraphicOutputFiles);
        }



        private void txtD90_Validated(object sender, EventArgs e)
        {
            if (txtD90.Text != "") UpdateData(txtD90);
        }

        private void txtD90_Validating(object sender, CancelEventArgs e)
        {
            if (txtD90.Text == "")
            {
                AddError(txtD90, Universal.Idioma("D90 cannot be empty.", "D90 no puede estar vacío"), "Sediment Transport panel");
                return;
            }
            double x = Double.Parse(txtD90.Text);
            if (x < 0.000001 || x > 50)
            {
                AddError(txtD90, Universal.Idioma("D90 must be in the range [0.000001, 50]", "D90 debe estar en el intervalo [0.000001, 50]"), "Sediment Transport panel");
                return;
            }
            if (comboTransportFormula.SelectedIndex == 6)
            {
                //D90 must be greater than D50
                double d50 = Double.Parse(txtD50.Text);
                if (x < d50)
                {
                    //If D90 is less than D50 there is an error with both of them
                    AddError(txtD90, Universal.Idioma("D90 must be greater than D50.", "D90 debe ser mayor que D50."), "Sediment Transport panel");
                    AddError(txtD50, Universal.Idioma("D50 must be less than D90.", "D50 debe ser menor que D90."), "Sediment Transport panel");
                    return;
                }

                RemoveError(txtD50);

            }
            RemoveError(txtD90);
        }

        private void comboTransportFormmula_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (comboTransportFormula.SelectedIndex == 6) //Van Rijn
                txtD90.Enabled = true;
            else
            {
                txtD90.Enabled = false;
                RemoveError(txtD50);
                RemoveError(txtD90);
            }

            if (comboTransportFormula.SelectedIndex == 8) //rating curve
            {
                txtA.Enabled = true;
                txtB.Enabled = true;
            }
            else
            {
                txtA.Enabled = false;
                txtB.Enabled = false;
                RemoveError(txtA);
                RemoveError(txtB);

            }

        }



        private void btnHelp_Click(object sender, EventArgs e)
        {
            Help.OpenHelp();
        }

        private void RiverFLO2D_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F1)
                Help.OpenHelp();
        }

        private void panel1_MouseClick(object sender, MouseEventArgs e)
        {

        }


        private void checkBox9_Validated(object sender, EventArgs e)
        {
            UpdateData(chckMaximumValues);
        }

        private void textBox3_Validated(object sender, EventArgs e)
        {
            UpdateData(rslipbcfactor);
        }


        private void groupBoxRunOptions_Enter(object sender, EventArgs e)
        {

        }

        private void txtMinimumDepth_TextChanged(object sender, EventArgs e)
        {

        }

        private void label1_Validated(object sender, EventArgs e)
        {

        }


        private void iextremes_Validated(object sender, EventArgs e)
        {
            UpdateData(chckMaximumValues);
        }


        private void internalratingcurves_Validated(object sender, EventArgs e)
        {
            UpdateData(chckInternalRatingTables);
        }

        private void isources_Validated(object sender, EventArgs e)
        {
            UpdateData(chckSourcesAndSinks);
        }


        private void iwetdrya_CheckedChanged(object sender, EventArgs e)
        {
            //UpdateData(iwetdrya); //iwetdry = 1;
        }

        private void iwetdryb_CheckedChanged(object sender, EventArgs e)
        {
            //UpdateData(iwetdryb); //iwetdry = 2;
        }

        private void rslipbc1_CheckedChanged(object sender, EventArgs e)
        {
            rslipbcfactor.Enabled = false;
        }

        private void rslipbc0_CheckedChanged(object sender, EventArgs e)
        {
            //rbslipfactor = 0;
            rslipbcfactor.Enabled = false;
        }

        private void rslipbc2_CheckedChanged(object sender, EventArgs e)
        {
            //rbslipfactor = rslipbcfactor.Text;
            rslipbcfactor.Enabled = true;
        }

        private void iwetdrya_Validated(object sender, EventArgs e)
        {
            _dataManager.Set((string)iwetdrya.Tag, Convert.ToInt32(iwetdrya.Checked));
        }

        private void iwetdryb_Validated(object sender, EventArgs e)
        {
            _dataManager.Set((string)iwetdryb.Tag, Convert.ToInt32(iwetdryb.Checked) + 1);
        }

        private void iwetdryc_Validated(object sender, EventArgs e)
        {
            _dataManager.Set((string)iwetdryc.Tag, Convert.ToInt32(iwetdryc.Checked) + 2);
        }


        private void rslipbc1_Validated(object sender, EventArgs e)
        {
            _dataManager.Set((string)rslipbc1.Tag, Convert.ToInt32(!rslipbc1.Checked) + 1);
        }

        private void rslipbc0_Validated(object sender, EventArgs e)
        {
            _dataManager.Set((string)rslipbc0.Tag, Convert.ToInt32(!rslipbc0.Checked));
        }

        private void rslipbc2_Validated(object sender, EventArgs e)
        {
            _dataManager.Set((string)rslipbc2.Tag, Convert.ToDouble(rslipbcfactor.Text));
        }

        private void rslipbcfactor_Validated(object sender, EventArgs e)
        {
            UpdateData(rslipbcfactor);
        }

        private void rslipbcfactor_Validating(object sender, CancelEventArgs e)
        {
            if (rslipbc2.Checked)
            {
                if (rslipbcfactor.Text.Trim() == "")
                {
                    AddError(rslipbcfactor, Universal.Idioma("Enter a number between 0 and 1", ""), "Control Data panel");
                    return;
                }

                double rslipbcd = Convert.ToDouble(rslipbcfactor.Text);

                if (rslipbcd < 0 || rslipbcd > 1)
                {
                    AddError(rslipbcfactor, Universal.Idioma("Slip factor must be between 0 and 1", ""), "Control Data panel");
                    return;

                }
                RemoveError(rslipbcfactor);

            }
        }

        private void RiverFLO2D_Load(object sender, EventArgs e)
        {
            try
            {
                loading = true;

                if (_DATPathAndFile == null)
                {
                    var splash = new SplashScreenForm(); // {BackgroundImage = splashImage};
                    splash.Show();
                    splash.Refresh();
                    Thread.Sleep(2000); // sleep main thread for 2 seconds
                    splash.Close(); // close splash screen
                }

                this.Size = new Size(1125, 591);
                this.CenterToScreen();
                this.FormBorderStyle = FormBorderStyle.Sizable;
                this.AutoScroll = true;

                try
                { //Get number of graphic cards and cores.

                    try
                    {
                        foreach (var item in new ManagementObjectSearcher(@"SELECT * FROM Win32_ComputerSystem").Get())
                        {
                            _numberOfPhysicalProcessors += int.Parse(item["NumberOfProcessors"].ToString());
                        }
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(Universal.Idioma("ERROR 2203181500: error getting physical processors.", "ERROR 2203181500: error buscando procesadores físicos.") +
                            Environment.NewLine + ex.Message, "RiverFlow2D",
                            MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }

                    try
                    {
                        foreach (var item in new ManagementObjectSearcher(@"SELECT * FROM Win32_Processor").Get())
                        {
                            _numberOfCores += int.Parse(item["NumberOfCores"].ToString());
                        }
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(Universal.Idioma("ERROR 2203181501: error getting number of cores.", "ERROR 2203181501: error buscando número de núcleos.") +
                            Environment.NewLine + ex.Message, "RiverFlow2D",
                            MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    try
                    {

                        foreach (var item in new ManagementObjectSearcher(@"SELECT * FROM Win32_ComputerSystem").Get())
                        {
                            _numberOfLogicalProcessors += int.Parse(item["NumberOfLogicalProcessors"].ToString());
                        }

                        _numberOfLogicalProcessors2 = Environment.ProcessorCount;
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(Universal.Idioma("ERROR 2203181503: error getting number of logical processors.", "ERROR 2203181503: error buscando número de procesadores lógicos.") +
                            Environment.NewLine + ex.Message, "RiverFlow2D",
                            MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }

                    try
                    {
                        _graphicCardNames = new ManagementObjectSearcher(@"SELECT * FROM Win32_DisplayConfiguration");

                        foreach (ManagementObject mo in _graphicCardNames.Get())
                        {
                            foreach (PropertyData property in mo.Properties)
                            {
                                if (property.Name == "Description")
                                {
                                    graphicCards = graphicCards + property.Value.ToString() + "\n";
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(Universal.Idioma("ERROR 2203181504: error getting graphic cards names.", "ERROR 2203181504: error buscando nombres de tarjetas gráficas.") +
                            Environment.NewLine + ex.Message, "RiverFlow2D",
                            MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }


                    try
                    {

                        ManagementObjectSearcher video = new ManagementObjectSearcher("SELECT * FROM Win32_VideoController");
                        foreach (ManagementObject obj in video.Get())
                        {
                            graphicCards_B = graphicCards_B + obj["Name"] + "\n";
                        }


                        video = new ManagementObjectSearcher(@"SELECT * FROM Win32_DesktopMonitor");
                        foreach (ManagementObject obj in video.Get())
                        {
                            graphicCards_C = graphicCards_C + obj["Name"] + "\n";
                        }

                        video = new ManagementObjectSearcher(@"SELECT * FROM Win32_DisplayControllerConfiguration");
                        foreach (ManagementObject obj in video.Get())
                        {
                            graphicCards_E = graphicCards_E + obj["Name"] + "\n";
                        }

                        //This is the best option for the selection of graphic cards:
                        _graphicCardNames = new ManagementObjectSearcher(@"SELECT * FROM Win32_VideoController");
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(Universal.Idioma("ERROR 2203181505: error getting video controlers.", "ERROR 2203181505: error buscando controladores de video.") +
                            Environment.NewLine + ex.Message, "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }

                }
                catch (Exception ex)
                {
                    MessageBox.Show(Universal.Idioma("ERROR 0804141008: error getting graphic cards.", "ERROR 0804141008: error buscando tarjetas gráficas.") +
                        Environment.NewLine + ex.Message, "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }

                // Path to this application.
                _startupPath = Application.StartupPath;

                InitializePreLoadControls();

                if (_DIPPath == null)
                {
                    //DIP not called from SMS. See last proyects and continue.

                    _riverFlow2Dp = (Path.GetTempPath() + "RiverFlow2Dp.DAT").Trim();

                    if (File.Exists(_riverFlow2Dp))
                    {
                        //See if RiverFlow2Dp.DAT is newer than RecentProjects.TXT
                        //DateTime date1 = DateTime.Parse(Convert.ToString(File.GetLastWriteTime(_riverFlow2Dp)));
                        //DateTime date2 =
                        //	DateTime.Parse(Convert.ToString(File.GetLastWriteTime(Path.GetTempPath() + "RecentProjects.TXT")));
                        //if (date1 < date2)
                        //	_riverFlow2Dp = "";
                    }
                    else
                        _riverFlow2Dp = "";

                    ReadNamesOfLastProjects("Do not include current .DAT");

                    if (_riverFlow2Dp != "") WriteNamesOfLastprojects("Do not include current .DAT");

                    //Get path and file name of last project. If exists and valid open all its files.
                    if (File.Exists(_riverFlow2Dp))
                    {
                        string fileName = "";
                        StreamReader s = File.OpenText(_riverFlow2Dp);
                        try
                        {

                            if (s.EndOfStream)
                                MessageBox.Show(Universal.Idioma("ERROR 0712111633: file " + _riverFlow2Dp + " is empty.", "ERROR 0712111633: file " + _riverFlow2Dp + " está vacío."),
                                    "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            else
                            {
                                string path = s.ReadLine();
                                if (string.IsNullOrEmpty(path))
                                    MessageBox.Show(Universal.Idioma("ERROR 0712110748: contents of file is empty: ", "ERROR 0712110748: archivo está vacío: ") + _riverFlow2Dp, "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                else
                                {
                                    fileName = s.ReadLine();
                                    s.Close();
                                    string str = fileName.ToUpper();
                                    if (str.IndexOf(".DAT") >= 0)
                                    {
                                        //Open all files.
                                        //MessageBox.Show(Universal.Idioma("(Borrar) " + path + "\\" + fileName);
                                        OpenAllRequiredFiles(path + "\\" + fileName);
                                    }
                                    else
                                        MessageBox.Show(Universal.Idioma("ERROR 0712111652: data file *.DAT not defined in RiverFlow2Dp.DAT.", "ERROR 0712111652: archivo *.DAT no definido en RiverFlow2Dp.DAT."),
                                            "RiverFlow2D",  MessageBoxButtons.OK, MessageBoxIcon.Error);
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show(Universal.Idioma("ERROR 0712110736: could not open file ", "ERROR 0712110736: no se pudo abrir archivo ") +
                                fileName + ". " + ex.Message, "RiverFlow2D",
                                MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                        finally
                        {
                            s.Close();
                        }
                    }

                }

                ContinueLoadings();

                if (_DATPathAndFile != null)
                {
                    //Called from SMS or QGIS.
                    if (File.Exists(_DATPathAndFile))
                    {
                        Universal.OpenProjectExit = _DATPathAndFile;
                        OpenExistingProject(Universal.OpenProjectExit);
                    }
                    else
                    {
                        Universal.OpenProjectExit = "Model CPU";
                        Universal.ProjectPathAndName = _DATPathAndFile;
                        OpenAnotherProject("");
                    }
                }
                else if (Universal.OpenProjectExit != "")
                    OpenAnotherProject(Universal.OpenProjectExit);
                else if (_riverFlow2Dp == "")
                    if (Universal.RecentProjects[0] != "" && Universal.RecentProjects[0] != null)
                        OpenExistingProject(Universal.RecentProjects[0]);
                    else
                    {
                        OpenAnotherProject("From Loading");
                    }

                loading = true;
                // Set language according to Universal.DIPLanguage.
                if (Universal.DIPLanguage == "Spanish")
                    comboLanguage.SelectedIndex = 0;
                else
                    comboLanguage.SelectedIndex = 1;

                loading = false;

				// Check for updates:
				try
				{
					StreamReader s = File.OpenText("current_version.txt");
					string localVersion = s.ReadLine();
					string show = s.ReadLine();
					s.Close();
					if (show != null)
						if (show.Trim() == "1")
						{
							var wu = new WebUpdate();
							wu.RequestUpdate("loading");
						}
						else
						{
							// Do not show updates.
						}
					else
					{
						var wu = new WebUpdate();
						wu.RequestUpdate("loading");
					}
				}
				catch (Exception ex)
				{
					MessageBox.Show(Universal.Idioma("ERROR 210718_0920: error looking for update of RiverFlow2D.", 
						                             "ERROR 160718_1626: error buscando actualización de RiverFlow2D.") +
					Environment.NewLine + ex.Message, "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
				}

			}
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 0804141000: error loading RIVER-FLO-2D.", "ERROR 0804141000: error cargando RIVER-FLO-2D.") +
                    Environment.NewLine + ex.Message, "RiverFlow2D",
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

        }

        private void SetFEModelGUI()
        {

            try
            {
                chckVariableTimeStep.Visible = true;
                lblTimeStepFactor.Visible = true;
                txtTimeStepFactor.Visible = true;

                //lblSelectiveLumpingParameter.Visible = true;
                //txtSelectiveLumpingParameter.Visible = true;
                iwetdrya.Visible = true;
                iwetdryb.Visible = true;
                iwetdryc.Visible = true;
                chckManningWithDepth.Visible = false;

                groupBoxParallelComputation.Visible = false;
                groupBoxParallelComputation.SendToBack();
                groupBoxClosedBoundaryConditions.Visible = true;
                groupBoxClosedBoundaryConditions.BringToFront();
                lblTimeStep.Text = "Time step (sec.):";
                lblMinimumDepthDryBed.Text = "Minimum depth for dry bed:";

                radioPollutantTransport.Enabled = true;
                radioSedimentTransport.Enabled = true;
                chckWind.Enabled = true;
                radioMudDebris.Enabled = false;
                radioOilSpillOnLand.Enabled = false;
                chckBridges.Enabled = false;
                chckGates.Enabled = false;
                chckDamBreach.Enabled = false;
                chckRainfallEvaporation.Enabled = false;

                chckRainfallEvaporation.Checked = false;

                foreach (TreeNode node in treeViewOptions.Nodes)
                {
                    foreach (TreeNode child in node.Nodes)
                    {
                        if (child.Text == "Mud/Debris Flow")
                            child.ForeColor = Color.Gray;

                        if (child.Text == "Wind")
                            child.ForeColor = Color.Black;

                        if (child.Text == "Gates")
                            child.ForeColor = Color.Gray;

                        if (child.Text == "Bridges")
                            child.ForeColor = Color.Gray;

                        if (child.Text == "Oil Spill on Land")
                            child.ForeColor = Color.Gray;

                        if (child.Text == "Dam Breach")
                            child.ForeColor = Color.Gray;
                    }
                }

                if (txtMinimumDepth.Text == "")
                    if (radioMetric.Checked)
                        txtMinimumDepth.Text = "0.1";
                    else
                        txtMinimumDepth.Text = "0.3";
                else if (Convert.ToSingle(txtMinimumDepth.Text) < 0.0)
                    if (radioMetric.Checked)
                        txtMinimumDepth.Text = "0.1";
                    else
                        txtMinimumDepth.Text = "0.3";

                groupBoxParallelComputation.Visible = false;
            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 1312171502: error trying to change RiverFlow2D model.\n", "ERROR 1312171502: error cargando modelo RiverFlow2D.\n") +
                    ex.Message,
                    "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

        }

        private void SetPLUSModelGUI()
        {

            try
            {
                chckVariableTimeStep.Visible = false;
                lblTimeStepFactor.Visible = false;
                txtTimeStepFactor.Visible = false;

                //lblSelectiveLumpingParameter.Visible = false;
                //txtSelectiveLumpingParameter.Visible = false;
                iwetdrya.Visible = false;
                iwetdryb.Visible = false;
                iwetdryc.Visible = false;
                chckManningWithDepth.Visible = true;

                groupBoxClosedBoundaryConditions.Visible = false;
                groupBoxClosedBoundaryConditions.SendToBack();
                groupBoxParallelComputation.Visible = true;
                groupBoxParallelComputation.BringToFront();
                lblTimeStep.Text = Universal.Idioma("Courant number (CFL):", "Número de Courant (CFL);");
                //lblMinimumDepthDryBed.Text = "Min depth for zero velocity:";
                txtMinimumDepth.Text = "-1";

                radioPollutantTransport.Enabled = true;
                radioMudDebris.Enabled = true;
                radioSedimentTransport.Enabled = true;
                radioOilSpillOnLand.Enabled = true;

                chckWind.Enabled = true;
                chckGates.Enabled = true;
                chckBridges.Enabled = true;
                chckDamBreach.Enabled = true;
                chckRainfallEvaporation.Enabled = true;

                foreach (TreeNode node in treeViewOptions.Nodes)
                {
                    foreach (TreeNode child in node.Nodes)
                    {
                        if (child.Text == "Pollutant Transport")
                            child.ForeColor = Color.Black;

                        if (child.Text == "Sediment Transport")
                            child.ForeColor = Color.Black;

                        if (child.Text == "Mud/Debris Flow")
                            child.ForeColor = Color.Black;

                        if (child.Text == "Oil Spill on Land")
                            child.ForeColor = Color.Black;

                        if (child.Text == "Gates")
                            child.ForeColor = Color.Black;

                        if (child.Text == "Bridges")
                            child.ForeColor = Color.Black;

                        if (child.Text == "Wind")
                            child.ForeColor = Color.Black;

                        if (child.Text == "Dam Breach")
                            child.ForeColor = Color.Black;

                    }
                }

                chckVariableTimeStep.Checked = false;

                if (comboGraphCode.SelectedIndex == 10)
                    comboGraphCode.SelectedIndex = 1;

                groupBoxParallelComputation.Visible = true;

            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 1312071454: error setting Model GUI.\n", "ERROR 1312071454: error definiendo Model GUI.\n") +
                    ex.Message,
                    "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }


        }

        private void SetRiverDipModel(string newModel)
        {
            try
            {
                if ((newModel == "Model CPU" & RiverDipModel == "Model GPU") ||
                    (newModel == "Model GPU" & RiverDipModel == "Model CPU"))
                {
                    //GUI is the same. 
                }
                else if ((RiverDipModel == "Model CPU" || RiverDipModel == "Model GPU") & newModel == "Model FE")
                {
                    //Change from Plus or Plus GPU to FE.
                    SetFEModelGUI();
                }
                else if (RiverDipModel == "Model FE" & (newModel == "Model CPU" || newModel == "Model GPU"))
                {
                    //Change from FE to Plus or Plus GPU.
                    SetPLUSModelGUI();
                }

                RiverDipModel = newModel;

                if (RiverDipModel == "Model CPU")
                {
                    FinishSetForSimplePlusGUI();
                }
                else if (RiverDipModel == "Model GPU")
                {
                    FinishSetForGpuPlusGUI();
                }
                else
                {
                    FinishSetForFEGUI();
                }

                //Text = mainHeader + RiverDipModel + ") - " + _currentProjectPathAndName;
				Text = mainHeader + _currentProjectPathAndName;
			}
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 0908131552: error trying to change RiverFlow2D model.\n", "ERROR 0908131552: error al cambiar modelo de RiverFlow2D.\n") +
                    ex.Message,
                    "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

        }

        private void FinishSetForSimplePlusGUI()
        {
            try
            {
                Universal.ConfigConfig = "configPlus.config";
                _dataManager.Set("IRIVERPLUS", 1);
                _dataManager.Set("IVARDT", 0);
                _dataManager.Set("DTMULTIPLIER", (double)_dataManager.Get("TOUT"));
                _dataManager.Set("IDGPU", _numberOfLogicalProcessors);
                groupBoxParallelComputation.Visible = true;
                comboParallelComputing.Location = new Point(71, 39);
                comboParallelComputing.Size = new Size(39, 21);
                comboParallelComputing.Items.Clear();
                for (int i = 1; i <= _numberOfLogicalProcessors; ++i)
                    comboParallelComputing.Items.Add(i.ToString());
                comboParallelComputing.SelectedIndex = comboParallelComputing.Items.Count - 1;
                lblParallelComputing.Text = Universal.Idioma("Number of cores:", "Número de núcleos:");
            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 1312171457: error trying to change RiverFlow2D model.\n", "ERROR 1312171457: error al cambiar modelo de RiverFlow2D.\n") +
                    ex.Message,
                    "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void FinishSetForGpuPlusGUI()
        {

            try
            {
                Universal.ConfigConfig = "configPlus.config";
                _dataManager.Set("IRIVERPLUS", 2);
                _dataManager.Set("IVARDT", 0);
                _dataManager.Set("DTMULTIPLIER", (double)_dataManager.Get("TOUT"));
                groupBoxParallelComputation.Visible = true;
                comboParallelComputing.Location = new Point(11, 40);
                comboParallelComputing.Size = new Size(167, 21);
                comboParallelComputing.Items.Clear();
                foreach (ManagementObject mo in _graphicCardNames.Get())
                {
                    foreach (PropertyData property in mo.Properties)
                    {
                        if (property.Name == "Description")
                        {
                            comboParallelComputing.Items.Add(property.Value.ToString());
                        }
                    }
                }

                if (comboParallelComputing.Items.Count > 0)
                {
                    comboParallelComputing.SelectedIndex = 0;
                    _dataManager.Set("IDGPU", 1);
                    lblParallelComputing.Text = "GPU card:";
                }
                else
                    MessageBox.Show(Universal.Idioma("This computer does not have GPU cards.\n", "Este computador no tiene tarjetas GPU.\n"), 
                        "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);

            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 1312171458: error trying to change RiverFlow2D model to GPU Plus .\n", "ERROR 1312171458: error al cambiar modelo de RiverFlow2D a GPU Plus .\n") +
                    ex.Message,
                    "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

        }

        private void FinishSetForFEGUI()
        {
            Universal.ConfigConfig = "config.config";
            _dataManager.Set("IRIVERPLUS", 0);
        }

        private void initial_wse_Validated(object sender, EventArgs e)
        {
            if (initial_wse.Text != "")
            {
                _dataManager.Set((string)initial_wse.Tag, Convert.ToDouble(initial_wse.Text));
                UpdateData(initial_wse);
            }

        }


        private void DryBed_Validated(object sender, EventArgs e)
        {
            _dataManager.Set((string)DryBed.Tag, Convert.ToInt32(DryBed.Checked));
        }

        private void BedFromFEDFile_Validated(object sender, EventArgs e)
        {
            _dataManager.Set((string)BedFromFEDFile.Tag, Convert.ToInt32(BedFromFEDFile.Checked) + 1);
        }

        private void HorizontalWSE_Validated(object sender, EventArgs e)
        {
            _dataManager.Set((string)HorizontalWSE.Tag, Convert.ToInt32(!HorizontalWSE.Checked));
        }

        private void initial_wse_Validating(object sender, CancelEventArgs e)
        {
            if (HorizontalWSE.Checked)
            {
                if (initial_wse.Text.Trim() == "")
                {
                    AddError(initial_wse, Universal.Idioma("Initial elevation can not be empty.", "La elevación inicial no puede estar vacía."), "Control Data panel");
                    return;
                }

                double initialWsed = Convert.ToDouble(initial_wse.Text);

                if (Convert.ToDouble(initialWsed) < -100 || Convert.ToDouble(initialWsed) > 29000)
                {
                    AddError(initial_wse, Universal.Idioma("Initial WSEL must be in the range [-100, 29000]", "El WSEL inicial debe estar en el intervalo [-100, 29000]"), "Control Data panel");
                    return;

                }
                RemoveError(initial_wse);
            }
        }

        private void HorizontalWSE_CheckedChanged(object sender, EventArgs e)
        {
            initial_wse.Enabled = true;
        }

        private void DryBed_CheckedChanged(object sender, EventArgs e)
        {
            initial_wse.Enabled = false;
        }

        private void BedFromFEDFile_CheckedChanged(object sender, EventArgs e)
        {
            initial_wse.Enabled = false;
        }

        private void tabInflowBoundaryData_Click(object sender, EventArgs e)
        {

        }

        private void txtSimulationTime_TextChanged(object sender, EventArgs e)
        {

        }

        private void dataProfile_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void dataPiersDragForces_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex < 0 || e.RowIndex < 0) return;

            string value = "0.0";
            try
            {
                value = Convert.ToDouble(dataPiersDragForces[e.ColumnIndex, e.RowIndex].Value).ToString("N2");
            }
            catch (Exception)
            {
            }
            finally
            {
                dataPiersDragForces[e.ColumnIndex, e.RowIndex].Value = value;
                UpdateData(dataPiersDragForces);
            }
        }

        private void dataPiersDragForces_RowsAdded(object sender, DataGridViewRowsAddedEventArgs e)
        {
            if (!_updating) UpdateData(dataPiersDragForces);
        }

        private void dataPiersDragForces_RowsRemoved(object sender, DataGridViewRowsRemovedEventArgs e)
        {
            if (!_updating) UpdateData(dataPiersDragForces);
        }


        private void chckWeirs_CheckedChanged(object sender, EventArgs e)
        {
            int size = tabWeirsPage.Controls.Count;

            for (int i = 0; i < size; ++i)
            {
                tabWeirsPage.Controls[i].Enabled = chckWeirs.Checked;
                RemoveError(tabWeirsPage.Controls[i]);

                if (tabWeirsPage.Controls[i] is Panel)
                {
                    int sizePanel = tabWeirsPage.Controls[i].Controls.Count;

                    for (int j = 0; j < sizePanel; ++j)
                    {
                        tabWeirsPage.Controls[i].Controls[j].Enabled = chckWeirs.Checked;
                        RemoveError(tabWeirsPage.Controls[i].Controls[j]);
                    }
                }
            }
        }

        private void chckPiers_CheckedChanged(object sender, EventArgs e)
        {
            int size = tabPiersDragForces.Controls.Count;

            for (int i = 0; i < size; ++i)
            {
                tabPiersDragForces.Controls[i].Enabled = chckPiers.Checked;
                RemoveError(tabPiersDragForces.Controls[i]);

                if (tabPiersDragForces.Controls[i] is Panel)
                {
                    int sizePanel = tabPiersDragForces.Controls[i].Controls.Count;

                    for (int j = 0; j < sizePanel; ++j)
                    {
                        tabPiersDragForces.Controls[i].Controls[j].Enabled = chckPiers.Checked;
                        RemoveError(tabPiersDragForces.Controls[i].Controls[j]);
                    }
                }
            }
        }

        private void chckPiers_Validated(object sender, EventArgs e)
        {
            UpdateData(chckPiers);
        }

        private void btnOpenPiers_Click(object sender, EventArgs e)
        {
            var openFileDialog = new OpenFileDialog
            {
                Filter = "PIERS files (*.PIERS)|*.PIERS",
                InitialDirectory = _currentProjectPath,
                FileName = _currentProjectName + ".PIERS",
                FilterIndex = 1,
                RestoreDirectory = true,
                CheckFileExists = true
            };

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                var fileinfo = new FileInfo(openFileDialog.FileName);
                if (fileinfo.Length > 1)
                {
                    try
                    {
                        _dataManager.LoadPiersFromFile(openFileDialog.FileName);
                        UpdateWithPiersFile();
                    }
                    catch
                    {
                        MessageBox.Show(Universal.Idioma("ERROR 2810111739: error trying to open file.", "ERROR 2810111739: error abriendo archivo."),
                            "RiverFlow2D", MessageBoxButtons.OK,
                            MessageBoxIcon.Error);
                    }
                }
                else
                    MessageBox.Show(Universal.Idioma("WARNING: file is empty: ", "ADVERTENCIA: archivo está vacío: ") + openFileDialog.FileName,
                        "RiverFlow2D", MessageBoxButtons.OK,
                        MessageBoxIcon.Warning);

            }
        }

        private void btnSavePiers_Click(object sender, EventArgs e)
        {
            if (dataPiersDragForces.RowCount >= 2)
            {
                var saveFileDialog = new SaveFileDialog
                {
                    Filter = "PIERS files (*.PIERS)|*.PIERS",
                    InitialDirectory = _currentProjectPath,
                    FileName = _currentProjectName + ".PIERS",
                    FilterIndex = 1,
                    RestoreDirectory = true
                };

                try
                {
                    if (saveFileDialog.ShowDialog() == DialogResult.OK) _dataManager.SavePiersToFile(saveFileDialog.FileName);
                }
                catch
                {
                    MessageBox.Show(Universal.Idioma("ERROR 2810111740: error trying to save .PIERS file.", "ERROR 2810111740: error almacenando archivo .PIERS."),
                        "RiverFlow2D", MessageBoxButtons.OK,
                        MessageBoxIcon.Error);
                }
            }
            else
            {
                MessageBox.Show(Universal.Idioma("The piers drag forces table is empty. It was not saved.", "La tabla de pilas de puentes está vacía. No fue almacenada."), 
                    "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }

        }

        private void btnOpenSourcesAndSinks_Click(object sender, EventArgs e)
        {
            var openFileDialog = new OpenFileDialog
            {
                Filter = "SOURCES files (*.SOURCES)|*.SOURCES",
                InitialDirectory = _currentProjectPath,
                FileName = _currentProjectName + ".SOURCES",
                FilterIndex = 1,
                RestoreDirectory = true,
                CheckFileExists = true
            };

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                var fileinfo = new FileInfo(openFileDialog.FileName);
                if (fileinfo.Length > 1)
                {
                    try
                    {
                        _dataManager.LoadSourcesFromFile(openFileDialog.FileName);
                        UpdateWithSOURCESFile();
                    }
                    catch
                    {
                        MessageBox.Show(Universal.Idioma("ERROR 2810111741: error trying to open file.", "ERROR 2810111741: error abriendo archivo."),
                            "RiverFlow2D", MessageBoxButtons.OK,
                            MessageBoxIcon.Error);
                    }
                }
                else
                    MessageBox.Show(Universal.Idioma("WARNING: file " + openFileDialog.FileName + " is empty.", "ADVERTENCIA: el archivo" + openFileDialog.FileName + " está vacío."),
                        "RiverFlow2D", MessageBoxButtons.OK,
                        MessageBoxIcon.Warning);
            }

        }

        private void btnOpenWeirs_Click(object sender, EventArgs e)
        {
            var openFileDialog = new OpenFileDialog
            {
                Filter = "WEIRS files (*.WEIRS)|*.WEIRS",
                InitialDirectory = _currentProjectPath,
                FileName = _currentProjectName + ".WEIRS",
                FilterIndex = 1,
                RestoreDirectory = true,
                CheckFileExists = true
            };

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                var fileinfo = new FileInfo(openFileDialog.FileName);
                if (fileinfo.Length > 1)
                {
                    try
                    {
                        _dataManager.LoadWeirsFromFile(openFileDialog.FileName);
                        UpdateWithWEIRSFile();
                    }
                    catch
                    {
                        MessageBox.Show(Universal.Idioma("ERROR 2810111742: error trying to open file.", "ERROR 2810111742: error abriendo archivo."),
                            "RiverFlow2D", MessageBoxButtons.OK,
                            MessageBoxIcon.Error);
                    }
                }
                else
                    MessageBox.Show(Universal.Idioma("WARNING: file " + openFileDialog.FileName + " is empty.", "ADVERTENCIA: el archivo" + openFileDialog.FileName + " está vacío."),
                        "RiverFlow2D", MessageBoxButtons.OK,
                        MessageBoxIcon.Warning);

            }
        }

        private void btnOpenCrossSection_Click(object sender, EventArgs e)
        {
            var openFileDialog = new OpenFileDialog
            {
                Filter = ".XSECS files (*.XSECS)|*.XSECS",
                InitialDirectory = _currentProjectPath,
                FileName = _currentProjectName + ".XSECS",
                FilterIndex = 1,
                RestoreDirectory = true,
                CheckFileExists = true
            };

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                var fileinfo = new FileInfo(openFileDialog.FileName);
                if (fileinfo.Length > 1)
                {
                    try
                    {
                        _dataManager.LoadCrossSectionsFromFile(openFileDialog.FileName);
                        UpdateWithXSECSFile();
                        UpdateData(dataCrossSection); //This update needed for case where rows can be added  by user
                                                      //First load doesn't count for last empty row
                    }
                    catch
                    {
                        MessageBox.Show(Universal.Idioma("ERROR 2810111743: error trying to open file ", "ERROR 2810111743: error abriendo archivo ") +
                            openFileDialog.FileName + ".", "RiverFlow2D",
                            MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
                else
                    MessageBox.Show(Universal.Idioma("WARNING: file " + openFileDialog.FileName + " is empty.", "WARNING: file " + openFileDialog.FileName + " está vacío."),
                        "RiverFlow2D", MessageBoxButtons.OK,
                        MessageBoxIcon.Warning);

            }
        }

        private void btnOpenCulverts_Click(object sender, EventArgs e)
        {
            var openFileDialog = new OpenFileDialog
            {
                Filter = "CULVERTS files (*.CULVERTS)|*.CULVERTS",
                InitialDirectory = _currentProjectPath,
                FileName = _currentProjectName + ".CULVERTS",
                FilterIndex = 1,
                RestoreDirectory = true,
                CheckFileExists = true
            };

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                var fileinfo = new FileInfo(openFileDialog.FileName);
                if (fileinfo.Length > 1)
                {
                    try
                    {
                        _dataManager.LoadCulvertsFromFile(openFileDialog.FileName);
                        UpdateWithCULVERTSFile();
                    }
                    catch
                    {
                        MessageBox.Show(Universal.Idioma("ERROR 2810111744: error trying to open file ", "ERROR 2810111744: error abriendo archivo ") +
                            openFileDialog.FileName, "RiverFlow2D",
                            MessageBoxButtons.OK,
                            MessageBoxIcon.Error);
                    }
                }
                else
                    MessageBox.Show(Universal.Idioma("WARNING: file " + openFileDialog.FileName + " is empty.", "ADVERTENCIA: el archivo" + openFileDialog.FileName + " está vacío."),
                        "RiverFlow2D", MessageBoxButtons.OK,
                        MessageBoxIcon.Warning);
            }
        }

        private void btnOpenObservationPoints_Click(object sender, EventArgs e)
        {
            var openFileDialog = new OpenFileDialog
            {
                Filter = "OBS files (*.OBS)|*.OBS",
                InitialDirectory = _currentProjectPath,
                FileName = _currentProjectName + ".OBS",
                FilterIndex = 1,
                RestoreDirectory = true,
                CheckFileExists = true
            };

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                var fileinfo = new FileInfo(openFileDialog.FileName);
                if (fileinfo.Length > 1)
                {
                    try
                    {
                        _dataManager.LoadObservationPointsFromFile(openFileDialog.FileName);
                        UpdateWithOBSFile();
                    }
                    catch
                    {
                        MessageBox.Show(Universal.Idioma("ERROR 2810111745: error trying to open file.", "ERROR 2810111745: error abriendo archivo."),
                            "RiverFlow2D", MessageBoxButtons.OK,
                            MessageBoxIcon.Error);
                    }
                }
                else
                    MessageBox.Show(Universal.Idioma("WARNING: file " + openFileDialog.FileName + " is empty.", "ADVERTENCIA: el archivo" + openFileDialog.FileName + " está vacío."),
                        "RiverFlow2D", MessageBoxButtons.OK,
                        MessageBoxIcon.Warning);

            }
        }



        private void btnOpenBoundaryConditions_Click(object sender, EventArgs e)
        {
            var openFileDialog = new OpenFileDialog
            {
                Filter = "IFL files (*.IFL)|*.IFL",
                InitialDirectory = _currentProjectPath,
                FileName = _currentProjectName + ".IFL",
                FilterIndex = 1,
                RestoreDirectory = true,
                CheckFileExists = true
            };

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                var fileinfo = new FileInfo(openFileDialog.FileName);
                if (fileinfo.Length > 1)
                {
                    try
                    {
                        _dataManager.LoadOpenBoundaryConditionsFromFile(openFileDialog.FileName);
                        UpdateWithIFLFile();
                    }
                    catch
                    {
                        MessageBox.Show(Universal.Idioma("ERROR 2810111748: error trying to open file.", "ERROR 2810111748: error abriendo archivo."),
                            "RiverFlow2D", MessageBoxButtons.OK,
                            MessageBoxIcon.Error);
                    }
                }
                else
                    MessageBox.Show(Universal.Idioma("WARNING: file " + openFileDialog.FileName + " is empty.", "ADVERTENCIA: el archivo" + openFileDialog.FileName + " está vacío."),
                        "RiverFlow2D", MessageBoxButtons.OK,
                        MessageBoxIcon.Warning);

            }
        }


        private void chckCulverts_CheckedChanged(object sender, EventArgs e)
        {
            int size = tabCulvertsData.Controls.Count;
            for (int i = 0; i < size; ++i)
            {
                tabCulvertsData.Controls[i].Enabled = chckCulverts.Checked;
                RemoveError(tabCulvertsData.Controls[i]);

                if (tabCulvertsData.Controls[i] is Panel)
                {
                    int sizePanel = tabCulvertsData.Controls[i].Controls.Count;

                    for (int j = 0; j < sizePanel; ++j)
                    {
                        tabCulvertsData.Controls[i].Controls[j].Enabled = chckCulverts.Checked;
                        RemoveError(tabCulvertsData.Controls[i].Controls[j]);
                    }
                }
            }
        }

        private void chckSourcesAndSinks_CheckedChanged(object sender, EventArgs e)
        {
            int size = tabSourcesAndSinks.Controls.Count;

            for (int i = 0; i < size; ++i)
            {
                tabSourcesAndSinks.Controls[i].Enabled = chckSourcesAndSinks.Checked;
                RemoveError(tabSourcesAndSinks.Controls[i]);

                if (tabSourcesAndSinks.Controls[i] is Panel)
                {
                    int sizePanel = tabSourcesAndSinks.Controls[i].Controls.Count;

                    for (int j = 0; j < sizePanel; ++j)
                    {
                        tabSourcesAndSinks.Controls[i].Controls[j].Enabled = chckSourcesAndSinks.Checked;
                        RemoveError(tabSourcesAndSinks.Controls[i].Controls[j]);
                    }
                }
            }
        }

        private void groupBoxTimeControlData_Enter(object sender, EventArgs e)
        {

        }

        private void tabWeirs_Click(object sender, EventArgs e)
        {

        }

        private void btnSaveWeirs_Click(object sender, EventArgs e)
        {
            if (dataWeirs.RowCount >= 1)
            {
                var saveFileDialog = new SaveFileDialog
                {
                    Filter = "WEIRS files (*.WEIRS)|*.WEIRS",
                    InitialDirectory = _currentProjectPath,
                    FileName = _currentProjectName + ".WEIRS",
                    FilterIndex = 1,
                    RestoreDirectory = true
                };

                try
                {
                    if (saveFileDialog.ShowDialog() == DialogResult.OK) _dataManager.SaveWeirsToFile(saveFileDialog.FileName);
                }
                catch
                {
                    MessageBox.Show(Universal.Idioma("ERROR 2810111749: error trying to save .WEIRS file.", "ERROR 2810111749: error almacenando archivo .WEIRS."),
                        "RiverFlow2D", MessageBoxButtons.OK,
                        MessageBoxIcon.Error);
                }
            }
            else
            {
                MessageBox.Show(Universal.Idioma("The weirs table is empty. It was not saved.", "La tabla de vertederos está vacía. No fue almacenada."), 
                    "RiverFlow2D", MessageBoxButtons.OK,  MessageBoxIcon.Information);
            }

        }


        private void tabControlData_Click(object sender, EventArgs e)
        {

        }

        private void btnSaveCulverts_Click(object sender, EventArgs e)
        {
            if (dataCulverts.RowCount >= 1)
            {
                var saveFileDialog = new SaveFileDialog
                {
                    Filter = "CULVERTS files (*.CULVERTS)|*.CULVERTS",
                    InitialDirectory = _currentProjectPath,
                    FileName = _currentProjectName + ".CULVERTS",
                    FilterIndex = 1,
                    RestoreDirectory = true
                };

                try
                {
                    if (saveFileDialog.ShowDialog() == DialogResult.OK) _dataManager.SaveCulvertsToFile(saveFileDialog.FileName);
                }
                catch
                {
                    MessageBox.Show(Universal.Idioma("ERROR 2810111736: error trying to save .CULVERTS file.", "ERROR 2810111736: error almacenando archivo .CULVERTS."),
                        "RiverFlow2D", MessageBoxButtons.OK,
                        MessageBoxIcon.Error);
                }
            }
            else
            {
                MessageBox.Show(Universal.Idioma("The culverts data table is empty. It was not saved.", "La tabla de alcantarillas está vacía. No fue almacenada."), 
                    "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void dataCulverts_RowsAdded(object sender, DataGridViewRowsAddedEventArgs e)
        {
            if (!_updating)
            {
                UpdateData(dataCulverts);
                ColorRepeats(dataCulverts);
            }
        }

        private void dataCulverts_RowsRemoved(object sender, DataGridViewRowsRemovedEventArgs e)
        {
            if (!_updating)
            {
                UpdateData(dataCulverts);
                ColorRepeats(dataCulverts);
            }
        }


        private void btnSaveOPenBoundaryConditions_Click(object sender, EventArgs e)
        {
            if (dataOpenBoundaryConditions.RowCount >= 2)
            {
                var saveFileDialog = new SaveFileDialog
                {
                    Filter = "IFL files (*.IFL)|*.IFL",
                    InitialDirectory = _currentProjectPath,
                    FileName = _currentProjectName + ".IFL",
                    FilterIndex = 1,
                    RestoreDirectory = true
                };

                try
                {
                    if (saveFileDialog.ShowDialog() == DialogResult.OK)
                        _dataManager.SaveOpenBoundaryConditionsToFile(saveFileDialog.FileName);
                }
                catch
                {
                    MessageBox.Show(Universal.Idioma("ERROR 1499110902: error trying to save .IFL file.", "ERROR 1499110902: error almacenando archivo .IFL."),
                        "RiverFlow2D", MessageBoxButtons.OK,
                        MessageBoxIcon.Error);
                }
            }
            else
            {
                MessageBox.Show(Universal.Idioma("The open boundary conditions table is empty. It was not saved.", 
                    "La tabla de condiciones de contorno está vacía. No fue almacenada."), 
                    "RiverFlow2D",  MessageBoxButtons.OK, MessageBoxIcon.Information);
            }




        }

        private void chckWeirs_Validated(object sender, EventArgs e)
        {
            UpdateData(chckWeirs);
        }

        private void chckResultsAtObservationPoints_CheckedChanged(object sender, EventArgs e)
        {
            int size = tabObservationPoints.Controls.Count;

            for (int i = 0; i < size; ++i)
            {
                tabObservationPoints.Controls[i].Enabled = chckResultsAtObservationPoints.Checked;
                RemoveError(tabObservationPoints.Controls[i]);

                if (tabObservationPoints.Controls[i] is Panel)
                {
                    int sizePanel = tabObservationPoints.Controls[i].Controls.Count;

                    for (int j = 0; j < sizePanel; ++j)
                    {
                        tabObservationPoints.Controls[i].Controls[j].Enabled = chckResultsAtObservationPoints.Checked;
                        RemoveError(tabObservationPoints.Controls[i].Controls[j]);
                    }
                }
            }
        }

        private void chckMaximumValues_Validated(object sender, EventArgs e)
        {
            UpdateData(chckMaximumValues);
        }

        private void chckResultsAtObservationPoints_Validated(object sender, EventArgs e)
        {
            UpdateData(chckResultsAtObservationPoints);
        }

        private void chckCulverts_Validated(object sender, EventArgs e)
        {
            UpdateData(chckCulverts);
        }


        private void tabObservationPoints_Click(object sender, EventArgs e)
        {

        }

        private void btnSaveObservationPoints_Click(object sender, EventArgs e)
        {
            if (dataObservationPoints.RowCount >= 2)
            {
                var saveFileDialog = new SaveFileDialog
                {
                    Filter = "OBS files (*.OBS)|*.OBS",
                    InitialDirectory = _currentProjectPath,
                    FileName = _currentProjectName + ".OBS",
                    FilterIndex = 1,
                    RestoreDirectory = true
                };

                try
                {
                    if (saveFileDialog.ShowDialog() == DialogResult.OK)
                        _dataManager.SaveObservationPointsToFile(saveFileDialog.FileName);
                }
                catch
                {
                    MessageBox.Show(Universal.Idioma("ERROR 1599110828: error trying to save .OBS file.", "ERROR 1599110828: error almacenando archivo .OBS."),
                        "RiverFlow2D", MessageBoxButtons.OK,
                        MessageBoxIcon.Error);
                }
            }
            else
            {
                MessageBox.Show(Universal.Idioma("The observation points data table is empty. It was not saved.", 
                    "La tabla de puntos de observación está vacía. No fue almacenada."), 
                    "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }



        }

        private void tabSourcesAndSinks_Click(object sender, EventArgs e)
        {

        }

        private void btnSaveSourcesAndSinks_Click(object sender, EventArgs e)
        {
            if (dataSourcesAndSinks.RowCount >= 2)
            {
                var saveFileDialog = new SaveFileDialog
                {
                    Filter = "SOURCES files (*.SOURCES)|*.SOURCES",
                    InitialDirectory = _currentProjectPath,
                    FileName = _currentProjectName + ".SOURCES",
                    FilterIndex = 1,
                    RestoreDirectory = true
                };

                try
                {
                    if (saveFileDialog.ShowDialog() == DialogResult.OK) _dataManager.SaveSourcesToFile(saveFileDialog.FileName);
                }
                catch
                {
                    MessageBox.Show(Universal.Idioma("ERROR 1899111225: error trying to save .SOURCES file.", "ERROR 1899111225: error almacenando archivo .SOURCES."),
                        "RiverFlow2D", MessageBoxButtons.OK,
                        MessageBoxIcon.Error);
                }
            }
            else
            {
                MessageBox.Show(Universal.Idioma("The sources and sinks table is empty. It was not saved.",
                    "La tabla de fuentes y sumideros está vacía. No fue almacenada."), 
                    "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }



        }


        private void btnPlotRiverFLO2DResults_Click(object sender, EventArgs e)
        {
            string file = _currentProjectPathAndName;
            var saveFileDialog = new SaveFileDialog();
            DialogResult dlgResult1 = MessageBox.Show(Universal.Idioma("Would you like to save changes?", "¿Desea almacanar los cambios?"), 
                "RiverFlow2D",  MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question);

            if (dlgResult1 != DialogResult.Cancel)
            {
                if (dlgResult1 == DialogResult.Yes)
                {
                    saveFileDialog.Filter = "PLT files (*.PLT)|*.PLT";
                    saveFileDialog.InitialDirectory = _currentProjectPath;
                    saveFileDialog.FileName = _currentProjectName + ".PLT";
                    saveFileDialog.FilterIndex = 1;
                    saveFileDialog.RestoreDirectory = true;

                    try
                    {
                        System.Windows.Forms.DialogResult dr = saveFileDialog.ShowDialog();
                        if (dr == DialogResult.OK)
                        {
                            file = saveFileDialog.FileName;
                            _dataManager.SaveGraphicOptionsToFile(saveFileDialog.FileName);
                        }
                        else if (dr == DialogResult.No)
                            file = _currentProjectPathAndName;
                        else if (dr == DialogResult.Cancel)
                            file = "";
                    }
                    catch
                    {
                        MessageBox.Show(Universal.Idioma("ERROR 2810111738: error trying to save .PLT file.", "ERROR 2810111738: error almacenando archivo .PLT."),
                            "RiverFlow2D", MessageBoxButtons.OK,
                            MessageBoxIcon.Error);
                        return;
                    }
                }

                if (file == "")
                {
                    // save was selected but was cancel
                    // exit
                }
                else
                {
                    //Run RiverFlow2DGr4.exe
                    try
                    {
                        if (dlgResult1 == DialogResult.Yes)
                        {
                            string[] split = file.Split(new Char[] { '\\' });
                            if (split[split.Length - 1].Contains("."))
                            {
                                file = file.Substring(0, file.Length - (split[split.Length - 1].Length - split[split.Length - 1].IndexOf('.')));
                            }
                        }

                        var proc = new System.Diagnostics.Process
                        {
                            StartInfo =
                            {
                                FileName = "RiverFlow2DGr4.exe",
                                Arguments = "\"" + file + "\"",
                                UseShellExecute = false,
                                RedirectStandardOutput = false
                            }
                        };
                        //proc.StartInfo.FileName = @"C:\WINDOWS\NOTEPAD.EXE";
                        proc.Start();
                        proc.WaitForExit();
                        proc.Close();
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(Universal.Idioma("ERROR 2810111737: error running RiverFlow2DGr4.exe. ", "ERROR 2810111737: error corriendo RiverFlow2DGr4.exe. ") +
                            ex.Message, "RiverFlow2D",
                            MessageBoxButtons.OK,
                            MessageBoxIcon.Error);
                    }
                }
            }
            else
            {
                // exit
            }
        }


        private void txtA_Validated(object sender, EventArgs e)
        {
            if (txtA.Text != "") UpdateData(txtA);

        }

        private void txtA_Validating(object sender, CancelEventArgs e)
        {
            if (comboTransportFormula.SelectedIndex == 8 & txtA.Text == "")
            {
                AddError(txtA, Universal.Idioma("Rating curve coefficient cannot be empty.", ""), "Sediment Transport panel");
            }
            else RemoveError(txtA);
        }

        private void txtD90_TextChanged(object sender, EventArgs e)
        {

        }

        private void txtB_Validating(object sender, CancelEventArgs e)
        {
            if (comboTransportFormula.SelectedIndex == 8 & txtB.Text == "")
            {
                AddError(txtB, Universal.Idioma("Rating curve coefficient cannot be empty.", ""), "Sediment Transport panel");
            }
            else RemoveError(txtB);
        }

        private void txtB_TextChanged(object sender, EventArgs e)
        {
            if (txtB.Text != "") UpdateData(txtB);

        }

        private void tabSedimentTransport_Click(object sender, EventArgs e)
        {

        }

        private void radioDischargeTimeInflow_CheckedChanged(object sender, EventArgs e)
        {
            bool unit = radioEnglish.Checked;
            if (radioDischargeTimeInflow.Checked)
                dataTimeQ.Columns[1].HeaderText = "Q (" + (unit ? "ft3/s" : "m3/s") + ")";
            else
                dataTimeQ.Columns[1].HeaderText = "WSEL (" + (unit ? "ft" : "m") + ")";
        }

        private void radioDischargeTimeOutflow_CheckedChanged_1(object sender, EventArgs e)
        {
            bool unit = radioEnglish.Checked;
            if (radioDischargeTimeOutflow.Checked)
                dataOutflow.Columns[1].HeaderText = "Q (" + (unit ? "ft3/s" : "m3/s") + ")";
            else if (!radioDischargeCurve.Checked)
                dataOutflow.Columns[1].HeaderText = "WSEL (" + (unit ? "ft" : "m") + ")";
        }



        private void radioDischargeTimeOutflow_CheckedChanged_2(object sender, EventArgs e)
        {
            bool unit = radioEnglish.Checked;
            if (radioDischargeTimeOutflow.Checked)
            {
                dataOutflow.Columns[0].HeaderText = Universal.Idioma("Time (hrs)", "Tiempo (hrs)");
                dataOutflow.Columns[1].HeaderText = "Q (" + (unit ? "ft3/s" : "m3/s") + ")";
            }
            else if (radioDischargeCurve.Checked)
            {
                dataOutflow.Columns[0].HeaderText = "Q (" + (unit ? "ft3/s" : "m3/s") + ")";
                dataOutflow.Columns[1].HeaderText = "WSEL (" + (unit ? "ft" : "m") + ")";
            }
            else // radioWSETime
            {
                dataOutflow.Columns[0].HeaderText = Universal.Idioma("Time (hrs)", "Tiempo (hrs)"); ;
                dataOutflow.Columns[1].HeaderText = "WSEL (" + (unit ? "ft" : "m") + ")";
            }
        }

        //private void radioDischargeCurve_CheckedChanged_1(object sender, EventArgs e)
        //{
        //	bool unit = radioEnglish.Checked;
        //	if (radioDischargeTimeOutflow.Checked)
        //	{
        //		dataOutflow.Columns[0].HeaderText = "Time (hrs)";
        //		dataOutflow.Columns[1].HeaderText = "Q (" + (unit ? "ft3/s" : "m3/s") + ")";
        //	}
        //	else if (radioDischargeCurve.Checked)
        //	{
        //		dataOutflow.Columns[0].HeaderText = "Q (" + (unit ? "ft3/s" : "m3/s") + ")";
        //		dataOutflow.Columns[1].HeaderText = "WSEL (" + (unit ? "ft" : "m") + ")";
        //	}
        //	else // radioWSETime
        //	{
        //		dataOutflow.Columns[0].HeaderText = "Time (hrs)";
        //		dataOutflow.Columns[1].HeaderText = "WSEL (" + (unit ? "ft" : "m") + ")";
        //	}
        //	;
        //}



        private void dataTimeQ_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }


        private void dataPiersDragForces_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void dataObservationPoints_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex < 0 || e.RowIndex < 0) return;

            string value = "";
            try
            {
                value = Convert.ToDouble(dataObservationPoints[e.ColumnIndex, e.RowIndex].Value).ToString("N2");
            }
            catch (Exception)
            {
            }
            finally
            {
                dataObservationPoints[e.ColumnIndex, e.RowIndex].Value = value;
                UpdateData(dataObservationPoints);
            }
        }

        private void dataSourcesAndSinks_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            //if (e.ColumnIndex < 0 || e.RowIndex < 0) return;

            //string value = "0.0";
            //try
            //{
            //    value = Convert.ToDouble(dataSourcesAndSinks[e.ColumnIndex, e.RowIndex].Value).ToString("N2");
            //}
            //catch (Exception)
            //{
            //}
            //finally
            //{
            //    dataSourcesAndSinks[e.ColumnIndex, e.RowIndex].Value = value;
            //    UpdateData(dataSourcesAndSinks);
            //}

        }

        private void dataWeirs_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex < 0 || e.RowIndex < 0) return;

            string value = "0.0";
            try
            {
                value = dataWeirs[e.ColumnIndex, e.RowIndex].Value.ToString();
            }
            catch (Exception)
            {
            }
            finally
            {
                dataWeirs[e.ColumnIndex, e.RowIndex].Value = value;
                UpdateData(dataWeirs);
            }

        }

        private void dataOutflow_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex < 0 || e.RowIndex < 0) return;

            string value = "0.0";
            try
            {
                value = Convert.ToDouble(dataOutflow[e.ColumnIndex, e.RowIndex].Value).ToString("N2");
            }
            catch (Exception)
            {
            }
            finally
            {
                dataOutflow[e.ColumnIndex, e.RowIndex].Value = value;
                UpdateData(dataOutflow);
            }
        }

        private void dataOutflow_RowsAdded(object sender, DataGridViewRowsAddedEventArgs e)
        {
            if (!_updating) UpdateData(dataOutflow);
        }

        private void dataOpenBoundaryConditions_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex < 0 || e.RowIndex < 0) return;

            string value = "0.0";
            try
            {
                value = dataOpenBoundaryConditions[e.ColumnIndex, e.RowIndex].Value.ToString();
            }
            catch (Exception)
            {
            }
            finally
            {
                dataOpenBoundaryConditions[e.ColumnIndex, e.RowIndex].Value = value;
                UpdateData(dataOpenBoundaryConditions);
            }
        }

        private void dataObservationPoints_RowsAdded(object sender, DataGridViewRowsAddedEventArgs e)
        {
            if (!_updating)
            {
                UpdateData(dataObservationPoints);
                ColorRepeats(dataObservationPoints);
            }
        }


        private void dataObservationPoints_RowsRemoved(object sender, DataGridViewRowsRemovedEventArgs e)
        {
            if (!_updating)
            {
                UpdateData(dataObservationPoints);
                ColorRepeats(dataObservationPoints);
            }
        }

        private void dataSourcesAndSinks_RowsAdded(object sender, DataGridViewRowsAddedEventArgs e)
        {
            //if (!_updating)
            //{
            //	UpdateData(dataSourcesAndSinks);
            //	ColorRepeats(dataSourcesAndSinks);
            //}
        }

        private void dataSourcesAndSinks_RowsRemoved(object sender, DataGridViewRowsRemovedEventArgs e)
        {
            //if (!_updating)
            //{
            //	UpdateData(dataSourcesAndSinks);
            //	ColorRepeats(dataSourcesAndSinks);
            //}
        }

        private void dataWeirs_RowsAdded(object sender, DataGridViewRowsAddedEventArgs e)
        {
            if (!_updating)
            {
                UpdateData(dataWeirs);
                ColorRepeats(dataWeirs);
            }
        }

        private void dataWeirs_RowsRemoved(object sender, DataGridViewRowsRemovedEventArgs e)
        {
            if (!_updating)
            {
                UpdateData(dataWeirs);
                ColorRepeats(dataWeirs);
            }
        }

        private void dataOutflow_RowsRemoved(object sender, DataGridViewRowsRemovedEventArgs e)
        {
            if (!_updating) UpdateData(dataOutflow);
        }

        private void dataOpenBoundaryConditions_RowsAdded(object sender, DataGridViewRowsAddedEventArgs e)
        {
            if (!_updating) UpdateData(dataOpenBoundaryConditions);
        }

        private void dataOpenBoundaryConditions_RowsRemoved(object sender, DataGridViewRowsRemovedEventArgs e)
        {
            if (!_updating) UpdateData(dataOpenBoundaryConditions);
        }

        private void initial_wse_TextChanged(object sender, EventArgs e)
        {

        }

        private void initial_wse_KeyPress(object sender, KeyPressEventArgs e)
        {
            //checking whether pressed key is number, decimal, -,  or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b' && e.KeyChar != '-')
                e.Handled = true;
            else if (e.KeyChar == '.')
            {
                //check if there is already a decimal point
                if (initial_wse.Text.Contains("."))
                    e.Handled = true;
            }
            else if (e.KeyChar == '-')
                //check if there is already a - sign
                if (initial_wse.Text.Contains("-"))
                    e.Handled = true;
        }

        private void txtSimulationTime_KeyPress(object sender, KeyPressEventArgs e)
        {
            //checking whether pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
                //check if there is already a decimal point
                if (txtSimulationTime.Text.Contains("."))
                    e.Handled = true;
        }

        private void txtOutputInterval_KeyPress(object sender, KeyPressEventArgs e)
        {
            //checking whether pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
                //check if there is already a decimal point
                if (txtOutputInterval.Text.Contains("."))
                    e.Handled = true;
        }

        private void txtTimeStepFactor_TextChanged(object sender, EventArgs e)
        {

        }

        private void txtTimeStep_TextChanged(object sender, EventArgs e)
        {

        }

        private void txtTimeStepFactor_KeyPress(object sender, KeyPressEventArgs e)
        {
            //checking whether pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
                //check if there is already a decimal point
                if (txtTimeStepFactor.Text.Contains("."))
                    e.Handled = true;
        }

        private void txtTimeStep_KeyPress(object sender, KeyPressEventArgs e)
        {
            //checking whether pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
                //check if there is already a decimal point
                if (txtTimeStep.Text.Contains("."))
                    e.Handled = true;
        }

        //private void txtSelectiveLumpingParameter_KeyPress(object sender, KeyPressEventArgs e)
        //{
        //    //checking whether pressed key is number, decimal or backspace
        //    if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
        //        e.Handled = true;
        //    else if (e.KeyChar == '.')
        //        //check if there is already a decimal point
        //        if (txtSelectiveLumpingParameter.Text.Contains("."))
        //            e.Handled = true;
        //}

        private void txtManningsFactor_KeyPress(object sender, KeyPressEventArgs e)
        {
            //checking whether pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
                //check if there is already a decimal point
                if (txtManningsFactor.Text.Contains("."))
                    e.Handled = true;
        }

        private void txtMinimumDepth_KeyPress(object sender, KeyPressEventArgs e)
        {
            //checking whether pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
                //check if there is already a decimal point
                if (txtMinimumDepth.Text.Contains("."))
                    e.Handled = true;
        }

        private void rslipbcfactor_KeyPress(object sender, KeyPressEventArgs e)
        {
            //checking whether pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
                //check if there is already a decimal point
                if (rslipbcfactor.Text.Contains("."))
                    e.Handled = true;
        }

        private void txtOutputInterval_TextChanged(object sender, EventArgs e)
        {

        }

        private void txtD50_TextChanged(object sender, EventArgs e)
        {

        }

        private void txtD50_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = CheckForReal(txtD50, e);
        }

        private void txtD90_KeyPress(object sender, KeyPressEventArgs e)
        {
            //e.Handled = checkForReal(e);
            //checking whether pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
                //check if there is already a decimal point
                if (txtD90.Text.Contains("."))
                    e.Handled = true;
        }

        private void txtSG_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = CheckForReal(txtSG, e);
            ////checking whether pressed key is number, decimal or backspace
            //if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
            //    e.Handled = true;
            //else if (e.KeyChar == '.')
            //    //check if there is already a decimal point
            //    if (txtSG.Text.Contains("."))
            //        e.Handled = true;
        }

        private void txtPorosity_KeyPress(object sender, KeyPressEventArgs e)
        {
            //e.Handled = checkForReal(e);
            //checking whether pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
                //check if there is already a decimal point
                if (txtPorosity.Text.Contains("."))
                    e.Handled = true;
        }

        private void txtNSEDSTEP_TextChanged(object sender, EventArgs e)
        {

        }

        private void txtNSEDSTEP_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = CheckForInteger(txtEPSG, e);
        }

        private void txtA_KeyPress(object sender, KeyPressEventArgs e)
        {
            //e.Handled = checkForReal(e);
            //checking whether pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
                //check if there is already a decimal point
                if (txtA.Text.Contains("."))
                    e.Handled = true;
        }

        private void txtB_KeyPress(object sender, KeyPressEventArgs e)
        {
            //e.Handled = checkForReal(e);
            //checking whether pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
                //check if there is already a decimal point
                if (txtB.Text.Contains("."))
                    e.Handled = true;

        }

        private void txtMin_KeyPress(object sender, KeyPressEventArgs e)
        {
            //checking whether pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
                //check if there is already a decimal point
                if (txtMin.Text.Contains("."))
                    e.Handled = true;
        }

        private void txtMax_KeyPress(object sender, KeyPressEventArgs e)
        {
            //checking whether pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
                //check if there is already a decimal point
                if (txtMax.Text.Contains("."))
                    e.Handled = true;
        }

        private void txtMaxVelocityVector_KeyPress(object sender, KeyPressEventArgs e)
        {
            //checking whether pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
                //check if there is already a decimal point
                if (txtMaxVelocityVector.Text.Contains("."))
                    e.Handled = true;
        }

        private void txtVelocityVectorFactor_KeyPress(object sender, KeyPressEventArgs e)
        {
            //checking whether pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
                //check if there is already a decimal point
                if (txtVelocityVectorFactor.Text.Contains("."))
                    e.Handled = true;
        }

        private void txtX1_KeyPress(object sender, KeyPressEventArgs e)
        {
            //checking whether pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
                //check if there is already a decimal point
                if (txtX1.Text.Contains("."))
                    e.Handled = true;
        }

        private void txtY1_KeyPress(object sender, KeyPressEventArgs e)
        {
            //checking whether pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
                //check if there is already a decimal point
                if (txtY1.Text.Contains("."))
                    e.Handled = true;
        }

        private void txtX2_KeyPress(object sender, KeyPressEventArgs e)
        {
            //checking whether pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
                //check if there is already a decimal point
                if (txtX2.Text.Contains("."))
                    e.Handled = true;
        }

        private void txtY2_KeyPress(object sender, KeyPressEventArgs e)
        {
            //checking whether pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
                //check if there is already a decimal point
                if (txtY2.Text.Contains("."))
                    e.Handled = true;
        }

        private void chckInternalRatingTables_CheckedChanged(object sender, EventArgs e)
        {
            int size = tabInternalRatingTables.Controls.Count;

            for (int i = 0; i < size; ++i)
            {
                tabInternalRatingTables.Controls[i].Enabled = chckInternalRatingTables.Checked;
                RemoveError(tabInternalRatingTables.Controls[i]);

                if (tabInternalRatingTables.Controls[i] is Panel)
                {
                    int sizePanel = tabInternalRatingTables.Controls[i].Controls.Count;

                    for (int j = 0; j < sizePanel; ++j)
                    {
                        tabInternalRatingTables.Controls[i].Controls[j].Enabled = chckInternalRatingTables.Checked;
                        RemoveError(tabInternalRatingTables.Controls[i].Controls[j]);
                    }
                }
            }
        }

        private void btnOpenInternalRatingTable_Click(object sender, EventArgs e)
        {
            var openFileDialog = new OpenFileDialog
            {
                Filter = "IRT files (*.IRT)|*.IRT",
                InitialDirectory = _currentProjectPath,
                FileName = _currentProjectName + ".IRT",
                FilterIndex = 1,
                RestoreDirectory = true,
                CheckFileExists = true
            };

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                var fileinfo = new FileInfo(openFileDialog.FileName);
                if (fileinfo.Length > 1)
                {
                    try
                    {
                        _dataManager.LoadInternalRatingTablesFromFile(openFileDialog.FileName);
                        UpdateWithIRTFile();
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(Universal.Idioma("ERROR 0312110615: error trying to open file ", "ERROR 0312110615: error abriendo archivo ") +
                            openFileDialog.FileName + ". " + ex.Message,
                            "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
                else
                    MessageBox.Show(Universal.Idioma("WARNING: file " + openFileDialog.FileName + " is empty.", "ADVERTENCIA: el archivo" + openFileDialog.FileName + " está vacío."),
                        "RiverFlow2D", MessageBoxButtons.OK,
                        MessageBoxIcon.Warning);
            }
        }

        private void btnSaveInternalRatingTable_Click(object sender, EventArgs e)
        {
            if (dataInternalRatingTable.RowCount >= 2)
            {
                var saveFileDialog = new SaveFileDialog
                {
                    Filter = "IRT files (*.IRT)|*.IRT",
                    InitialDirectory = _currentProjectPath,
                    FileName = _currentProjectName + ".IRT",
                    FilterIndex = 1,
                    RestoreDirectory = true
                };

                try
                {
                    if (saveFileDialog.ShowDialog() == DialogResult.OK)
                        _dataManager.SaveInternalRatingTablesToFile(saveFileDialog.FileName);
                }
                catch
                {
                    MessageBox.Show(Universal.Idioma("ERROR 0312110714: error trying to save .IRT file.", "ERROR 0312110714: error almacenando archivo .IRT."),
                        "RiverFlow2D", MessageBoxButtons.OK,
                        MessageBoxIcon.Error);
                }
            }
            else
            {
                MessageBox.Show(Universal.Idioma("The internal rating table is empty. It was not saved.",
                    "La tabla de caudal está vacía. No fue almacenada."), 
                    "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void toolStripMenuItem1_Click(object sender, EventArgs e)
        {
            //var colorDlg = new ColorDialog();

            //if (colorDlg.ShowDialog() == DialogResult.OK)
            //{

            //	tabOptions.DrawMode = TabDrawMode.OwnerDrawFixed;

            //	//change color of tabs
            //	for (int newCol = 0; newCol < tabOptions.TabPages.Count; ++newCol)
            //	{
            //		tabOptions.TabPages[newCol].BackColor = colorDlg.Color;
            //	}

            //	//change color to all datagrids
            //	dataObservationPoints.BackgroundColor = colorDlg.Color;
            //	dataPiersDragForces.BackgroundColor = colorDlg.Color;
            //	dataOpenBoundaryConditions.BackgroundColor = colorDlg.Color;
            //	dataSourcesAndSinks.BackgroundColor = colorDlg.Color;
            //	dataWeirs.BackgroundColor = colorDlg.Color;
            //	dataCulverts.BackgroundColor = colorDlg.Color;
            //	dataOutflow.BackgroundColor = colorDlg.Color;
            //	dataTimeQ.BackgroundColor = colorDlg.Color;
            //	dataCrossSection.BackgroundColor = colorDlg.Color;
            //	dataRainfallEvaporation.BackgroundColor = colorDlg.Color;
            //	dataProfile.BackgroundColor = colorDlg.Color;
            //	dataInternalRatingTable.BackgroundColor = colorDlg.Color;

            //	//change color to all panels
            //	panelControlData.BackColor = colorDlg.Color;
            //	panelSedimentTransport.BackColor = colorDlg.Color;
            //	panelGraphicOutput.BackColor = colorDlg.Color;

            //	tabOptions.DrawMode = TabDrawMode.Normal;
            //}

        }

        private void dataInternalRatingTable_RowsRemoved(object sender, DataGridViewRowsRemovedEventArgs e)
        {
            if (!_updating)
            {
                UpdateData(dataInternalRatingTable);
                ColorRepeats(dataInternalRatingTable);
            }
        }

        private void dataInternalRatingTable_RowsAdded(object sender, DataGridViewRowsAddedEventArgs e)
        {
            if (!_updating)
            {
                UpdateData(dataInternalRatingTable);
                ColorRepeats(dataInternalRatingTable);
            }
        }

        private void dataCrossSection_RowEnter(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void dataCrossSection_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Insert)
            {
                dataCrossSection.Rows.Insert(dataCrossSection.CurrentRow.Index);
                ColorRepeats(dataCrossSection);
            }
        }

        private void dataProfile_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Insert)
            {
                dataProfile.Rows.Insert(dataProfile.CurrentRow.Index);
                ColorRepeats(dataProfile);
            }
        }

        private void dataCulverts_KeyDown(object sender, KeyEventArgs e)
        {
            //if (e.KeyCode == Keys.Insert)
            //{
            //  dataCulverts.Rows.Insert(dataCulverts.CurrentRow.Index);
            //  colorRepeats(dataCulverts);
            //}
        }

        private void dataObservationPoints_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Insert)
            {
                dataObservationPoints.Rows.Insert(dataObservationPoints.CurrentRow.Index);
                ColorRepeats(dataObservationPoints);
            }
        }

        private void dataSourcesAndSinks_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Insert)
            {
                dataSourcesAndSinks.Rows.Insert(dataSourcesAndSinks.CurrentRow.Index);
                ColorRepeats(dataSourcesAndSinks);
            }
        }

        private void dataWeirs_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Insert)
            {
                dataWeirs.Rows.Insert(dataWeirs.CurrentRow.Index);
                ColorRepeats(dataWeirs);
            }
        }

        private void dataInternalRatingTable_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Insert)
            {
                dataInternalRatingTable.Rows.Insert(dataInternalRatingTable.CurrentRow.Index);
                ColorRepeats(dataInternalRatingTable);
            }
        }

        private void chckOutputForVectorShapeFile_Validated(object sender, EventArgs e)
        {
            UpdateData(chckOutputForVectorShapeFile);
        }

        private void dataRainfallEvaporation_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Control && e.KeyCode == Keys.C)
            {//Copy to clipboard
                CopySelectionToClipboard(dataRainfallEvaporation);
            }

            else if (e.Control && e.KeyCode == Keys.V)
            {//Paste from clipboard
                PasteClipboardToTable(dataRainfallEvaporation);
            }

            else if (e.KeyCode == Keys.Delete)
            {
            }
        }

        private void DataRainfallEvaporation_Click(object sender, EventArgs e)
        {
            //throw new NotImplementedException();
        }

        private void dataTimeQ_MouseDown(object sender, MouseEventArgs e)
        {

        }

        private void dataOutflow_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Insert)
            {
                dataOutflow.Rows.Insert(dataOutflow.CurrentRow.Index);
                //colorRepeats(dataOutflow);
            }
        }

        private void dataTimeQ_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Insert)
            {
                dataTimeQ.Rows.Insert(dataTimeQ.CurrentRow.Index);
            }
        }

        private void dataPiersDragForces_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Insert)
            {
                dataPiersDragForces.Rows.Insert(dataPiersDragForces.CurrentRow.Index);
                //colorRepeats(dataPiersDragForces);
            }
        }

        private void dataOpenBoundaryConditions_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Insert)
            {
                dataOpenBoundaryConditions.Rows.Insert(dataOpenBoundaryConditions.CurrentRow.Index);
                //colorRepeats(dataOpenBoundaryConditions);
            }


        }

        private void dataRainfallEvaporation_KeyPress(object sender, KeyPressEventArgs e)
        {
            //check if pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
            {
                if (dataRainfallEvaporation.EditingControl.Text.Contains("."))
                    e.Handled = true;
                else
                    e.Handled = false;
            }
            else if (e.KeyChar == (int)Keys.Delete)
                e.Handled = true;
            else
                e.Handled = false;
        }

        private void dataRainfallEvaporation_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            var textBox = e.Control as DataGridViewTextBoxEditingControl;
            textBox.KeyPress -= new KeyPressEventHandler(dataRainfallEvaporation_KeyPress);
            textBox.KeyPress += new KeyPressEventHandler(dataRainfallEvaporation_KeyPress);
        }

        private void dataProfile_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {

            int colIndex = dataProfile.CurrentCell.ColumnIndex;
            if (colIndex >= 1 && colIndex <= 5) //allow numbers
            {
                var textbox = e.Control as DataGridViewTextBoxEditingControl;
                textbox.KeyPress -= new KeyPressEventHandler(dataProfile_KeyPress);
                textbox.KeyPress += new KeyPressEventHandler(dataProfile_KeyPress);
            }
        }

        private void tabOptions_SelectedIndexChanged(object sender, EventArgs e)
        {
            switch (tabOptions.SelectedIndex)
            {
                case 1:
                    picBoxRiverImageFaded.Parent = tabSedimentTransport;
                    break;

                case 2:
                    picBoxRiverImageFaded.Parent = tabRainfallEvaporation;
                    break;

                case 3:
                    picBoxRiverImageFaded.Parent = tabGraphicOutputOptions;
                    break;

                case 4:
                    picBoxRiverImageFaded.Parent = tabProfileCutOutput;
                    break;

                case 5:
                    picBoxRiverImageFaded.Parent = tabCrossSectionOutput;
                    break;

                case 6:
                    picBoxRiverImageFaded.Parent = tabInflowBoundaryData;
                    break;

                case 7:
                    picBoxRiverImageFaded.Parent = tabOutflowBoundaryData;
                    break;

                case 8:
                    picBoxRiverImageFaded.Parent = tabCulvertsData;
                    break;

                case 9:
                    picBoxRiverImageFaded.Parent = tabObservationPoints;
                    break;

                case 10:
                    picBoxRiverImageFaded.Parent = tabPiersDragForces;
                    break;

                case 11:
                    picBoxRiverImageFaded.Parent = tabOpenBoundaryConditions;
                    break;

                case 12:
                    picBoxRiverImageFaded.Parent = tabSourcesAndSinks;
                    break;

                case 13:
                    picBoxRiverImageFaded.Parent = tabWeirsPage;
                    break;

                case 14:
                    picBoxRiverImageFaded.Parent = tabInternalRatingTables;
                    break;

                case 15:
                    picBoxRiverImageFaded.Parent = tabRiverFLO2DPlotter;
                    break;
            }
        }

        private void contextmenuOptions_Opening(object sender, CancelEventArgs e)
        {

        }

        private void btnAbout_Click(object sender, EventArgs e)
        {

			var about = new RiverFlo2DAboutBox();
			about.Text = Universal.Idioma("About RiverFlow2DDIP", "Acerca de RiverFLO2DDIP");
			about.ShowDialog();
		}

        private void txtNSEDSTEP_Validated(object sender, EventArgs e)
        {
            if (txtNSEDSTEP.Text != "") UpdateData(txtNSEDSTEP);

        }

        private void numericUpDownColorScheme_ValueChanged(object sender, EventArgs e)
        {
            pictureBoxColorScheme.Image = imageListColorScheme.Images[Convert.ToInt32(numericUpDownColorScheme.Value) - 1];
            UpdateData(pictureBoxColorScheme);
        }

        private void lblXResolution_Click(object sender, EventArgs e)
        {

        }

        private void radioKML_CheckedChanged(object sender, EventArgs e)
        {
            if (radioKML.Checked)
            {
                groupKMLPlot.Enabled = true;
                groupWMVPlot.Enabled = false;
                radioWMV.Checked = false;
            }
            else
            {
                groupKMLPlot.Enabled = false;
                groupWMVPlot.Enabled = true;
                radioWMV.Checked = true;
            }
        }

        private void chckAnimate_CheckedChanged(object sender, EventArgs e)
        {
            if (chckAnimate.Checked)
            {
                radioDateMappingFile.Enabled = true;
                radioStartDateTime.Enabled = true;
                if (radioDateMappingFile.Checked)
                {
                    btnDateMappingFile.Enabled = true;
                    //txtDateMappingFile.Enabled = true;
                    startDateTimePicker.Enabled = false;
                }
                else
                {
                    btnDateMappingFile.Enabled = false;
                    //txtDateMappingFile.Enabled = false;
                    startDateTimePicker.Enabled = true;
                }
            }
            else
            {
                radioDateMappingFile.Enabled = false;
                radioStartDateTime.Enabled = false;
                btnDateMappingFile.Enabled = false;
                //txtDateMappingFile.Enabled = false;
                radioDateMappingFile.Enabled = false;
                startDateTimePicker.Enabled = false;
            }
        }

        private void tabGraphicOutputOptions_Click(object sender, EventArgs e)
        {

        }

        private void radioDateMappingFile_CheckedChanged(object sender, EventArgs e)
        {
            if (radioDateMappingFile.Checked)
            {
                btnDateMappingFile.Enabled = true;
                //txtDateMappingFile.Enabled = true;
                startDateTimePicker.Enabled = false;
            }
            else
            {
                btnDateMappingFile.Enabled = false;
                //txtDateMappingFile.Enabled = false;
                startDateTimePicker.Enabled = true;
            }
        }

        private void chckShowVelocity_CheckedChanged(object sender, EventArgs e)
        {
            if (chckShowVelocity.Checked)
            {
                txtXResolution.Enabled = true;
                txtYResolution.Enabled = true;
                txtVelocityScale.Enabled = true;
                lblXResolution.Enabled = true;
                lblYResolution.Enabled = true;
                lblVelocityScale.Enabled = true;

            }
            else
            {
                txtXResolution.Enabled = false;
                txtYResolution.Enabled = false;
                txtVelocityScale.Enabled = false;
                lblXResolution.Enabled = false;
                lblYResolution.Enabled = false;
                lblVelocityScale.Enabled = false;
            }

        }

        private void comboParameter_SelectedIndexChanged(object sender, EventArgs e)
        {
            //Enable minBedChange
            if (comboParameter.SelectedIndex == 2)
            {
                txtMidBedChange.Enabled = true;
                lblMidBedChange.Enabled = true;
            }
            else
            {
                txtMidBedChange.Enabled = false;
                lblMidBedChange.Enabled = false;
            }

            //Change file name output
            switch (comboParameter.SelectedIndex)
            {
                case 0:
                    txtFileNameOutput.Text = "WaterSurfElev";
                    break;

                case 1:
                    txtFileNameOutput.Text = "Depth";
                    break;

                case 2:
                    txtFileNameOutput.Text = "BedChange";
                    break;
            }

            UpdateData(txtFileNameOutput);

        }

        private void OpenPlotFile()
        {
            var openFileDialog = new OpenFileDialog
            {
                Filter = "PLOT files (*.PLOT)|*.PLOT",
                InitialDirectory = _currentProjectPath,
                FileName = _currentProjectName + ".PLOT",
                FilterIndex = 1,
                RestoreDirectory = true,
                CheckFileExists = true
            };

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                try
                {
                    _dataManager.LoadPlotFromFile(openFileDialog.FileName);
                    string filenameMBAL = openFileDialog.FileName.Remove(openFileDialog.FileName.Length - 4) + "MBAL";
                    ReadTimesFromMbaLfile(filenameMBAL);
                    UpdateWithPLOTFile();

                    if (txtStartDateTime.Text != "")
                    {
                        DateTime dt = DateTime.Parse(txtStartDateTime.Text);
                        startDateTimePicker.Value = dt;
                    }
                }
                catch
                {
                    MessageBox.Show(Universal.Idioma("ERROR 2304121122: error while reading .PLOT file.", "ERROR 2304121122: error leyendo archivo .PLOT."),
                        "RiverFlow2D", MessageBoxButtons.OK,
                        MessageBoxIcon.Error);
                }

            }
        }

        private void buttonOpenPlotFiles_Click(object sender, EventArgs e)
        {
            OpenPlotFile();
        }

        private void buttonSavePlotFiles_Click(object sender, EventArgs e)
        {
            var saveFileDialog = new SaveFileDialog
            {
                Filter = "PLOT files (*.PLOT)|*.PLOT",
                InitialDirectory = _currentProjectPath,
                FileName = _currentProjectName + ".PLOT",
                FilterIndex = 1,
                RestoreDirectory = true
            };

            if (txtFileNameOutput.Text.Length == 0)
            {
                txtFileNameOutput.Text = "no-name-output-file";
                UpdateData(txtFileNameOutput);
            }
            if (txtDateMappingFile.Text.Length == 0)
            {
                txtDateMappingFile.Text = "no-date-mapping-output-file ";
                UpdateData(txtDateMappingFile);
            }
            if (txtTiffFile.Text.Length == 0)
            {
                txtTiffFile.Text = "no Tiff file";
                UpdateData(txtTiffFile);
            }

            try
            {
                if (saveFileDialog.ShowDialog() == DialogResult.OK) _dataManager.SavePlotToFile(saveFileDialog.FileName);
            }
            catch
            {
                MessageBox.Show(Universal.Idioma("ERROR 230412118: error while saving .PLOT file.", "ERROR 230412118: error almacenando archivo .PLOT."),
                    "RiverFlow2D", MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
            }
        }


        private void panelRiverFLO2DPlotter_Paint(object sender, PaintEventArgs e)
        {

        }

        private void txtFileNameOutput_Validated(object sender, EventArgs e)
        {
            if (txtFileNameOutput.Text != "") UpdateData(txtFileNameOutput);
        }

        private void txtDateMappingFile_Validated(object sender, EventArgs e)
        {
            if (txtDateMappingFile.Text != "") UpdateData(txtDateMappingFile);
        }

        private void txtTiffFile_Validated(object sender, EventArgs e)
        {
            if (txtTiffFile.Text != "") UpdateData(txtTiffFile);
        }

        private void tabRiverFLO2DPlotter_Click(object sender, EventArgs e)
        {

        }

        private void txtMinColor_Validated(object sender, EventArgs e)
        {
            if (txtMinColor.Text != "") UpdateData(txtMinColor);
        }

        private void txtMaxColor_Validated(object sender, EventArgs e)
        {
            if (txtMaxColor.Text != "") UpdateData(txtMaxColor);
        }

        private void txtMidBedChange_Validated(object sender, EventArgs e)
        {
            if (txtMidBedChange.Text != "") UpdateData(txtMidBedChange);
        }

        private void txtXResolution_Validated(object sender, EventArgs e)
        {
            if (txtXResolution.Text != "") UpdateData(txtXResolution);
        }

        private void txtYResolution_Validated(object sender, EventArgs e)
        {
            if (txtYResolution.Text != "") UpdateData(txtYResolution);
        }

        private void txtStart_Validated(object sender, EventArgs e)
        {
            if (txtStart.Text != "") UpdateData(txtStart);
        }

        private void txtEnd_Validated(object sender, EventArgs e)
        {
            if (txtEnd.Text != "") UpdateData(txtEnd);
        }

        private void txtEPSG_Validated(object sender, EventArgs e)
        {
            if (txtEPSG.Text != "") UpdateData(txtEPSG);
        }

        private void startDateTimePicker_Validated(object sender, EventArgs e)
        {
            //if (startDateTimePicker.Text != "") updateData(startDateTimePicker);
            UpdateData(startDateTimePicker);
            txtStartDateTime.Text = startDateTimePicker.Value.ToString();
            UpdateData(txtStartDateTime);
        }

        private void txtNorth_Validated(object sender, EventArgs e)
        {
            if (txtNorth.Text != "") UpdateData(txtNorth);
        }

        private void txtSouth_Validated(object sender, EventArgs e)
        {
            if (txtSouth.Text != "") UpdateData(txtSouth);
        }

        private void txtEast_Validated(object sender, EventArgs e)
        {
            if (txtEast.Text != "") UpdateData(txtEast);
        }

        private void txtWest_Validated(object sender, EventArgs e)
        {
            if (txtWest.Text != "") UpdateData(txtWest);
        }

        private void txtSG_TextChanged(object sender, EventArgs e)
        {

        }

        private void txtMinColor_TextChanged(object sender, EventArgs e)
        {

        }

        private void txtMinColor_KeyPress(object sender, KeyPressEventArgs e)
        {
            //checking whether pressed key is number, decimal, -,  or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b' && e.KeyChar != '-')
                e.Handled = true;
            else if (e.KeyChar == '.')
            {
                //check if there is already a decimal point
                if (txtMinColor.Text.Contains("."))
                    e.Handled = true;
            }
            else if (e.KeyChar == '-')
                //check if there is already a - sign
                if (txtMinColor.Text.Contains("-"))
                    e.Handled = true;
        }

        private void comboParameter_Validated(object sender, EventArgs e)
        {
            UpdateData(comboParameter);
        }


        private void chckShowVelocity_Validated(object sender, EventArgs e)
        {
            UpdateData(chckShowVelocity);
        }

        private void chckAnimate_Validated(object sender, EventArgs e)
        {
            UpdateData(chckAnimate);
        }


        private void radioStartDateTime_Validated(object sender, EventArgs e)
        {
            UpdateData(radioStartDateTime);
            UpdateData(radioDateMappingFile);
        }


        private void txtFramesPerSecond_Validated(object sender, EventArgs e)
        {
            UpdateData(txtFramesPerSecond);
        }

        private void txtFramesPerSecond_TextChanged(object sender, EventArgs e)
        {

        }

        private void radioWMV_Validated(object sender, EventArgs e)
        {
            UpdateData(radioWMV);
            UpdateData(radioKML);
        }

        private void radioKML_Validated(object sender, EventArgs e)
        {
            UpdateData(radioKML);
            UpdateData(radioWMV);
        }

        private void radioWMV_CheckedChanged(object sender, EventArgs e)
        {
            if (radioKML.Checked)
            {
                groupKMLPlot.Enabled = true;
                groupWMVPlot.Enabled = false;
                radioWMV.Checked = false;
            }
            else
            {
                groupKMLPlot.Enabled = false;
                groupWMVPlot.Enabled = true;
                radioWMV.Checked = true;
            }
        }

        private void radioDateMappingFile_Validated(object sender, EventArgs e)
        {
            UpdateData(radioDateMappingFile);
            UpdateData(radioStartDateTime);
        }

        private void comboGMTOffset_Validated(object sender, EventArgs e)
        {
            UpdateData(comboGMTOffset);
        }


        private void btnDateMappingFile_Click(object sender, EventArgs e)
        {
            var openFileDialog = new OpenFileDialog { InitialDirectory = _currentProjectPath };
            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                txtDateMappingFile.Text = Path.GetFullPath(openFileDialog.FileName);
                // Go to end of text
                txtDateMappingFile.Select(txtDateMappingFile.Text.Length, 0);
                UpdateData(txtDateMappingFile);
            }
        }

        private void buttonTiffFile_Click(object sender, EventArgs e)
        {
            var openFileDialog = new OpenFileDialog
            {
                Filter = "TIF files (*.TIF)|*.TIF|TIFF files (*.TIFF)|*.TIFF",
                InitialDirectory = _currentProjectPath,
                FilterIndex = 1,
                RestoreDirectory = true,
                CheckFileExists = true
            };

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                try
                {
                    using (System.Drawing.Image objImage = System.Drawing.Image.FromFile(openFileDialog.FileName))
                    {
                        int numberOfPixelsX = objImage.Width;
                        int numberOfPixelsY = objImage.Height;

                        string fileName = openFileDialog.SafeFileName;
                        int extensionPos = fileName.IndexOfAny(new char[] { '.' });
                        fileName = fileName.Remove(extensionPos);

                        string extension = openFileDialog.SafeFileName.Substring(extensionPos + 1);

                        string directoryPath = openFileDialog.FileName;
                        directoryPath = directoryPath.Remove(directoryPath.LastIndexOf(openFileDialog.SafeFileName));

                        if (directoryPath != "" && fileName != "")
                        {
                            //Generate the path of the world file
                            string worldFile = directoryPath + fileName;
                            switch (extension.ToLower())
                            {
                                case "tif":
                                    worldFile += ".tfw";
                                    break;
                                case "gif":
                                    worldFile += ".gfw";
                                    break;
                                default:
                                    return;
                            }

                            if (File.Exists(worldFile))
                            {
                                StreamReader s = File.OpenText(worldFile);

                                //Read pixel size in X
                                string line;
                                do
                                {
                                    line = s.ReadLine();
                                } while (line == "");
                                double dx = Convert.ToDouble(line);


                                //Read rotation in X and Y
                                do
                                {
                                    line = s.ReadLine();
                                } while (line == "");
                                double rotationX = Convert.ToDouble(line);
                                do
                                {
                                    line = s.ReadLine();
                                } while (line == "");
                                double rotationY = Convert.ToDouble(line);

                                //Read pixel size in Y
                                do
                                {
                                    line = s.ReadLine();
                                } while (line == "");
                                double dy = -Convert.ToDouble(line);

                                //Read coord of left-most pixel
                                do
                                {
                                    line = s.ReadLine();
                                } while (line == "");
                                double left = Convert.ToDouble(line);

                                //Read coord of upper-most pixel
                                do
                                {
                                    line = s.ReadLine();
                                } while (line == "");
                                double top = Convert.ToDouble(line);

                                // Calculate extreme coordinates

                                double x1 = left - dx / 2;
                                double y1 = top - dy / 2;
                                double x2 = x1;
                                double y2 = y1 - numberOfPixelsY * dy;
                                double x3 = x2 + numberOfPixelsX * dx;
                                double y3 = y2;
                                double x4 = x3;
                                double y4 = y1;


                                txtNorth.Text = y1.ToString("#.##");
                                txtSouth.Text = y3.ToString("#.##");
                                txtWest.Text = x1.ToString("#.##");
                                txtEast.Text = x3.ToString("#.##");

                                UpdateData(txtNorth);
                                UpdateData(txtSouth);
                                UpdateData(txtWest);
                                UpdateData(txtEast);

                                // Update textbox
                                txtTiffFile.Text = Path.GetFullPath(openFileDialog.FileName);
                                // Go to end of text
                                txtTiffFile.Select(txtTiffFile.Text.Length, 0);
                                UpdateData(txtTiffFile);
                            }
                            else
                            {
                                MessageBox.Show(Universal.Idioma("The world file " + worldFile + " could not be found.", ""), 
                                    "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            }

                        }
                    }
                }
                catch (System.Exception)
                {
                    MessageBox.Show(Universal.Idioma("File selected is not an image.", "El archivo seleccionado no es una imagen."), 
                        "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }


            }
        }

        private void txtMaxColor_TextChanged(object sender, EventArgs e)
        {

        }

        private void txtMaxColor_KeyPress(object sender, KeyPressEventArgs e)
        {
            //checking whether pressed key is number, decimal, -,  or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b' && e.KeyChar != '-')
                e.Handled = true;
            else if (e.KeyChar == '.')
            {
                //check if there is already a decimal point
                if (txtMaxColor.Text.Contains("."))
                    e.Handled = true;
            }
            else if (e.KeyChar == '-')
                //check if there is already a - sign
                if (txtMaxColor.Text.Contains("-"))
                    e.Handled = true;
        }

        private void txtXResolution_TextChanged(object sender, EventArgs e)
        {

        }

        private void txtXResolution_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = CheckForReal(txtXResolution, e);
        }

        private void txtYResolution_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = CheckForReal(txtYResolution, e);
        }

        private void txtMidBedChange_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = CheckForReal(txtMidBedChange, e);
        }

        private void txtEPSG_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = CheckForInteger(txtEPSG, e);
        }

        private void txtNorth_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = CheckForReal(txtNorth, e);
        }

        private void txtSouth_TextChanged(object sender, EventArgs e)
        {

        }

        private void txtSouth_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = CheckForReal(txtSouth, e);
        }

        private void txtEast_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = CheckForReal(txtEast, e);
        }

        private void txtWest_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = CheckForReal(txtWest, e);
        }

        private void txtStart_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = CheckForReal(txtStart, e);
        }

        private void txtEnd_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = CheckForReal(txtEnd, e);
        }

        private void txtFramesPerSecond_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = CheckForInteger(txtFramesPerSecond, e);
        }

        private void btnRunRiverPlotter_Click(object sender, EventArgs e)
        {
            if (!ValidatePlotVariables())
                MessageBox.Show(_plotterWarnings, "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
            else
            {
                var saveFileDialog = new SaveFileDialog
                {
                    Filter = "PLOT files (*.PLOT)|*.PLOT",
                    FileName = _currentProjectPathAndName + ".PLOT",
                    InitialDirectory = _currentProjectPath,
                    FilterIndex = 1,
                    RestoreDirectory = true
                };

                if (saveFileDialog.ShowDialog() == DialogResult.OK)
                {
                    try
                    {
                        _dataManager.SavePlotToFile(saveFileDialog.FileName);
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(Universal.Idioma("ERROR 2704120453: error saving . ", "ERROR 2704120453: error almacenando . ") +
                            ex.Message, "RiverFlow2D", MessageBoxButtons.OK,
                            MessageBoxIcon.Error);
                        return;
                    }
                    ;

                    // Save .INSET file with currentProjectPathAndName
                    TextWriter inset = new StreamWriter(_currentProjectPathAndName + ".INSET");
                    inset.WriteLine(txtNorth.Text);
                    inset.WriteLine(txtSouth.Text);
                    inset.WriteLine(txtEast.Text);
                    inset.WriteLine(txtWest.Text);
                    inset.Close();

                    string KML_or_WMV_fileAndPath;

                    UpdateData(txtStartDateTime);

                    //extract day, month, year, hour,minute from DateTimePicker
                    int day = startDateTimePicker.Value.Day;
                    int month = startDateTimePicker.Value.Month;
                    int year = startDateTimePicker.Value.Year;
                    int hour = startDateTimePicker.Value.Hour;
                    int minute = startDateTimePicker.Value.Minute;
                    string startDateTime = year.ToString().Trim() + "," +
                                           month.ToString().Trim() + "," +
                                           day.ToString().Trim() + "," +
                                           hour.ToString().Trim() + "," +
                                           minute.ToString().Trim();

                    // Save KML.TXT file or WMV.TXT file
                    if (radioKML.Checked)
                    {
                        var saveKMLDialog = new SaveFileDialog
                        {
                            Filter = "KML.TXT file (KML.TXT)|KML.TXT",
                            FileName = "KML.TXT",
                            FilterIndex = 1,
                            RestoreDirectory = true
                        };

                        if (saveKMLDialog.ShowDialog() == DialogResult.Cancel)
                            return;
                        else
                        {
                            KML_or_WMV_fileAndPath = saveKMLDialog.FileName;
                            TextWriter w = new StreamWriter(saveKMLDialog.FileName);
                            w.WriteLine("[Project]");
                            w.WriteLine("RiverFlow2DVersion=4.0");
                            w.WriteLine("Directory=" + _currentProjectPath + "\\" + _currentProjectName);
                            w.WriteLine("XYZInFEDFileAreFeet=" + radioEnglish.Checked);

                            if (radioEnglish.Checked)
                                w.WriteLine("OutputUnits=English");
                            else
                                w.WriteLine("OutputUnits=Metric");

                            w.WriteLine(" ");
                            w.WriteLine("[KMLPlot]");
                            w.WriteLine("Filename=" + txtFileNameOutput.Text);
                            w.WriteLine("colorMin=" + txtMinColor.Text);
                            w.WriteLine("colorMax=" + txtMaxColor.Text);
                            w.WriteLine("Parameter=" + comboParameter.Text);
                            w.WriteLine("MinBedChange=" + txtMidBedChange.Text);

                            string showVelocity;
                            if (chckShowVelocity.Checked) showVelocity = "True";
                            else showVelocity = "False";

                            w.WriteLine("ShowVelocity=" + showVelocity);
                            w.WriteLine("velocityXresolution=" + txtXResolution.Text);
                            w.WriteLine("velocityYresolution=" + txtYResolution.Text);
                            w.WriteLine("VelocityScale=" + txtVelocityScale.Text);
                            w.WriteLine("TimestepRangeStart=" + txtStart.Text);
                            w.WriteLine("TimestepRangeEnd=" + txtEnd.Text);
                            w.WriteLine("Inset=" + _currentProjectName + ".INSET");

                            w.WriteLine("GMTOffset=" + comboGMTOffset.Text);
                            w.WriteLine("EPSG=" + txtEPSG.Text);

                            string animate;
                            if (chckAnimate.Checked) animate = "True";
                            else animate = "False";
                            w.WriteLine("Animate=" + animate);

                            if (chckShowVelocity.Checked && radioDateMappingFile.Checked)
                            {
                                if ((txtDateMappingFile.Text.Trim() == "") || (txtDateMappingFile.Text.Trim() == "no-date-mapping-output-file"))
                                {
                                } //do not write it
                                else w.WriteLine("DateMappingFile=" + txtDateMappingFile.Text);
                            }
                            else if (chckShowVelocity.Checked && radioStartDateTime.Checked)
                                w.WriteLine("StartDateTime=" + startDateTime);

                            w.Close();
                        }

                    }
                    else if (radioWMV.Checked)
                    {
                        var saveWMVDialog = new SaveFileDialog
                        {
                            Filter = "WMV.TXT file (WMV.TXT)|WMV.TXT",
                            FileName = "WMV.TXT",
                            FilterIndex = 1,
                            RestoreDirectory = true
                        };

                        if (saveWMVDialog.ShowDialog() == DialogResult.Cancel)
                            return;
                        else
                        {
                            KML_or_WMV_fileAndPath = saveWMVDialog.FileName;
                            TextWriter w = new StreamWriter(saveWMVDialog.FileName);
                            w.WriteLine("[Project]");
                            w.WriteLine("RiverFlow2DVersion=4.0");
                            //w.WriteLine("Directory=" + txtProjectDirectory.Text);
                            //w.WriteLine("XYZInFEDFileAreFeet=" + comboXYZUnits.Text);
                            //w.WriteLine("OutputUnits=" + comboOutputUnits.Text);
                            w.WriteLine("Directory=" + _currentProjectPath + "\\" + _currentProjectName);
                            w.WriteLine("XYZInFEDFileAreFeet=" + radioEnglish.Checked);

                            if (radioEnglish.Checked)
                                w.WriteLine("OutputUnits=English");
                            else
                                w.WriteLine("OutputUnits=Metric");

                            w.WriteLine(" ");
                            w.WriteLine("[WMVPlot]");
                            w.WriteLine("Filename=" + txtFileNameOutput.Text);
                            w.WriteLine("colorMin=" + txtMinColor.Text);
                            w.WriteLine("colorMax=" + txtMaxColor.Text);
                            w.WriteLine("Parameter=" + comboParameter.Text);
                            w.WriteLine("MinBedChange=" + txtMidBedChange.Text);

                            string showVelocity;
                            if (chckShowVelocity.Checked) showVelocity = "True";
                            else showVelocity = "False";

                            w.WriteLine("ShowVelocity=" + showVelocity);
                            w.WriteLine("velocityXresolution=" + txtXResolution.Text);
                            w.WriteLine("velocityYresolution=" + txtYResolution.Text);
                            w.WriteLine("VelocityScale=" + txtVelocityScale.Text);
                            w.WriteLine("TimestepRangeStart=" + txtStart.Text);
                            w.WriteLine("TimestepRangeEnd=" + txtEnd.Text);
                            w.WriteLine("Inset=" + _currentProjectName + ".INSET");

                            w.WriteLine("tiff=" + txtTiffFile.Text);
                            w.WriteLine("tiffNorth=" + txtNorth.Text);
                            w.WriteLine("tiffSouth=" + txtSouth.Text);
                            w.WriteLine("tiffEast=" + txtEast.Text);
                            w.WriteLine("tiffWest=" + txtWest.Text);
                            w.WriteLine("Fps=" + txtFramesPerSecond.Text);
                            w.Close();
                        }
                    }
                    else
                    {
                        MessageBox.Show(Universal.Idioma("KML or WMV radio button must be checked.", ""), 
                            "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return;
                    }
                    ;

                    //Run RiverAnimator.exe
                    try
                    {
                        //string filePathAndName = Application.StartupPath + "\\RiverAnimator\\RiverAnimator.exe";
                        string filePathAndName = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles) +
                                                 "\\RiverAnimator\\RiverAnimator.exe";

                        bool fileExists = File.Exists(filePathAndName);

                        if (!fileExists)
                        {
                            filePathAndName = Environment.GetEnvironmentVariable("PROGRAMFILES(x86)") +
                                              "\\RiverAnimator\\RiverAnimator.exe";
                            fileExists = File.Exists(filePathAndName);
                        }

                        if (!fileExists)
                        {
                            if (DialogResult.OK ==
                                MessageBox.Show(Universal.Idioma("RiverAnimator.exe file could not be found.\nPlease, search for a directory to find it.", ""),
                                    "RiverFlow2D", MessageBoxButtons.OKCancel, MessageBoxIcon.Exclamation))
                            {

                                var openFileDialog = new OpenFileDialog
                                {
                                    Filter = "RiverAnimator.exe file (*.exe)|*.exe",
                                    FileName = "RiverAnimator.exe",
                                    FilterIndex = 1,
                                    RestoreDirectory = true,
                                    CheckFileExists = true
                                };

                                if (openFileDialog.ShowDialog() == DialogResult.OK)
                                {
                                    filePathAndName = openFileDialog.FileName;
                                    fileExists = true;
                                }
                            }

                        }

                        if (fileExists)
                        {
                            var runPlotter = new System.Diagnostics.ProcessStartInfo(filePathAndName)
                            {
                                Arguments = '"' + KML_or_WMV_fileAndPath + '"',
                                RedirectStandardOutput = false,
                                WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden,
                                UseShellExecute = false
                            };
                            Process diagnosis = System.Diagnostics.Process.Start(runPlotter);
                            diagnosis.Close();

                        }
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(Universal.Idioma("ERROR 2704120427: error running RiverAnimator. ", "ERROR 2704120427: error corriendo RiverAnimator. ") +
                            ex.Message, "RiverFlow2D",
                            MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }

                    //////try
                    //////{
                    //////  string filePathAndName = Application.StartupPath + "\\RunRiverAnimator.bat";
                    //////  bool fileExists = File.Exists(filePathAndName);
                    //////  if (!fileExists)
                    //////  {
                    //////    if (DialogResult.OK == MessageBox.Show(Universal.Idioma("RunRiverAnimator.bat file could not be found.\nPlease, search for a directory to find it.",
                    //////                     "RiverFlow2D", MessageBoxButtons.OKCancel, MessageBoxIcon.Exclamation))
                    //////    {

                    //////      OpenFileDialog openFileDialog = new OpenFileDialog();
                    //////      openFileDialog.Filter = "RunRiverAnimator.bat file (*.bat)|*.bat";
                    //////      openFileDialog.FileName = "RunRiverAnimator.bat";
                    //////      openFileDialog.FilterIndex = 1;
                    //////      openFileDialog.RestoreDirectory = true;
                    //////      openFileDialog.CheckFileExists = true;

                    //////      if (openFileDialog.ShowDialog() == DialogResult.OK)
                    //////      {
                    //////        filePathAndName = openFileDialog.FileName;
                    //////        fileExists = true;
                    //////      }
                    //////    }

                    //////  }

                    //////  if (fileExists)
                    //////  {
                    //////    System.Diagnostics.ProcessStartInfo runPlotter = new System.Diagnostics.ProcessStartInfo(filePathAndName);
                    //////    //runPlotter.Arguments = ">RunPlotterDiagnosis.txt";
                    //////    runPlotter.Verb = "runas /user:domain\administrator";
                    //////    //runPlotter.UserName = "Administrator";
                    //////    runPlotter.Arguments = KML_or_WMV_fileAndPath;
                    //////    runPlotter.RedirectStandardOutput = true;
                    //////    runPlotter.RedirectStandardError = true;
                    //////    runPlotter.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                    //////    runPlotter.UseShellExecute = false;
                    //////    System.Diagnostics.Process diagnosis;
                    //////    diagnosis = System.Diagnostics.Process.Start(runPlotter);
                    //////    System.IO.StreamReader myOutput = diagnosis.StandardOutput;
                    //////    diagnosis.WaitForExit(2000);
                    //////    if (diagnosis.HasExited)
                    //////    {
                    //////      string output = myOutput.ReadToEnd();
                    //////    }
                    //////  }
                    //////}
                    //////catch (Exception ex)
                    //////{
                    //////  MessageBox.Show(Universal.Idioma("ERROR 2704120427: error running RiverAnimator. " + ex.Message, "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    //////}

                }
            }
        }

        private bool ValidatePlotVariables()
        {
            _plotterWarnings = "";

            if (txtFileNameOutput.Text == "")
                _plotterWarnings += "\n" + "° File name output is empty.";

            if (txtFileNameOutput.Text == "no-name-output-file")
                _plotterWarnings += "\n" + "° File name output is not valid.";

            if (txtMinColor.Text == "")
                _plotterWarnings += "\n" + "° Min value is empty.";

            if (txtMaxColor.Text == "")
                _plotterWarnings += "\n" + "° Max value is empty.";

            if (comboParameter.SelectedIndex == 2)
                if (txtMidBedChange.Text == "")
                    _plotterWarnings += "\n" + "° Min bed change value is empty.";

            if (txtMinColor.Text != "" && txtMaxColor.Text != "" &&
                (Convert.ToDouble(txtMinColor.Text) >= Convert.ToDouble(txtMaxColor.Text)))
                _plotterWarnings += "\n" + "° Min color output option is larger than Max color output option.";

            if (chckShowVelocity.Checked)
            {
                if (txtXResolution.Text == "")
                    _plotterWarnings += "\n" + "° X resolution is empty.";

                if (txtYResolution.Text == "")
                    _plotterWarnings += "\n" + "° Y resolution is empty.";
            }

            if (txtStart.Text == "")
                _plotterWarnings += "\n" + "° Time step start is empty.";

            if (txtEnd.Text == "")
                _plotterWarnings += "\n" + "° Time step end is empty.";

            if (txtStart.Text != "" && txtEnd.Text != "")
                if (Convert.ToDouble(txtStart.Text) >= Convert.ToDouble(txtEnd.Text))
                    _plotterWarnings += "\n" + "° Time step end must be larger than time step start.";

            if (radioKML.Checked)
            {
                if (chckAnimate.Checked)
                    if (radioDateMappingFile.Checked)
                    {
                        if (txtDateMappingFile.Text == "")
                            _plotterWarnings += "\n" + "° Date mapping file name is empty.";
                    }
                    else if (startDateTimePicker.Text == "")
                        _plotterWarnings += "\n" + "° Start date time is empty.";
            }
            else if (radioWMV.Checked)
            {
                if (txtTiffFile.Text == "")
                    _plotterWarnings += "\n" + "° Tiff file name is empty.";

                if (txtNorth.Text == "")
                    _plotterWarnings += "\n" + "° North coordinate is empty.";

                if (txtSouth.Text == "")
                    _plotterWarnings += "\n" + "° South coordinate is empty.";

                if (txtEast.Text == "")
                    _plotterWarnings += "\n" + "° East coordinate is empty.";

                if (txtWest.Text == "")
                    _plotterWarnings += "\n" + "° West coordinate is empty.";

                if (txtFramesPerSecond.Text == "")
                    _plotterWarnings += "\n" + "° Frames per second is empty.";
            }

            else
            {
                MessageBox.Show(Universal.Idioma("KML or WMV radio button must be checked.", ""),
                    "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return false;
            }

            if (_plotterWarnings == "")
                return true;
            else
                return false;

        }


        private void pictureBoxColorScheme_Click(object sender, EventArgs e)
        {

        }

        private void pictureBoxColorScheme_Validated(object sender, EventArgs e)
        {
            UpdateData(pictureBoxColorScheme);
        }

        private void txtStartDateTime_Validated(object sender, EventArgs e)
        {
            UpdateData(txtStartDateTime);
        }

        private void startDateTimePicker_ValueChanged(object sender, EventArgs e)
        {
            txtStartDateTime.Text = startDateTimePicker.Value.ToString();
            UpdateData(txtStartDateTime);
        }

        private void dataWeirs_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            //e.Control.KeyPress += new KeyPressEventHandler(txtbox_KeyPress);
        }

        private void dataInternalRatingTable_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void dataOpenBoundaryConditions_EditingControlShowing(object sender,
            DataGridViewEditingControlShowingEventArgs e)
        {
        }

        private void txtFileNameOutput_TextChanged(object sender, EventArgs e)
        {

        }

        private void txtVelocityScale_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = CheckForReal(txtVelocityScale, e);
        }

        private void txtVelocityScale_Validated(object sender, EventArgs e)
        {
            if (txtVelocityScale.Text != "") UpdateData(txtVelocityScale);
        }

        private void txtVelocityScale_TextChanged(object sender, EventArgs e)
        {

        }

        private void txtEPSG_TextChanged(object sender, EventArgs e)
        {

        }


        private void btnRun2dMRI_Click(object sender, EventArgs e)
        {
            //Run 2dMRI
            try
            {
                string filePathAndName = Application.StartupPath + "\\2dMRI.exe";
                bool fileExists = File.Exists(filePathAndName);
                if (!fileExists)
                {
                    if (DialogResult.OK ==
                        MessageBox.Show(Universal.Idioma("2dMRI.exe file could not be found.\nPlease, search for a directory to find it.", ""),
                            "RiverFlow2D", MessageBoxButtons.OKCancel, MessageBoxIcon.Exclamation))
                    {

                        var openFileDialog = new OpenFileDialog
                        {
                            Filter = "2dMRI.exe file (*.exe)|*.exe",
                            FileName = "2dMRI.exe",
                            FilterIndex = 1,
                            RestoreDirectory = true,
                            CheckFileExists = true
                        };

                        if (openFileDialog.ShowDialog() == DialogResult.OK)
                        {
                            filePathAndName = openFileDialog.FileName;
                            fileExists = true;
                        }
                    }

                }

                if (fileExists)
                {
                    var run2dMRI = new System.Diagnostics.ProcessStartInfo(filePathAndName)
                    {
                        RedirectStandardOutput = true,
                        WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden,
                        UseShellExecute = false
                    };
                    Process diagnosis = System.Diagnostics.Process.Start(run2dMRI);
                    System.IO.StreamReader myOutput = diagnosis.StandardOutput;
                    diagnosis.WaitForExit();
                    diagnosis.Close();
                    //if (diagnosis.HasExited)
                    //{
                    //  string output = myOutput.ReadToEnd();
                    //}
                }


            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 2409120927: error running 2dMRI. ", "ERROR 2409120927: error corriendo 2dMRI. ") +
                    ex.Message, "RiverFlow2D", MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
            }
        }

        private void richTxtHydronia_LinkClicked(object sender, LinkClickedEventArgs e)
        {
            System.Diagnostics.Process.Start(e.LinkText);
        }

        private void richTxtHydronia_KeyDown(object sender, KeyEventArgs e)
        {
            e.SuppressKeyPress = true;
        }

        private void iwetdryc_CheckedChanged(object sender, EventArgs e)
        {
            //UpdateData(iwetdryc); //iwetdry = 3;
        }

        private void trackBarTransparency_ValueChanged(object sender, EventArgs e)
        {
            txtTransparency.Text = trackBarTransparency.Value.ToString();
            UpdateData(txtTransparency);
        }

        private void txtTransparency_TextChanged(object sender, EventArgs e)
        {

            trackBarTransparency.Value = Convert.ToInt32(txtTransparency.Text);
        }

        private void txtTransparency_Validated(object sender, EventArgs e)
        {
            if (txtTransparency.Text != "") UpdateData(txtTransparency);

        }

        private void btnBackgroundImage_Click(object sender, EventArgs e)
        {
            var openFileDialog = new OpenFileDialog
            {
                InitialDirectory = _currentProjectPath,
                Filter = "GIF/BMP/PNG/TIFF/TIF files (*.GIF;*.BMP;*.PNG;*.TIFF;*.TIF)|*.GIF;*.BMP;*.PNG;*.TIFF;*.TIF",
                FilterIndex = 1
            };

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                string fileName = openFileDialog.FileName;
                string worldFile = "";

                //Find world file
                if (fileName.ToUpper().Contains(".GIF"))
                {
                    worldFile = fileName.Remove(fileName.Length - 3) + "GFW";
                    if (!File.Exists(worldFile))
                    {
                        worldFile = fileName.Remove(fileName.Length - 3) + "GIFW";
                        if (!File.Exists(worldFile))
                        {
                            worldFile = fileName.Remove(fileName.Length - 3) + "WLD";
                            if (!File.Exists(worldFile))
                                worldFile = "";
                            else worldFile = "WLD";
                        }
                        else worldFile = "GIFW";
                    }
                    else worldFile = "GFW";
                }
                else if (fileName.ToUpper().Contains(".BMP"))
                {
                    worldFile = fileName.Remove(fileName.Length - 3) + "BMPW";
                    if (!File.Exists(worldFile))
                    {
                        worldFile = fileName.Remove(fileName.Length - 3) + "BPW";
                        if (!File.Exists(worldFile))
                            worldFile = "";
                        else worldFile = "BPW";
                    }
                    else worldFile = "BMPW";
                }
                else if (fileName.ToUpper().Contains(".TIFF"))
                {
                    worldFile = fileName.Remove(fileName.Length - 4) + "TFW";
                    if (!File.Exists(worldFile))
                    {
                        worldFile = fileName.Remove(fileName.Length - 4) + "WLD";
                        if (!File.Exists(worldFile))
                            worldFile = "";
                        else worldFile = "WLD";
                    }
                    else worldFile = "TFW";
                }
                else if (fileName.ToUpper().Contains(".TIF"))
                {
                    worldFile = fileName.Remove(fileName.Length - 3) + "TFW";
                    if (!File.Exists(worldFile))
                    {
                        worldFile = fileName.Remove(fileName.Length - 3) + "WLD";
                        if (!File.Exists(worldFile))
                            worldFile = "";
                        else worldFile = "WLD";
                    }
                    else worldFile = "TFW";
                }
                else if (fileName.ToUpper().Contains(".PNG"))
                {
                    worldFile = fileName.Remove(fileName.Length - 3) + "PGW";
                    if (!File.Exists(worldFile))
                    {
                        worldFile = fileName.Remove(fileName.Length - 3) + "PNGW";
                        if (!File.Exists(worldFile))
                        {
                            worldFile = fileName.Remove(fileName.Length - 3) + "WLD";
                            worldFile = !File.Exists(worldFile) ? "" : "WLD";
                        }
                        else worldFile = "PNGW";
                    }
                    else worldFile = "PGW";
                }

                if (worldFile != "")
                {
                    txtBackgroundImage.Text = Path.GetFullPath(fileName);
                    // Go to end of text
                    txtBackgroundImage.Select(txtBackgroundImage.Text.Length, 0);
                    UpdateData(txtBackgroundImage);

                    if (fileName.ToUpper().Contains(".TIFF"))
                        txtWorldFile.Text = txtBackgroundImage.Text.Remove(fileName.Length - 4) + worldFile;
                    else
                        txtWorldFile.Text = txtBackgroundImage.Text.Remove(fileName.Length - 3) + worldFile;
                    UpdateData(txtWorldFile);
                }
                else
                    MessageBox.Show(Universal.Idioma("World file is missing.", ""), 
                        "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);

            }
        }

        private void txtBackgroundImage_Validated(object sender, EventArgs e)
        {
            if (txtBackgroundImage.Text == "")
                txtBackgroundImage.Text = "(no file)";
            UpdateData(txtBackgroundImage);
        }

        private void txtWorldFile_TextChanged(object sender, EventArgs e)
        {

        }

        private void chckBackgroundImage_Click(object sender, EventArgs e)
        {
            if (chckBackgroundImage.Checked)
            {
                btnBackgroundImage.Enabled = true;
                //txtBackgroundImage.Enabled = true;
                labelTransparency.Enabled = true;
                trackBarTransparency.Enabled = true;
                txtTransparency.Enabled = true;
            }
            else
            {
                btnBackgroundImage.Enabled = false;
                //txtBackgroundImage.Enabled = false;
                labelTransparency.Enabled = false;
                trackBarTransparency.Enabled = false;
                txtTransparency.Enabled = false;
            }
        }

        private void chckBackgroundImage_CheckedChanged(object sender, EventArgs e)
        {
            Enable_or_Disable_BackgroundImage();
        }

        private void Enable_or_Disable_BackgroundImage()
        {
            if (chckBackgroundImage.Checked)
            {
                btnBackgroundImage.Enabled = true;
                //txtBackgroundImage.Enabled = true;
                labelTransparency.Enabled = true;
                trackBarTransparency.Enabled = true;
                txtTransparency.Enabled = true;
            }
            else
            {
                btnBackgroundImage.Enabled = false;
                //txtBackgroundImage.Enabled = false;
                labelTransparency.Enabled = false;
                trackBarTransparency.Enabled = false;
                txtTransparency.Enabled = false;
            }
        }

        private void chckBackgroundImage_Validated(object sender, EventArgs e)
        {
            UpdateData(chckBackgroundImage);
        }

        private void txtDateMappingFile_TextChanged(object sender, EventArgs e)
        {

        }

        private void txtTiffFile_TextChanged(object sender, EventArgs e)
        {

        }

        private void txtBackgroundImage_TextChanged(object sender, EventArgs e)
        {
            UpdateData(txtBackgroundImage);
        }

        private void comboCulvertManning_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (dataCulverts.CurrentCell != null)
            //if false do not enter block because dataCulverts is not loaded yet
            {
                //change comboManningSelectionIndex in culvervalues 
                int index = dataCulverts.CurrentCell.RowIndex;
                string culvertfileName = _currentProjectPath + "\\" + dataCulverts.Rows[index].Cells[2].Value.ToString();
                if (Universal.CulvertValuesGroups.ContainsKey(culvertfileName))
                {
                    Universal.CulvertValuesGroup aCulvert = Universal.CulvertValuesGroups[culvertfileName];
                    aCulvert.ComboManningSelectionIndex = comboCulvertManning.SelectedIndex;
                    Universal.CulvertValuesGroups[culvertfileName] = aCulvert;
                }
            }

            switch (comboCulvertManning.SelectedIndex)
            {
                case 0:
                    //user defined
                    break;

                case 1:
                    txtCulvertManning.Text = "0.012";
                    break;

                case 2:
                    txtCulvertManning.Text = "0.015";
                    break;

                case 3:
                    txtCulvertManning.Text = "0.017";
                    break;

                case 4:
                    txtCulvertManning.Text = "0.025";
                    break;

                case 5:
                    txtCulvertManning.Text = "0.024";
                    break;

                case 6:
                    txtCulvertManning.Text = "0.026";
                    break;

                case 7:
                    txtCulvertManning.Text = "0.028";
                    break;

                case 8:
                    txtCulvertManning.Text = "0.034";
                    break;

                case 9:
                    txtCulvertManning.Text = "0.035";
                    break;

            }

        }

        private void comboEntranceLossCoefficient_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (dataCulverts.CurrentCell != null)
            //if false do not enter block because dataCulverts is not loaded yet
            {
                //change comboEntranceLossCoefficient in culvervalues 
                int index = dataCulverts.CurrentCell.RowIndex;
                string culvertfileName = _currentProjectPath + "\\" + dataCulverts.Rows[index].Cells[2].Value.ToString();
                if (Universal.CulvertValuesGroups.ContainsKey(culvertfileName))
                {
                    Universal.CulvertValuesGroup aCulvert = Universal.CulvertValuesGroups[culvertfileName];
                    aCulvert.ComboEntranceLossSelectionIndex = comboEntranceLossCoefficient.SelectedIndex;
                    Universal.CulvertValuesGroups[culvertfileName] = aCulvert;
                }
            }


            //if (Universal.EnableTextChangedEvent) //if false do not enter block because dataCulverts is not loaded yet
            //{
            //	//change comboEntranceLossSelectionIndex in culvervalues 
            //	int index = dataCulverts.CurrentCell.RowIndex;
            //	string culvertfileName = _currentProjectPath + "\\" + dataCulverts.Rows[index].Cells[2].Value.ToString();
            //	if (Universal.CulvertValuesGroups.ContainsKey(culvertfileName))
            //	{
            //		Universal.CulvertValuesGroup aCulvert = Universal.CulvertValuesGroups[culvertfileName];
            //		aCulvert.ComboEntranceLossSelectionIndex = comboEntranceLossCoefficient.SelectedIndex;
            //		Universal.CulvertValuesGroups[culvertfileName] = aCulvert;
            //	}
            //}
            //;

            switch (comboEntranceLossCoefficient.SelectedIndex)
            {
                case 0:
                    //user defined
                    break;

                case 1:
                    txtEntranceLossCoefficient.Text = "0.2";
                    break;

                case 2:
                    txtEntranceLossCoefficient.Text = "0.5";
                    break;

                case 3:
                    txtEntranceLossCoefficient.Text = "0.2";
                    break;

                case 4:
                    txtEntranceLossCoefficient.Text = "0.5";
                    break;

                case 5:
                    txtEntranceLossCoefficient.Text = "0.1";
                    break;

                case 6:
                    txtEntranceLossCoefficient.Text = "0.7";
                    break;

                case 7:
                    txtEntranceLossCoefficient.Text = "0.5";
                    break;

                case 8:
                    txtEntranceLossCoefficient.Text = "0.7";
                    break;

                case 9:
                    txtEntranceLossCoefficient.Text = "0.9";
                    break;

                case 10:
                    txtEntranceLossCoefficient.Text = "0.5";
                    break;

                case 11:
                    txtEntranceLossCoefficient.Text = "0.7";
                    break;

                case 12:
                    txtEntranceLossCoefficient.Text = "0.5";
                    break;

                case 13:
                    txtEntranceLossCoefficient.Text = "0.7";
                    break;

                case 14:
                    txtEntranceLossCoefficient.Text = "0.5";
                    break;

                case 15:
                    txtEntranceLossCoefficient.Text = "0.2";
                    break;

                case 16:
                    txtEntranceLossCoefficient.Text = "0.4";
                    break;

                case 17:
                    txtEntranceLossCoefficient.Text = "0.2";
                    break;

                case 18:
                    txtEntranceLossCoefficient.Text = "0.5";
                    break;

                case 19:
                    txtEntranceLossCoefficient.Text = "0.7";
                    break;
            }

        }

        private void comboInletControlFormulaCoefficients_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (dataCulverts.CurrentCell != null)
            //if false do not enter block because dataCulverts is not loaded yet
            {
                //change ComboInletCoeffsSelectionIndex in culvervalues 
                int index = dataCulverts.CurrentCell.RowIndex;
                string culvertfileName = _currentProjectPath + "\\" + dataCulverts.Rows[index].Cells[2].Value.ToString();
                if (Universal.CulvertValuesGroups.ContainsKey(culvertfileName))
                {
                    Universal.CulvertValuesGroup aCulvert = Universal.CulvertValuesGroups[culvertfileName];
                    aCulvert.ComboInletCoeffsSelectionIndex = comboInletControlFormulaCoefficients.SelectedIndex;
                    Universal.CulvertValuesGroups[culvertfileName] = aCulvert;
                }
            }


            //if (Universal.EnableTextChangedEvent) //if false do not enter block because dataCulverts is not loaded yet
            //{

            //	int index = dataCulverts.CurrentCell.RowIndex;
            //	string culvertfileName = _currentProjectPath + "\\" + dataCulverts.Rows[index].Cells[2].Value.ToString();
            //	if (Universal.CulvertValuesGroups.ContainsKey(culvertfileName))
            //	{
            //		Universal.CulvertValuesGroup aCulvert = Universal.CulvertValuesGroups[culvertfileName];
            //		aCulvert.ComboInletCoeffsSelectionIndex = comboInletControlFormulaCoefficients.SelectedIndex;
            //		Universal.CulvertValuesGroups[culvertfileName] = aCulvert;
            //	}
            //}
            //;

            switch (comboInletControlFormulaCoefficients.SelectedIndex)
            {
                case 0:
                    //user defined
                    break;

                case 1:
                    txtCoeff_K.Text = "0.3153";
                    txtCoeff_M.Text = "2.0000";
                    txtCoeff_c.Text = "1.2804";
                    txtCoeff_Y.Text = "0.6700";
                    break;

                case 2:
                    txtCoeff_K.Text = "0.2509";
                    txtCoeff_M.Text = "2.0000";
                    txtCoeff_c.Text = "0.9394";
                    txtCoeff_Y.Text = "0.7400";
                    break;

                case 3:
                    txtCoeff_K.Text = "0.1448";
                    txtCoeff_M.Text = "2.0000";
                    txtCoeff_c.Text = "1.0198";
                    txtCoeff_Y.Text = "0.6900";
                    break;

                case 4:
                    txtCoeff_K.Text = "0.2509";
                    txtCoeff_M.Text = "2.0000";
                    txtCoeff_c.Text = "1.2192";
                    txtCoeff_Y.Text = "0.6900";
                    break;

                case 5:
                    txtCoeff_K.Text = "0.2112";
                    txtCoeff_M.Text = "1.3300";
                    txtCoeff_c.Text = "1.4895";
                    txtCoeff_Y.Text = "0.7500";
                    break;

                case 6:
                    txtCoeff_K.Text = "0.4593";
                    txtCoeff_M.Text = "1.5000";
                    txtCoeff_c.Text = "1.7790";
                    txtCoeff_Y.Text = "0.5400";
                    break;

                case 7:
                    txtCoeff_K.Text = "0.1379";
                    txtCoeff_M.Text = "2.5000";
                    txtCoeff_c.Text = "0.9651";
                    txtCoeff_Y.Text = "0.7400";
                    break;

                case 8:
                    txtCoeff_K.Text = "0.1379";
                    txtCoeff_M.Text = "2.5000";
                    txtCoeff_c.Text = "0.7817";
                    txtCoeff_Y.Text = "0.8300";
                    break;

                case 9:
                    txtCoeff_K.Text = "0.1475";
                    txtCoeff_M.Text = "1.0000";
                    txtCoeff_c.Text = "1.2385";
                    txtCoeff_Y.Text = "0.8100";
                    break;

                case 10:
                    txtCoeff_K.Text = "0.2242";
                    txtCoeff_M.Text = "0.7500";
                    txtCoeff_c.Text = "1.2868";
                    txtCoeff_Y.Text = "0.8000";
                    break;

                case 11:
                    txtCoeff_K.Text = "0.2242";
                    txtCoeff_M.Text = "0.7500";
                    txtCoeff_c.Text = "1.3608";
                    txtCoeff_Y.Text = "0.8200";
                    break;

                case 12:
                    txtCoeff_K.Text = "1.6230";
                    txtCoeff_M.Text = "0.6670";
                    txtCoeff_c.Text = "0.9941";
                    txtCoeff_Y.Text = "0.8000";
                    break;

                case 13:
                    txtCoeff_K.Text = "1.5466";
                    txtCoeff_M.Text = "0.6670";
                    txtCoeff_c.Text = "0.8010";
                    txtCoeff_Y.Text = "0.8300";
                    break;

                case 14:
                    txtCoeff_K.Text = "1.6389";
                    txtCoeff_M.Text = "0.6670";
                    txtCoeff_c.Text = "1.2064";
                    txtCoeff_Y.Text = "0.7900";
                    break;

                case 15:
                    txtCoeff_K.Text = "1.5752";
                    txtCoeff_M.Text = "0.6670";
                    txtCoeff_c.Text = "1.0101";
                    txtCoeff_Y.Text = "0.8200";
                    break;

                case 16:
                    txtCoeff_K.Text = "1.5466";
                    txtCoeff_M.Text = "0.6670";
                    txtCoeff_c.Text = "0.8107";
                    txtCoeff_Y.Text = "0.8650";
                    break;

                case 17:
                    txtCoeff_K.Text = "1.6611";
                    txtCoeff_M.Text = "0.6670";
                    txtCoeff_c.Text = "1.2932";
                    txtCoeff_Y.Text = "0.7300";
                    break;

                case 18:
                    txtCoeff_K.Text = "1.6961";
                    txtCoeff_M.Text = "0.6670";
                    txtCoeff_c.Text = "1.3672";
                    txtCoeff_Y.Text = "0.7050";
                    break;

                case 19:
                    txtCoeff_K.Text = "1.7343";
                    txtCoeff_M.Text = "0.6670";
                    txtCoeff_c.Text = "1.4493";
                    txtCoeff_Y.Text = "0.6800";
                    break;

                case 20:
                    txtCoeff_K.Text = "1.5848";
                    txtCoeff_M.Text = "0.6670";
                    txtCoeff_c.Text = "1.0520";
                    txtCoeff_Y.Text = "0.7500";
                    break;

                case 21:
                    txtCoeff_K.Text = "1.5816";
                    txtCoeff_M.Text = "0.6670";
                    txtCoeff_c.Text = "1.0906";
                    txtCoeff_Y.Text = "0.8030";
                    break;

                case 22:
                    txtCoeff_K.Text = "1.5689";
                    txtCoeff_M.Text = "0.6670";
                    txtCoeff_c.Text = "1.1613";
                    txtCoeff_Y.Text = "0.8060";
                    break;

                case 23:
                    txtCoeff_K.Text = "1.5752";
                    txtCoeff_M.Text = "0.6670";
                    txtCoeff_c.Text = "1.2418";
                    txtCoeff_Y.Text = "0.7100";
                    break;

                case 24:
                    txtCoeff_K.Text = "1.5816";
                    txtCoeff_M.Text = "0.6670";
                    txtCoeff_c.Text = "0.9715";
                    txtCoeff_Y.Text = "0.8350";
                    break;

                case 25:
                    txtCoeff_K.Text = "1.5752";
                    txtCoeff_M.Text = "0.6670";
                    txtCoeff_c.Text = "0.8107";
                    txtCoeff_Y.Text = "0.8810";
                    break;

                case 26:
                    txtCoeff_K.Text = "1.5689";
                    txtCoeff_M.Text = "0.6670";
                    txtCoeff_c.Text = "0.7303";
                    txtCoeff_Y.Text = "0.8870";
                    break;

                case 27:
                    txtCoeff_K.Text = "0.2670";
                    txtCoeff_M.Text = "2.0000";
                    txtCoeff_c.Text = "1.2192";
                    txtCoeff_Y.Text = "0.6900";
                    break;

                case 28:
                    txtCoeff_K.Text = "0.3023";
                    txtCoeff_M.Text = "1.7500";
                    txtCoeff_c.Text = "1.3479";
                    txtCoeff_Y.Text = "0.6400";
                    break;

                case 29:
                    txtCoeff_K.Text = "0.4593";
                    txtCoeff_M.Text = "1.5000";
                    txtCoeff_c.Text = "1.5956";
                    txtCoeff_Y.Text = "0.5700";
                    break;

                case 30:
                    txtCoeff_K.Text = "1.3991";
                    txtCoeff_M.Text = "0.5550";
                    txtCoeff_c.Text = "0.6305";
                    txtCoeff_Y.Text = "0.8900";
                    break;

                case 31:
                    txtCoeff_K.Text = "1.5760";
                    txtCoeff_M.Text = "0.6400";
                    txtCoeff_c.Text = "0.9297";
                    txtCoeff_Y.Text = "0.9000";
                    break;

                case 32:
                    txtCoeff_K.Text = "1.5116";
                    txtCoeff_M.Text = "0.6670";
                    txtCoeff_c.Text = "0.5758";
                    txtCoeff_Y.Text = "0.9700";
                    break;

                case 33:
                    txtCoeff_K.Text = "0.3153";
                    txtCoeff_M.Text = "2.0000";
                    txtCoeff_c.Text = "1.2804";
                    txtCoeff_Y.Text = "0.6700";
                    break;

                case 34:
                    txtCoeff_K.Text = "0.2509";
                    txtCoeff_M.Text = "2.0000";
                    txtCoeff_c.Text = "0.9394";
                    txtCoeff_Y.Text = "0.7400";
                    break;

                case 35:
                    txtCoeff_K.Text = "0.1448";
                    txtCoeff_M.Text = "2.0000";
                    txtCoeff_c.Text = "1.0198";
                    txtCoeff_Y.Text = "0.6900";
                    break;

                case 36:
                    txtCoeff_K.Text = "0.2509";
                    txtCoeff_M.Text = "2.0000";
                    txtCoeff_c.Text = "1.2192";
                    txtCoeff_Y.Text = "0.6900";
                    break;

                case 37:
                    txtCoeff_K.Text = "0.2112";
                    txtCoeff_M.Text = "1.3300";
                    txtCoeff_c.Text = "1.4895";
                    txtCoeff_Y.Text = "0.7500";
                    break;

                case 38:
                    txtCoeff_K.Text = "0.4593";
                    txtCoeff_M.Text = "1.5000";
                    txtCoeff_c.Text = "1.7790";
                    txtCoeff_Y.Text = "0.5400";
                    break;

                case 39:
                    txtCoeff_K.Text = "0.1379";
                    txtCoeff_M.Text = "2.5000";
                    txtCoeff_c.Text = "0.9651";
                    txtCoeff_Y.Text = "0.7400";
                    break;

                case 40:
                    txtCoeff_K.Text = "0.1379";
                    txtCoeff_M.Text = "2.5000";
                    txtCoeff_c.Text = "0.7817";
                    txtCoeff_Y.Text = "0.8300";
                    break;

                case 41:
                    txtCoeff_K.Text = "0.1475";
                    txtCoeff_M.Text = "1.0000";
                    txtCoeff_c.Text = "1.2385";
                    txtCoeff_Y.Text = "0.8100";
                    break;

                case 42:
                    txtCoeff_K.Text = "0.2242";
                    txtCoeff_M.Text = "0.7500";
                    txtCoeff_c.Text = "1.2868";
                    txtCoeff_Y.Text = "0.8000";
                    break;

                case 43:
                    txtCoeff_K.Text = "0.2242";
                    txtCoeff_M.Text = "0.7500";
                    txtCoeff_c.Text = "1.3608";
                    txtCoeff_Y.Text = "0.8200";
                    break;

                case 44:
                    txtCoeff_K.Text = "1.6230";
                    txtCoeff_M.Text = "0.6670";
                    txtCoeff_c.Text = "0.9941";
                    txtCoeff_Y.Text = "0.8000";
                    break;

                case 45:
                    txtCoeff_K.Text = "1.5466";
                    txtCoeff_M.Text = "0.6670";
                    txtCoeff_c.Text = "0.8010";
                    txtCoeff_Y.Text = "0.8300";
                    break;

                case 46:
                    txtCoeff_K.Text = "1.6389";
                    txtCoeff_M.Text = "0.6670";
                    txtCoeff_c.Text = "1.2064";
                    txtCoeff_Y.Text = "0.7900";
                    break;

                case 47:
                    txtCoeff_K.Text = "1.5752";
                    txtCoeff_M.Text = "0.6670";
                    txtCoeff_c.Text = "1.0101";
                    txtCoeff_Y.Text = "0.8200";
                    break;
            }
        }

        private void dataCulverts_RowEnter(object sender, DataGridViewCellEventArgs e)
        {
            Universal.EnableTextChangedEvent = false;

            string culvertType = dataCulverts.Rows[e.RowIndex].Cells[1].Value.ToString();
            string fileName = _currentProjectPath + "\\" + dataCulverts.Rows[e.RowIndex].Cells[2].Value;
            switch (culvertType.Trim())
            {
                case "rating table":
                    DisableType1();
                    DisableType2();
                    EnableType0(dataCulverts.Rows[e.RowIndex].Cells[2].Value.ToString());
                    LoadCULVERTGroup(0, fileName);
                    break;

                case "box":
                    DisableType0();
                    DisableType2();
                    EnableType1();
                    LoadCULVERTGroup(1, fileName);
                    break;

                case "circular":
                    DisableType0();
                    DisableType1();
                    EnableType2();
                    LoadCULVERTGroup(2, fileName);
                    break;

                default:
                    MessageBox.Show(Universal.Idioma("Culvert type must be 0 (rating table), 1 (box), or 2 (circular).",
                                                     "El tipo de alcantarilla debe ser 0 (tabla), 1 (box), o 2 (circular)."), 
                                                     "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    break;

            }
        }

        private void DisableType1()
        {
            lblCulvertManning.Visible = false;
            comboCulvertManning.Visible = false;
            txtCulvertManning.Visible = false;
            lblCulvert_nc.Visible = false;
            lblNumberOfBarrels.Visible = false;
            comboNBarrels.Visible = false;
            lblEntranceLossCoefficient.Visible = false;
            comboEntranceLossCoefficient.Visible = false;
            lblCulvert_Ke.Visible = false;
            txtEntranceLossCoefficient.Visible = false;
            lblCulvertInletControlFormulaCoefficients.Visible = false;
            comboInletControlFormulaCoefficients.Visible = false;
            lblCulvertCoeffKPrima.Visible = false;
            lblCulvertCoeffM.Visible = false;
            lblCulvertCoeffCPrima.Visible = false;
            lblCulvertCoeffY.Visible = false;
            txtCoeff_K.Visible = false;
            txtCoeff_M.Visible = false;
            txtCoeff_c.Visible = false;
            txtCoeff_Y.Visible = false;
            lblCulvert_m.Visible = false;
            lblCulvert_Hb.Visible = false;
            lblCulvert_Base.Visible = false;
            lblCulvert_Dc.Visible = false;
            comboCulvert_m.Visible = false;
            txtCulvert_Hb.Visible = false;
            txtCulvert_Base.Visible = false;
            txtCulvert_Dc.Visible = false;
        }


        private void DisableType2()
        {
            lblCulvertManning.Visible = false;
            comboCulvertManning.Visible = false;
            txtCulvertManning.Visible = false;
            lblCulvert_nc.Visible = false;
            lblNumberOfBarrels.Visible = false;
            comboNBarrels.Visible = false;
            lblEntranceLossCoefficient.Visible = false;
            comboEntranceLossCoefficient.Visible = false;
            lblCulvert_Ke.Visible = false;
            txtEntranceLossCoefficient.Visible = false;
            lblCulvertInletControlFormulaCoefficients.Visible = false;
            comboInletControlFormulaCoefficients.Visible = false;
            lblCulvertCoeffKPrima.Visible = false;
            lblCulvertCoeffM.Visible = false;
            lblCulvertCoeffCPrima.Visible = false;
            lblCulvertCoeffY.Visible = false;
            txtCoeff_K.Visible = false;
            txtCoeff_M.Visible = false;
            txtCoeff_c.Visible = false;
            txtCoeff_Y.Visible = false;
            lblCulvert_m.Visible = false;
            lblCulvert_Hb.Visible = false;
            lblCulvert_Base.Visible = false;
            lblCulvert_Dc.Visible = false;
            comboCulvert_m.Visible = false;
            txtCulvert_Hb.Visible = false;
            txtCulvert_Base.Visible = false;
            txtCulvert_Dc.Visible = false;
        }

        private void DisableType0()
        {
            dataCulvertRatingTable.Visible = false;
            lblCulverFileName.Visible = false;
        }

        private void EnableType0(string fileName)
        {
            dataCulvertRatingTable.Visible = true;
            lblCulverFileName.Visible = true;
            lblCulverFileName.Text = fileName;
            groupBoxInvertElevations.Visible = true;
        }

        private void EnableType1()
        {
            lblCulvertManning.Visible = true;
            comboCulvertManning.Visible = true;
            txtCulvertManning.Visible = true;
            lblCulvert_nc.Visible = true;
            lblNumberOfBarrels.Visible = true;
            comboNBarrels.Visible = true;
            lblEntranceLossCoefficient.Visible = true;
            comboEntranceLossCoefficient.Visible = true;
            lblCulvert_Ke.Visible = true;
            txtEntranceLossCoefficient.Visible = true;
            lblCulvertInletControlFormulaCoefficients.Visible = true;
            comboInletControlFormulaCoefficients.Visible = true;
            lblCulvertCoeffKPrima.Visible = true;
            lblCulvertCoeffM.Visible = true;
            lblCulvertCoeffCPrima.Visible = true;
            lblCulvertCoeffY.Visible = true;
            txtCoeff_K.Visible = true;
            txtCoeff_M.Visible = true;
            txtCoeff_c.Visible = true;
            txtCoeff_Y.Visible = true;
            lblCulvert_m.Visible = true;
            lblCulvert_Hb.Visible = true;
            lblCulvert_Base.Visible = true;
            comboCulvert_m.Visible = true;
            txtCulvert_Hb.Visible = true;
            txtCulvert_Base.Visible = true;
            groupBoxInvertElevations.Visible = true;
        }

        private void EnableType2()
        {
            lblCulvertManning.Visible = true;
            comboCulvertManning.Visible = true;
            txtCulvertManning.Visible = true;
            lblCulvert_nc.Visible = true;
            lblNumberOfBarrels.Visible = true;
            comboNBarrels.Visible = true;
            lblEntranceLossCoefficient.Visible = true;
            comboEntranceLossCoefficient.Visible = true;
            lblCulvert_Ke.Visible = true;
            txtEntranceLossCoefficient.Visible = true;
            lblCulvertInletControlFormulaCoefficients.Visible = true;
            comboInletControlFormulaCoefficients.Visible = true;
            lblCulvertCoeffKPrima.Visible = true;
            lblCulvertCoeffM.Visible = true;
            lblCulvertCoeffCPrima.Visible = true;
            lblCulvertCoeffY.Visible = true;
            txtCoeff_K.Visible = true;
            txtCoeff_M.Visible = true;
            txtCoeff_c.Visible = true;
            txtCoeff_Y.Visible = true;
            lblCulvert_m.Visible = true;
            lblCulvert_Dc.Visible = true;
            comboCulvert_m.Visible = true;
            txtCulvert_Dc.Visible = true;
            groupBoxInvertElevations.Visible = true;

        }

        //private void LoadCulvertFile(int culvertType, string culvertFile)
        //{
        //  string path = _currentProjectPath;
        //  if (path == "")
        //    path = Directory.GetCurrentDirectory();
        //  try
        //  {
        //    if (File.Exists(_currentProjectPath + "\\" + culvertFile))
        //    {
        //      StreamReader s = File.OpenText(_currentProjectPath + "\\" + culvertFile);
        //      switch (culvertType)
        //      {
        //        case 0: // Rating table.
        //          string nb = s.ReadLine();
        //          dataCulvertRatingTable.Rows.Clear();
        //          for (int newCol = 0; newCol < Convert.ToInt32(nb) - 1; ++newCol)
        //          {
        //            string line = s.ReadLine();
        //            string[] split = line.Split(new Char[] { ' ', '\t' }, StringSplitOptions.RemoveEmptyEntries);
        //            dataCulvertRatingTable.Rows.Add(split[0], split[1]);
        //            dataCulvertRatingTable.Rows[newCol].Cells[0].Value = split[0];
        //            dataCulvertRatingTable.Rows[newCol].Cells[1].Value = split[1];
        //          }
        //          txtInvertZ1.Text = s.ReadLine();
        //          txtInvertZ2.Text = s.ReadLine();
        //          break;

        //        case 1: // Box.
        //          comboNBarrels.Text = s.ReadLine();
        //          txtEntranceLossCoefficient.Text = s.ReadLine();
        //          txtCulvertManning.Text = s.ReadLine();
        //          txtCoeff_K.Text = s.ReadLine();
        //          txtCoeff_M.Text = s.ReadLine();
        //          txtCoeff_c.Text = s.ReadLine();
        //          txtCoeff_Y.Text = s.ReadLine();
        //          comboCulvert_m.Text = s.ReadLine();
        //          txtCulvert_Hb.Text = s.ReadLine();
        //          txtCulvert_Base.Text = s.ReadLine();
        //          txtInvertZ1.Text = s.ReadLine();
        //          txtInvertZ2.Text = s.ReadLine();
        //          comboCulvertManning.SelectedIndex = Convert.ToInt32(s.ReadLine());
        //          comboEntranceLossCoefficient.SelectedIndex = Convert.ToInt32(s.ReadLine());
        //          comboInletControlFormulaCoefficients.SelectedIndex = Convert.ToInt32(s.ReadLine());
        //          break;

        //        case 2: // Circular.
        //          comboNBarrels.Text = s.ReadLine();
        //          txtEntranceLossCoefficient.Text = s.ReadLine();
        //          txtCulvertManning.Text = s.ReadLine();
        //          txtCoeff_K.Text = s.ReadLine();
        //          txtCoeff_M.Text = s.ReadLine();
        //          txtCoeff_c.Text = s.ReadLine();
        //          txtCoeff_Y.Text = s.ReadLine();
        //          comboCulvert_m.Text = s.ReadLine();
        //          txtCulvert_Dc.Text = s.ReadLine();
        //          txtInvertZ1.Text = s.ReadLine();
        //          txtInvertZ2.Text = s.ReadLine();
        //          comboCulvertManning.SelectedIndex = Convert.ToInt32(s.ReadLine());
        //          comboEntranceLossCoefficient.SelectedIndex = Convert.ToInt32(s.ReadLine());
        //          comboInletControlFormulaCoefficients.SelectedIndex = Convert.ToInt32(s.ReadLine());
        //          break;
        //      }
        //      s.Close();
        //    }
        //    else
        //    {
        //      MessageBox.Show(Universal.Idioma("File " + culvertFile + " doesn't exist.", "RiverFlow2D", MessageBoxButtons.OK,
        //        MessageBoxIcon.Error);
        //      DisableType0();
        //      DisableType1();
        //      DisableType2();
        //    }
        //  }
        //  catch (Exception ex)
        //  {
        //    MessageBox.Show(Universal.Idioma("ERROR 0811120745: error trying to read file " + culvertFile + ". " + ex.Message + ".",
        //      "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
        //  }
        //}


        private void LoadCULVERTGroup(int culvertType, string culvertFile)
        {
            try
            {
                if (Universal.CulvertValuesGroups.ContainsKey(culvertFile))
                {
                    Universal.CulvertValuesGroup aSeries = Universal.CulvertValuesGroups[culvertFile];

                    switch (culvertType)
                    {
                        case 0: // Rating table.
                            dataCulvertRatingTable.Rows.Clear();
                            for (int j = 0; j <= aSeries.NPoints - 1; ++j)
                                dataCulvertRatingTable.Rows.Add(aSeries.Table[j].Col0, aSeries.Table[j].Col1);
                            txtInvertZ1.Text = aSeries.Z1;
                            txtInvertZ2.Text = aSeries.Z2;
                            chckUseElementElevations.Checked = Convert.ToBoolean(aSeries.UseElementElevations);
                            break;

                        case 1: // Box.
                            txtEntranceLossCoefficient.Text = aSeries.Ke.ToString();
                            txtCulvertManning.Text = aSeries.nc;
                            comboNBarrels.Text = aSeries.Nb;
                            txtCoeff_K.Text = aSeries.Kp;
                            txtCoeff_M.Text = aSeries.M;
                            txtCoeff_c.Text = aSeries.cp;
                            txtCoeff_Y.Text = aSeries.Y;
                            comboCulvert_m.Text = aSeries.m;
                            txtCulvert_Hb.Text = aSeries.Hb;
                            txtCulvert_Base.Text = aSeries.Base;
                            txtInvertZ1.Text = aSeries.Z1;
                            txtInvertZ2.Text = aSeries.Z2;
                            comboCulvertManning.SelectedIndex = aSeries.ComboManningSelectionIndex;
                            comboEntranceLossCoefficient.SelectedIndex = aSeries.ComboEntranceLossSelectionIndex;
                            comboInletControlFormulaCoefficients.SelectedIndex = aSeries.ComboInletCoeffsSelectionIndex;
                            chckUseElementElevations.Checked = Convert.ToBoolean(aSeries.UseElementElevations);
                            break;

                        case 2: //Circular.
                            txtEntranceLossCoefficient.Text = aSeries.Ke;
                            txtCulvertManning.Text = aSeries.nc;
                            comboNBarrels.Text = aSeries.Nb;
                            txtCoeff_K.Text = aSeries.Kp;
                            txtCoeff_M.Text = aSeries.M;
                            txtCoeff_c.Text = aSeries.cp;
                            txtCoeff_Y.Text = aSeries.Y;
                            comboCulvert_m.Text = aSeries.m;
                            txtCulvert_Dc.Text = aSeries.Dc;
                            txtInvertZ1.Text = aSeries.Z1;
                            txtInvertZ2.Text = aSeries.Z2;
                            comboCulvertManning.SelectedIndex = aSeries.ComboManningSelectionIndex;
                            comboEntranceLossCoefficient.SelectedIndex = aSeries.ComboEntranceLossSelectionIndex;
                            comboInletControlFormulaCoefficients.SelectedIndex = aSeries.ComboInletCoeffsSelectionIndex;
                            chckUseElementElevations.Checked = Convert.ToBoolean(aSeries.UseElementElevations);
                            break;
                    }
                }
                else
                    MessageBox.Show(Universal.Idioma("WARNING 1011120950: " + culvertFile + " file not found.", 
                                                    "ADVERTENCIA 1011120950: el archivo " + culvertFile + " no se encontró."), 
                        "RiverFlow2D", MessageBoxButtons.OK,  MessageBoxIcon.Warning);

            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 0811120744: error accessing data for ", "ERROR 0811120744: error accediendo a los datos de ") +
                    culvertFile + ". " + ex.Message + ".", "RiverFlow2D",
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void LoadLINFGroup(int modelType, string fileName)
        {
            try
            {
                if (Universal.InfiltrationParametersFiles.ContainsKey(fileName))
                {
                    Universal.InfiltrationParametersGroup aSeries = Universal.InfiltrationParametersFiles[fileName];


                    switch (aSeries.ModelType)
                    {
                        case "1": //Horton
                            comboModelName.SelectedItem = 0;
                            comboModelName.Text = "Horton";
                            txtDecayRate.Text = aSeries.DecayRate.ToString();
                            txtFinalRate.Text = aSeries.FinalRate.ToString();
                            txtInitialRate.Text = aSeries.InitialRate.ToString();
                            lblKDecayRate.Text = Universal.Idioma("K Decay Rate", "Tasa de Decaimiento K");
                            lblFinalRate.Text = Universal.Idioma("Fc Final Rate", "Tasa Final Fc");
                            lblInitialRate.Text = Universal.Idioma("Fo Initial Rate", "Fo Tasa Inicial");
                            break;

                        case "2": //Green-Ampt
                            comboModelName.SelectedItem = 1;
                            comboModelName.Text = "Green-Ampt";
                            txtDecayRate.Text = aSeries.HydraulicConductivity.ToString();
                            txtFinalRate.Text = aSeries.PsiWetting.ToString();
                            txtInitialRate.Text = aSeries.DeltaTheta.ToString();
                            lblKDecayRate.Text = Universal.Idioma("K Decay Rate", "Tasa de Decaimiento K");
                            lblFinalRate.Text = Universal.Idioma("Fc Final Rate", "Tasa Final Fc");
                            lblInitialRate.Text = Universal.Idioma("Fo Initial Rate", "Fo Tasa Inicial");
                            break;

                        case "3": //SCS-CN
                            comboModelName.SelectedItem = 2;
                            comboModelName.Text = "SCS-CN";
                            txtDecayRate.Text = aSeries.CNCurveNumber.ToString();
                            txtFinalRate.Text = aSeries.InitialAbstraction.ToString();
                            txtInitialRate.Text = "";
                            lblKDecayRate.Text = Universal.Idioma("K Decay Rate", "Tasa de Decaimiento K");
                            lblFinalRate.Text = Universal.Idioma("Fc Final Rate", "Tasa Final Fc");
                            lblInitialRate.Text = Universal.Idioma("Fo Initial Rate", "Fo Tasa Inicial");
                            break;
                    }

                    SetInfiltrationModelName();
                    InfiltrationpPametersChanged = true;
                }
                else
                    MessageBox.Show(Universal.Idioma("WARNING 2704170750: " + fileName + " file not found.",
                        "ADVERTENCIA 2704170750: el archivo " + fileName + " no se encontró."), 
                        "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Warning);

            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 2704170751: error accessing data for ", "ERROR 2704170751: error accediendo los datos de ") +
                    fileName + ". " + ex.Message + ".", "RiverFlow2D",
                  MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void LoadWINDGroup(string windFile)
        {
            try
            {
                if (Universal.SecondaryGroups.ContainsKey(windFile))
                {
                    Universal.SecondaryGroup aWind = Universal.SecondaryGroups[windFile];

                    dataWindPlusVelocities.Rows.Clear();
                    for (int j = 0; j <= aWind.NPoints - 1; ++j)
                        dataWindPlusVelocities.Rows.Add(aWind.Table[j].Col0, aWind.Table[j].Col1, aWind.Table[j].Col2);
                }
                else
                    MessageBox.Show(Universal.Idioma("WARNING 1803171952: " + windFile + " file not found.",
                        "ADVERTENCIA 1803171952: el archivo" + windFile + " no se encontró."), 
                        "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Warning);

            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 1803171953: error accessing data for ", "ERROR 1803171953: error accediendo los datos de ") +
                    windFile + ". " + ex.Message + ".", "RiverFlow2D",
                  MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

        }

        private void LoadLRAINGroup(string fileName)
        {
            try
            {
                if (Universal.SecondaryGroups.ContainsKey(fileName))
                {
                    Universal.SecondaryGroup aSeries = Universal.SecondaryGroups[fileName];

                    dataRainfallEvaporation.Rows.Clear();
                    for (int j = 0; j <= aSeries.NPoints - 1; ++j)
                        dataRainfallEvaporation.Rows.Add(aSeries.Table[j].Col0,
                                                          aSeries.Table[j].Col1,
                                                          aSeries.Table[j].Col2);
                }
                else
                    MessageBox.Show(Universal.Idioma("WARNING 2103170848. File not found:\n\n" + fileName,
                        "ADVERTENCIA 2103170848. No se encontró el archivo:\n\n" + fileName), 
                        "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Warning);

            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 2103170849: error accessing data for ", "ERROR 2103170849: error accediendo los datos de ") +
                    fileName + ". " + ex.Message + ".", "RiverFlow2D",
                  MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void LoadBRIDGESGroup(string fileName)
        {
            try
            {
                if (Universal.SecondaryGroups.ContainsKey(fileName))
                {
                    Universal.SecondaryGroup aSeries = Universal.SecondaryGroups[fileName];

                    dataBridgeGeometry.Rows.Clear();
                    for (int j = 0; j <= aSeries.NPoints - 1; ++j)
                        dataBridgeGeometry.Rows.Add(aSeries.Table[j].Col0,
                                                          aSeries.Table[j].Col1,
                                                          aSeries.Table[j].Col2,
                                                          aSeries.Table[j].Col3,
                                                          aSeries.Table[j].Col4);
                }
                else
                {
                    dataBridgeGeometry.Rows.Clear();
                }

            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 0105170621: error accessing data for file\n\n", "ERROR 0105170621: error accediendo los datos del archivo\n\n") +
                    fileName + "\n\n" + ex.Message, "RiverFlow2D",
                  MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }


        private void LoadGATESGroup(string fileName)
        {
            try
            {
                if (Universal.SecondaryGroups.ContainsKey(fileName))
                {
                    Universal.SecondaryGroup aSeries = Universal.SecondaryGroups[fileName];

                    dataGateOpenings.Rows.Clear();
                    for (int j = 0; j <= aSeries.NPoints - 1; ++j)
                        dataGateOpenings.Rows.Add(aSeries.Table[j].Col0,
                                                          aSeries.Table[j].Col1);
                }
                else
                    MessageBox.Show(Universal.Idioma("WARNING 2404170855: " + fileName + " file not found.",
                        "ADVERTENCIA 2404170855: no se encontró el archivo " + fileName), 
                        "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Warning);

            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 2404170856: error accessing data for ", "ERROR 2404170856: error accediendo los datos de ") +
                    fileName + ". " + ex.Message + ".", "RiverFlow2D",
                  MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void ShowSecondaryGroup(DataGridView dgv, string fileName)
        {
            try
            {
                if (Universal.SecondaryGroups.ContainsKey(fileName))
                {
                    Universal.SecondaryGroup aSeries = Universal.SecondaryGroups[fileName];

                    dgv.Rows.Clear();
                    for (int j = 0; j <= aSeries.NPoints - 1; ++j)
                        dgv.Rows.Add(aSeries.Table[j].Col0,
                                        aSeries.Table[j].Col1,
                                        aSeries.Table[j].Col2,
                                        aSeries.Table[j].Col3,
                                        aSeries.Table[j].Col4,
                                        aSeries.Table[j].Col5,
                                        aSeries.Table[j].Col6,
                                        aSeries.Table[j].Col7,
                                        aSeries.Table[j].Col8,
                                        aSeries.Table[j].Col9,
                                        aSeries.Table[j].Col10,
                                        aSeries.Table[j].Col11,
                                        aSeries.Table[j].Col12
                                   );
                }
                else
                {
                    dgv.Rows.Clear();
                }

            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 0805170808: error accessing data for file\n\n", "ERROR 0805170808: error accediendo los datos del archivo\n\n") +
                    fileName + "\n\n" + ex.Message, "RiverFlow2D",
                  MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }



        private void txtCulvertManning_TextChanged(object sender, EventArgs e)
        {
            CulvertTextChanged("nc");
        }

        private void CulvertTextChanged(string variable)
        {
            if (Universal.EnableTextChangedEvent)
            {
                int index = dataCulverts.CurrentCell.RowIndex;
                string culvertfileName = _currentProjectPath + "\\" + dataCulverts.Rows[index].Cells[2].Value.ToString();
                try
                {
                    if (Universal.CulvertValuesGroups.ContainsKey(culvertfileName))
                    {
                        Universal.CulvertValuesGroup aCulvert = Universal.CulvertValuesGroups[culvertfileName];
                        switch (variable)
                        {
                            case "Ke":
                                aCulvert.Ke = txtEntranceLossCoefficient.Text;
                                break;

                            case "nc":
                                aCulvert.nc = txtCulvertManning.Text;
                                break;

                            case "Nb":
                                aCulvert.Nb = comboNBarrels.Text;
                                break;

                            case "Kp":
                                aCulvert.Kp = txtCoeff_K.Text;
                                break;

                            case "M":
                                aCulvert.M = txtCoeff_M.Text;
                                break;

                            case "cp":
                                aCulvert.cp = txtCoeff_c.Text;
                                break;

                            case "Y":
                                aCulvert.Y = txtCoeff_Y.Text;
                                break;

                            case "m":
                                aCulvert.m = comboCulvert_m.Text;
                                break;

                            case "Hb":
                                aCulvert.Hb = txtCulvert_Hb.Text;
                                break;

                            case "Base":
                                aCulvert.Base = txtCulvert_Base.Text;
                                break;

                            case "Dc":
                                aCulvert.Dc = txtCulvert_Dc.Text;
                                break;

                            case "UseElementElevations":
                                aCulvert.UseElementElevations = Convert.ToInt32(chckUseElementElevations.Checked);
                                break;

                            case "Z1":
                                aCulvert.Z1 = txtInvertZ1.Text;
                                break;

                            case "Z2":
                                aCulvert.Z2 = txtInvertZ2.Text;
                                break;


                        }
                        Universal.CulvertValuesGroups[culvertfileName] = aCulvert;
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show(Universal.Idioma("ERROR 1311120642: error while assigning variable. ", "ERROR 1311120642: error asignando valor a variable ") +
                        ex.Message, "RiverFlow2D",
                        MessageBoxButtons.OK, MessageBoxIcon.Error);
                }

            }
        }

        private void txtEntranceLossCoefficient_TextChanged(object sender, EventArgs e)
        {

            CulvertTextChanged("Ke");
        }

        private void txtCoeff_K_TextChanged(object sender, EventArgs e)
        {
            CulvertTextChanged("Kp");
        }

        private void txtCoeff_M_TextChanged(object sender, EventArgs e)
        {
            CulvertTextChanged("M");
        }

        private void txtCoeff_c_TextChanged(object sender, EventArgs e)
        {
            CulvertTextChanged("cp");
        }

        private void txtCoeff_Y_TextChanged(object sender, EventArgs e)
        {
            CulvertTextChanged("Y");
        }

        private void comboCulvert_m_TextChanged(object sender, EventArgs e)
        {
            CulvertTextChanged("m");
        }

        private void txtCulvert_Hb_TextChanged(object sender, EventArgs e)
        {
            CulvertTextChanged("Hb");
        }

        private void txtCulvert_Base_TextChanged(object sender, EventArgs e)
        {
            CulvertTextChanged("Base");
        }

        private void txtCulvert_Dc_TextChanged(object sender, EventArgs e)
        {
            CulvertTextChanged("Dc");
        }

        private void dataCulvertRatingTable_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex >= 0 && e.RowIndex >= 0)
                if (Universal.EnableTextChangedEvent)
                {
                    //From primary table get file name of secondary data. To be use as an index to 
                    //the secondary data stored in memory structure:
                    int row = dataCulverts.CurrentCell.RowIndex;
                    string fileName = _currentProjectPath + "\\" + dataCulverts.Rows[row].Cells[2].Value.ToString();

                    //New value of cell:
                    var val = (string)dataCulvertRatingTable.Rows[e.RowIndex].Cells[e.ColumnIndex].Value;

                    UpdateIndividualCellValueInSecondaryTableStructure(fileName, val, e);

                }
            //if (e.ColumnIndex < 0 || e.RowIndex < 0) return;
            //if (Universal.EnableTextChangedEvent)
            //{
            //    try
            //    {
            //        int index = dataCulverts.CurrentCell.RowIndex;
            //        string culvertfileName = _currentProjectPath + "\\" + dataCulverts.Rows[index].Cells[2].Value.ToString();
            //        if (Universal.CulvertValuesGroups.ContainsKey(culvertfileName))
            //        {
            //            Universal.CulvertValuesGroup aCulvert = Universal.CulvertValuesGroups[culvertfileName];
            //            var val = (string)dataCulvertRatingTable.Rows[e.RowIndex].Cells[e.ColumnIndex].Value;
            //            if (e.RowIndex <= aCulvert.Table.Length - 1)
            //            {
            //                if (e.ColumnIndex == 0)
            //                    aCulvert.Table[e.RowIndex].Col0 = val;
            //                else
            //                    aCulvert.Table[e.RowIndex].Col1 = val;

            //                Universal.CulvertValuesGroups[culvertfileName] = aCulvert;
            //            }
            //            else
            //            {
            //                var tmpRT = new Universal.ExtraData[aCulvert.Table.Length + 1];
            //                aCulvert.Table.CopyTo(tmpRT, 0);

            //                if (e.ColumnIndex == 0)
            //                    tmpRT[tmpRT.Length - 1].Col0 = val;
            //                else
            //                    tmpRT[tmpRT.Length - 1].Col1 = val;

            //                aCulvert.Table = tmpRT;
            //                aCulvert.NPoints = aCulvert.NPoints + 1;

            //                Universal.CulvertValuesGroups[culvertfileName] = aCulvert;
            //            }
            //        }
            //    }
            //    catch (Exception ex)
            //    {
            //        MessageBox.Show(Universal.Idioma("ERROR 1311120725: error modifying value. " + ex.Message, "RiverFlow2D", MessageBoxButtons.OK,
            //            MessageBoxIcon.Error);
            //    }
            //}
        }

        private void txtCulvertManning_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = CheckForReal(txtCulvertManning, e);
            if (!e.Handled)
                comboCulvertManning.SelectedIndex = 0;
        }

        private void txtEntranceLossCoefficient_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = CheckForReal(txtEntranceLossCoefficient, e);
            if (!e.Handled)
                comboEntranceLossCoefficient.SelectedIndex = 0;
        }

        private void txtCoeff_K_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = CheckForReal(txtCoeff_K, e);
            if (!e.Handled)
                comboInletControlFormulaCoefficients.SelectedIndex = 0;
        }

        private void txtCoeff_M_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = CheckForReal(txtCoeff_M, e);
            if (!e.Handled)
                comboInletControlFormulaCoefficients.SelectedIndex = 0;
        }

        private void txtCoeff_c_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = CheckForReal(txtCoeff_c, e);
            if (!e.Handled)
                comboInletControlFormulaCoefficients.SelectedIndex = 0;
        }

        private void txtCoeff_Y_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = CheckForReal(txtCoeff_Y, e);
            if (!e.Handled)
                comboInletControlFormulaCoefficients.SelectedIndex = 0;
        }

        private void txtCulvert_Hb_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = CheckForReal(txtCulvert_Hb, e);
        }

        private void txtCulvert_Base_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = CheckForReal(txtCulvert_Base, e);
        }

        private void txtCulvert_Dc_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = CheckForReal(txtCulvert_Dc, e);
        }

        private void dataCulvertRatingTable_KeyPress(object sender, KeyPressEventArgs e)
        {
            //check if pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
            {
                if (dataCulvertRatingTable.EditingControl.Text.Contains("."))
                    e.Handled = true;
                else
                    e.Handled = false;
            }
            else if (e.KeyChar == (int)Keys.Delete)
                e.Handled = true;
            else
                e.Handled = false;
        }

        private void dataCulvertRatingTable_UserDeletingRow(object sender, DataGridViewRowCancelEventArgs e)
        {
            //When n rows are selected to delete, this event is executed n times, one for each row.

            DeleteCulvertRowFromDictionary(e.Row.Index);

            //   int index = e.Row.Index; //This is the number of the row to be deleted
            //string culvertFileName = _currentProjectPath + "\\" +
            //                         dataCulverts.Rows[dataCulverts.CurrentCell.RowIndex].Cells[2].Value.ToString();
            //try
            //{
            //     //See if CulvertValues (a dictionary) has the data for this culvertFilename
            //	if (Universal.CulvertValuesGroups.ContainsKey(culvertFileName))
            //	{
            //       //Make a pointer to the data of this culvert
            //		Universal.CulvertValuesGroup aCulvert = Universal.CulvertValuesGroups[culvertFileName];
            //		var tmpRT = new Universal.RatingTable[aCulvert.Table.Length - 1];
            //		//Universal.RatingTable thisRT;


            //       //In tmpRT copy all the non-deleted rows
            //		int j = 0;
            //		for (int newCol = 0; newCol <= aCulvert.Table.Length - 1; newCol++)
            //		{
            //			if (newCol != index) //Do not copy the row to be deleted
            //			{
            //				//thisRT = aCulvert.Table[newCol];
            //				//tmpRT[j] = thisRT;
            //           tmpRT[j] =aCulvert.Table[newCol];
            //           j++;
            //			}
            //		}

            //       //Change the rating table in aCulvert with rows that not were deleted
            //		aCulvert.Table = tmpRT;
            //		aCulvert.NPoints = tmpRT.Length;

            //		Universal.CulvertValuesGroups[culvertFileName] = aCulvert;
            //	}
            //}
            //catch (Exception ex)
            //{
            //	MessageBox.Show(Universal.Idioma("ERROR 1311120929: error deleting row. " + ex.Message + ".", "RiverFlow2D", MessageBoxButtons.OK,
            //		MessageBoxIcon.Error);
            //}
        }



        private void dataCulvertRatingTable_CellValidating(object sender, DataGridViewCellValidatingEventArgs e)
        {
            //MessageBox.Show(dataCulvertRatingTable.Rows[e.RowIndex].Cells[e.ColumnIndex].Value.ToString());
        }

        private void dataCulvertRatingTable_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {

            var textbox = e.Control as DataGridViewTextBoxEditingControl;
            textbox.KeyPress -= new KeyPressEventHandler(dataCulvertRatingTable_KeyPress);
            textbox.KeyPress += new KeyPressEventHandler(dataCulvertRatingTable_KeyPress);

        }

        private void dataCulvertRatingTable_KeyDown(object sender, KeyEventArgs e)
        {
            //MessageBox.Show(dataCulvertRatingTable.CurrentCell.Value.ToString());
        }

        private void comboNBarrels_TextChanged(object sender, EventArgs e)
        {
            //CulvertTextChanged("Nb");
        }

        private void dataTimeQ_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {

            var textbox = e.Control as DataGridViewTextBoxEditingControl;
            textbox.KeyPress -= new KeyPressEventHandler(dataTimeQ_KeyPress);
            textbox.KeyPress += new KeyPressEventHandler(dataTimeQ_KeyPress);

        }

        private void dataTimeQ_KeyPress(object sender, KeyPressEventArgs e)
        {
            //check if pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
            {
                if (dataTimeQ.EditingControl.Text.ToString().Contains("."))
                    e.Handled = true;
                else
                    e.Handled = false;
            }
            else
                e.Handled = false;
        }

        private void dataOutflow_KeyPress(object sender, KeyPressEventArgs e)
        {
            //check if pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
            {
                if (dataOutflow.EditingControl.Text.ToString().Contains("."))
                    e.Handled = true;
                else
                    e.Handled = false;
            }
            else
                e.Handled = false;
        }

        private void dataOutflow_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            var textbox = e.Control as DataGridViewTextBoxEditingControl;
            textbox.KeyPress -= new KeyPressEventHandler(dataOutflow_KeyPress);
            textbox.KeyPress += new KeyPressEventHandler(dataOutflow_KeyPress);
        }

        private void richTxtHECRAS_TextChanged(object sender, EventArgs e)
        {

        }

        private void btnWriteXYZFromHECRAS_Click(object sender, EventArgs e)
        {
            // Reads HEC-RAS file, assigns coordinates X,Y to all stations, and writes 
            // <project_name>_ALL_STATIONS.EXP and <project_name>_CHANNEL_STATIONS.EXP.
            // Creates polygons engulfing channel stations and all stations, writes
            // <project_name>_ALL_POLY.EXP and <project_name>_CHANNEL_POLY.EXP.

            var openFileDialog = new OpenFileDialog
            {
                Filter = "HEC-RAS files (*.g??)|*.g??",
                InitialDirectory = _currentProjectPath,
                RestoreDirectory = true,
                CheckFileExists = true
            };

            if (openFileDialog.ShowDialog() != DialogResult.OK) return;

            // Check that the file has good data. 
            int nCutLines = 0;
            int nBanks = 0;
            int nCrossSections = 0;
            int nReaches = 0;

            // Go thru the file and check that the number of cut lines,
            // cross sections and banks are the same.
            StreamReader hecRasFile = File.OpenText(openFileDialog.FileName);
            while (!hecRasFile.EndOfStream)
            {
                string line = hecRasFile.ReadLine();
                int pos = line.IndexOf("Bank Sta=", System.StringComparison.Ordinal);
                if (pos >= 0)
                {
                    nBanks++;
                }
                else
                {
                    pos = line.IndexOf("XS GIS Cut Line=", System.StringComparison.Ordinal);
                    if (pos >= 0)
                    {
                        nCutLines++;
                    }
                    else
                    {
                        pos = line.IndexOf("#Sta/Elev=", StringComparison.Ordinal);
                        if (pos >= 0)
                        {
                            nCrossSections++;
                        }
                        else
                        {
                            pos = line.IndexOf("River Reach=", StringComparison.Ordinal);
                            if (pos >= 0)
                            {
                                nReaches++;
                            }
                        }

                    }
                }
            }
            hecRasFile.Close();

            string reaches = nReaches == 1 ? " reach" : " reaches";

            if (nBanks == 0 & nCrossSections == 0 & nCutLines == 0)
            {
                MessageBox.Show("ERROR: this file has no geographic data." + Environment.NewLine + Environment.NewLine +
                                "      " + "There are " + nReaches.ToString() + reaches + " with" + Environment.NewLine +
                                "          " + nCrossSections.ToString() + " cross sections," + Environment.NewLine +
                                "          " + nCutLines.ToString() + " cut lines, and" + Environment.NewLine +
                                "          " + nBanks.ToString() + " banks.", "RiverFlow2D", MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
                return;
            }
            else if (nCutLines == 0)
            {
                MessageBox.Show("ERROR: this file doesn't appear to be georeferenced." + Environment.NewLine + Environment.NewLine +
                                "      " + "There are " + nReaches.ToString() + reaches + " with" + Environment.NewLine +
                                "          " + nCrossSections.ToString() + " cross sections," + Environment.NewLine +
                                "          " + nCutLines.ToString() + " cut lines, and" + Environment.NewLine +
                                "          " + nBanks.ToString() + " banks.", "RiverFlow2D", MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
                return;
            }

            else if (nBanks != nCutLines | nBanks != nCrossSections | nCrossSections != nCutLines)
            {

                string warning = "WARNING: number of cross sections, cut lines, and banks are different. "
                                 + "There may be errors while processing the file." + Environment.NewLine + Environment.NewLine +
                                 "      " + "There are " + nReaches.ToString() + reaches + " with" + Environment.NewLine +
                                 "          " + nCrossSections.ToString() + " cross sections," + Environment.NewLine +
                                 "          " + nCutLines.ToString() + " cut lines, and" + Environment.NewLine +
                                 "          " + nBanks.ToString() + " banks." + Environment.NewLine + Environment.NewLine +
                                 "Would you like to continue?";

                if (MessageBox.Show(Universal.Idioma(warning, ""),
                    "RiverFlow2D", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) != DialogResult.Yes)
                    return;
            }
            else
                MessageBox.Show(
                    "Number of geographic components in the file:" + Environment.NewLine + Environment.NewLine +
                    "      " + "There are " + nReaches.ToString() + reaches + " with" + Environment.NewLine +
                    "          " + nCrossSections.ToString() + " cross sections," + Environment.NewLine +
                    "          " + nCutLines.ToString() + " cut lines, and" + Environment.NewLine +
                    "          " + nBanks.ToString() + " banks.", "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Information);


            Cursor = Cursors.WaitCursor;
            progressBar.Value = 0;
            progressBar.Visible = true;

            // Find right and Left banks offsets.
            hecRasFile = File.OpenText(openFileDialog.FileName);
            try
            {

                int fileLength = (int)hecRasFile.BaseStream.Length * 2;
                int lineLength;
                progressBar.Maximum = fileLength;

                // For each cross section find left and right banks in line "Bank Sta=".
                var banks = new List<Banks>();
                while (!hecRasFile.EndOfStream)
                {
                    string line = hecRasFile.ReadLine();

                    lineLength = line.Length;
                    progressBar.Value += lineLength;

                    var thisBanks = new Banks();
                    int pos = line.IndexOf("Bank Sta=", System.StringComparison.Ordinal);
                    if (pos >= 0)
                    {
                        pos = line.IndexOf("=", System.StringComparison.Ordinal);
                        line = line.Substring(pos + 1);
                        pos = line.IndexOf(",", System.StringComparison.Ordinal);
                        thisBanks.LeftBankOffset = Convert.ToDouble(line.Substring(0, pos));
                        thisBanks.RightBankOffset = Convert.ToDouble(line.Substring(pos + 1));
                        banks.Add(thisBanks);
                    }

                }
                hecRasFile.Close();

                // Find all stations, cut lines, and reaches.
                var crossSections = new List<CrossSection>();
                var cutLines = new List<CutLine>();
                string reachName = "";
                // Coordinates of the rectangle that contains all points.
                double minX = double.MaxValue;
                double maxX = double.MinValue;
                double minY = double.MaxValue;
                double maxY = double.MinValue;
                string staElev = "";
                try
                {
                    hecRasFile = File.OpenText(openFileDialog.FileName);
                    while (!hecRasFile.EndOfStream)
                    {
                        string line;
                        if (staElev.Length > 0)
                        {
                            // #Sta/Elev line was read before,
                            // do not read a new line, it is already in var line.
                            line = staElev;
                            staElev = "";
                        }
                        else
                        {
                            line = hecRasFile.ReadLine();
                        }

                        lineLength = line.Length;
                        progressBar.Value += lineLength;

                        int pos = line.IndexOf("#Sta/Elev=", StringComparison.Ordinal);
                        string thisName;
                        if (pos == 0)
                        {
                            // Stations found.
                            double firstStation = -9999.9;
                            thisName = line.Substring(10);
                            var thisCS = new CrossSection { StationValues = new List<StationData>() };
                            while (!hecRasFile.EndOfStream)
                            {
                                line = hecRasFile.ReadLine();
                                lineLength = line.Length;
                                progressBar.Value += lineLength;

                                pos = line.IndexOf("#Mann=", StringComparison.Ordinal);
                                if (pos >= 0) break; // End of stations for this cross line
                                while (line.Length > 0)
                                {
                                    var thisStationData = new StationData { Offset = Convert.ToDouble(line.Substring(0, 8)) };

                                    if (Equals(firstStation, -9999.9))
                                    {
                                        // This is the first station.
                                        firstStation = thisStationData.Offset;
                                        thisStationData.Offset = 0;
                                    }
                                    else thisStationData.Offset = thisStationData.Offset - firstStation;

                                    line = line.Substring(8);
                                    thisStationData.Elevation = Convert.ToDouble(line.Substring(0, 8));
                                    // Include data for this station to this cross section
                                    thisCS.StationValues.Add(thisStationData);
                                    line = line.Substring(8);
                                }
                            }

                            if (!hecRasFile.EndOfStream)
                            {
                                // Add new cross section with all its stations data (elevation and offset)
                                thisCS.Name = thisName;
                                thisCS.ReachName = reachName;
                                crossSections.Add(thisCS);

                                // Since firstStation value was subtracted to all 
                                // station offsets, do the same to banks offsets.
                                banks[crossSections.Count - 1].LeftBankOffset = banks[crossSections.Count - 1].LeftBankOffset - firstStation;
                                banks[crossSections.Count - 1].RightBankOffset = banks[crossSections.Count - 1].RightBankOffset - firstStation;
                            }
                        }
                        else
                        {
                            pos = line.IndexOf("XS GIS Cut Line=", System.StringComparison.Ordinal);
                            if (pos >= 0)
                            {
                                // Cut line found.
                                var lineVertices = new List<LineCoords>();
                                thisName = line.Substring(16);
                                while (!hecRasFile.EndOfStream)
                                {
                                    line = hecRasFile.ReadLine();
                                    lineLength = line.Length;
                                    progressBar.Value += lineLength;

                                    pos = line.IndexOf("Node", System.StringComparison.Ordinal);
                                    if (pos >= 0)
                                        break;

                                    pos = line.IndexOf("#Sta/Elev=", System.StringComparison.Ordinal);
                                    if (pos >= 0)
                                    {
                                        staElev = line; // Save this line to stop reading another line
                                        break;
                                    }

                                    if (line.Length > 0)
                                    {
                                        var thisXy = new LineCoords { X = Convert.ToDouble(line.Substring(0, 16)) };
                                        line = line.Substring(16);
                                        thisXy.Y = Convert.ToDouble(line.Substring(0, 16));
                                        lineVertices.Add(thisXy);
                                        line = line.Substring(16);
                                        if (line.Length > 0)
                                        {
                                            thisXy = new LineCoords { X = Convert.ToDouble(line.Substring(0, 16)) };
                                            line = line.Substring(16);
                                            thisXy.Y = Convert.ToDouble(line.Substring(0, 16));
                                            line = line.Substring(16);
                                            lineVertices.Add(thisXy);

                                            // Update rectangle that will contain all points.
                                            minX = Math.Min(minX, thisXy.X);
                                            maxX = Math.Max(maxX, thisXy.X);
                                            minY = Math.Min(minY, thisXy.Y);
                                            maxY = Math.Max(maxY, thisXy.Y);
                                        }
                                    }
                                }
                                var thisCutLine = new CutLine { name = thisName, Vertices = lineVertices };
                                cutLines.Add(thisCutLine);
                            }
                            else
                            {
                                pos = line.IndexOf("River Reach=", System.StringComparison.Ordinal);
                                if (pos >= 0)
                                {
                                    //New Reach
                                    string previousReach = reachName;
                                    reachName = line.Trim();
                                }
                            }
                        }
                    }
                }
                catch (Exception)
                {
                    DialogResult result = MessageBox.Show(Universal.Idioma("ERROR 2801131632: error reading HEC-RAS file.", "ERROR 2801131632: error leyendo archivo HEC-RAS."),
                        "RiverFlow2D",
                        MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
                finally
                {
                    hecRasFile.Close();
                }

                hecRasFile.Close();

                // Set domain rectangle that contains all points.
                Universal.Domain.Left = minX * 0.90;
                Universal.Domain.Right = maxX * 1.1;
                Universal.Domain.Bottom = minY * 0.9;
                Universal.Domain.Top = maxY * 1.1;

                if (crossSections.Count == 0)
                {
                    Cursor = Cursors.Default;
                    progressBar.Visible = false;
                    MessageBox.Show(Universal.Idioma("No cross sections were found in " + openFileDialog.FileName,
                        "No se encontraron secciones transversales en " + openFileDialog.FileName),
                        "RiverFlow2D", MessageBoxButtons.OK);
                    return;
                }

                // For each cut line calculate the distance (offSet) of each of its points from origin of line.
                for (int i = 0; i < cutLines.Count; ++i)
                {
                    // Go tru all points of this cutline [newCol] and calculate its offset.
                    for (int j = 0; j < cutLines[i].Vertices.Count; ++j)
                    {
                        if (j == 0)
                        {
                            cutLines[i].Vertices[0].OffSet = 0;
                        }
                        else
                        {
                            double x1 = cutLines[i].Vertices[j - 1].X;
                            double y1 = cutLines[i].Vertices[j - 1].Y;
                            double x2 = cutLines[i].Vertices[j].X;
                            double y2 = cutLines[i].Vertices[j].Y;
                            double h = Math.Sqrt(Math.Pow(x2 - x1, 2) + Math.Pow((y2 - y1), 2));

                            cutLines[i].Vertices[j].OffSet = cutLines[i].Vertices[j - 1].OffSet + h;
                        }
                    }
                }
                ;

                // Calculate the x,y coordinates of each station.
                // Go thru every station in each cross sections and find 2 points in the 
                // corresponding cut line that are just before and after it.
                try
                {
                    for (int i = 0; i < crossSections.Count; ++i)
                        // See all stations for this cross section.
                        for (int j = 0; j < crossSections[i].StationValues.Count; ++j)
                        {
                            crossSections[i].StationValues[j].Valid = true;
                            double thisStationOffset = crossSections[i].StationValues[j].Offset;

                            // Find the 2 vertices of the corresponding line nearest to the station (before and after the station).
                            // (Index newCol is the same for crossSections and cutLines),
                            for (int jj = 0; jj < cutLines[i].Vertices.Count; ++jj)
                            {
                                // Offset of the last vertex of cutline[newCol]:
                                double lastCutLineOffset = cutLines[i].Vertices[cutLines[i].Vertices.Count - 1].OffSet;

                                if (cutLines[i].Vertices[jj].OffSet > thisStationOffset)
                                {
                                    // This .offset determines the first vertex of cut line that
                                    // is situated after the station. The previous vertex is before the station.

                                    // Before the station:
                                    double xa = cutLines[i].Vertices[jj - 1].X;
                                    double ya = cutLines[i].Vertices[jj - 1].Y;

                                    // After the station:
                                    double xb = cutLines[i].Vertices[jj].X;
                                    double yb = cutLines[i].Vertices[jj].Y;

                                    // Distance from vertex before the station to the station:
                                    double d = thisStationOffset - cutLines[i].Vertices[jj - 1].OffSet;

                                    // Calculate the xs,ys coordinates of this station:
                                    double xs;
                                    if (xb > xa)
                                        xs = xa + d / Math.Sqrt(1 + Math.Pow(yb - ya, 2) / Math.Pow(xb - xa, 2));
                                    else if (xb < xa)
                                        xs = xa - d / Math.Sqrt(1 + Math.Pow(yb - ya, 2) / Math.Pow(xb - xa, 2));
                                    else //xb == xa
                                        xs = xa;

                                    double ys;
                                    if (!Equals(xb, xa))
                                        ys = ya + (xs - xa) * (yb - ya) / (xb - xa);
                                    else if (yb > ya)
                                        ys = ya + d;
                                    else
                                        ys = ya - d;

                                    if (Universal.InDomain(xs, ys))
                                    {
                                        crossSections[i].StationValues[j].X = xs;
                                        crossSections[i].StationValues[j].Y = ys;
                                        crossSections[i].StationValues[j].Valid = true;
                                    }
                                    else
                                    {
                                        crossSections[i].StationValues[j].Valid = false;
                                    }

                                    break;
                                }
                            }

                            if (Equals(crossSections[i].StationValues[j].X, 0.0) & Equals(crossSections[i].StationValues[j].Y, 0.0))
                                crossSections[i].StationValues[j].Valid = false;
                        }
                }
                catch (Exception ex)
                {
                    MessageBox.Show(Universal.Idioma("ERROR 210113251: error while calculating stations coordinates. ", "ERROR 210113251: error calculando coordenandas de estaciones. ") +
                        ex.Message
                        , "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }

                progressBar.Maximum = crossSections.Count;
                progressBar.Value = 0;

                // Mark stations that are not inside the channel, and
                // stations that are between the left bank and right bank.
                try
                {

                    for (int i = 0; i < crossSections.Count; ++i)
                    {
                        progressBar.Value++;
                        for (int j = 0; j < crossSections[i].StationValues.Count; ++j)
                        {
                            if (crossSections[i].StationValues[j].Offset < banks[i].LeftBankOffset |
                                crossSections[i].StationValues[j].Offset > banks[i].RightBankOffset)
                            {
                                // This station is outside the channel.
                                crossSections[i].StationValues[j].InChannel = false;
                            }
                            else
                            {
                                // This station is in the channel.
                                crossSections[i].StationValues[j].InChannel = true;
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show(Universal.Idioma("ERROR 2101131630: opening HEC-RAS file. ", "ERROR 2101131630: abriendo archivo HEC-RAS. ") +
                        ex.Message, "RiverFlow2D", MessageBoxButtons.OK,
                        MessageBoxIcon.Error);
                    return;
                }

                // For each cut line mark the first vertex inside the channel.
                for (int i = 0; i < crossSections.Count; ++i)
                {
                    for (int j = 0; j < crossSections[i].StationValues.Count; ++j)
                    {
                        if (crossSections[i].StationValues[j].Offset >= banks[i].LeftBankOffset)
                        {
                            banks[i].LeftBankIndex = j;
                            break;
                        }
                    }
                }

                // For each cut line mark the last vertex inside the channel.
                for (int i = 0; i < crossSections.Count; ++i)
                {
                    for (int j = 0; j < crossSections[i].StationValues.Count; ++j)
                    {
                        if (crossSections[i].StationValues[j].Offset >= banks[i].RightBankOffset)
                        {
                            banks[i].RightBankIndex = j;
                            break;
                        }
                    }
                }

                //Create polygon for each reach, connecting first coordinate of each station (of the reach) until the last station, and 
                //then last coordinate of last station until the last coordinate of first station, and then closing the 
                //polygon with the first coordinate of first station.
                var reachPolygons = new List<ReachPolygon>();
                var externalRightPolygon = new List<PolyPoint>();
                var externalLeftPolygon = new List<PolyPoint>();
                var externalTopPolygon = new List<PolyPoint>();
                var externalBottomPolygon = new List<PolyPoint>();
                var channelRightPolygon = new List<PolyPoint>();
                var channelLeftPolygon = new List<PolyPoint>();
                var channelTopPolygon = new List<PolyPoint>();
                var channelBottomPolygon = new List<PolyPoint>();

                int indexOfFirstCrossSectionOfReach = 0;
                string nameOfReach = crossSections[0].ReachName;

                // For each reach, go thru all cut lines and get: 
                // first coordinate, last coordinate, first coordinate in
                // channel, last coordinate in channel.
                for (int i = 0; i < crossSections.Count; ++i)
                {
                    try
                    {
                        double xx;
                        double yy;
                        if (crossSections[i].ReachName == nameOfReach)
                        {
                            // This cross section is in current reach.

                            // EXTERNAL POLIGONS.

                            // LEFT POLYGON. Add point to left polygon. Coordinates of first station of this cross section.
                            double previousLeftX = -9999;
                            double previousLeftY = -9999;

                            ////////Using Vertices///////
                            //xx = cutLines[newCol].Vertices[0].X;
                            //yy = cutLines[newCol].Vertices[0].Y;
                            //if (Universal.InDomain(xx, yy))
                            //  if (!(Equals(xx, previousLeftX) & Equals(yy, previousLeftY)))
                            //  {
                            //    var aPoint = new PolyPoint();
                            //    aPoint.X = xx;
                            //    aPoint.Y = yy;
                            //    externalLeftPolygon.Add(aPoint);
                            //    previousLeftX = xx;
                            //    previousLeftY = yy;
                            //  }

                            ////////Using Stations////////
                            int firstIndex = -99;
                            for (int ii = 0; ii < crossSections[i].StationValues.Count - 1; ++ii)
                                if (crossSections[i].StationValues[ii].Valid)
                                {
                                    firstIndex = ii;
                                    break;
                                }

                            xx = crossSections[i].StationValues[firstIndex].X;
                            yy = crossSections[i].StationValues[firstIndex].Y;
                            if (Universal.InDomain(xx, yy))
                                if (!(Equals(xx, previousLeftX) & Equals(yy, previousLeftY)))
                                {
                                    var aPoint = new PolyPoint();
                                    aPoint.X = xx;
                                    aPoint.Y = yy;
                                    externalLeftPolygon.Add(aPoint);
                                    previousLeftX = xx;
                                    previousLeftY = yy;
                                }

                            // RIGHT POLYGON. Add point to right polygon. Coordinates of last station of this cross section.
                            double previousRightX = -9999;
                            double previousRightY = -9999;

                            //////////Using vertices//////////////////
                            //int last = cutLines[newCol].Vertices.Count - 1;
                            //xx = cutLines[newCol].Vertices[last].X;
                            //yy = cutLines[newCol].Vertices[last].Y;
                            //if (Universal.InDomain(xx, yy))
                            //  if (!(Equals(xx, previousRightX) & Equals(yy, previousRightY)))
                            //  {
                            //    var aPoint = new PolyPoint();
                            //    aPoint.X = xx;
                            //    aPoint.Y = yy;
                            //    externalRightPolygon.Add(aPoint);
                            //    previousRightX = xx;
                            //    previousRightY = yy;
                            //  }


                            //////////Using stations/////////

                            int lastIndex = -99;
                            for (int ii = crossSections[i].StationValues.Count - 1; ii >= 0; --ii)
                                if (crossSections[i].StationValues[ii].Valid)
                                {
                                    lastIndex = ii;
                                    break;
                                }

                            xx = crossSections[i].StationValues[lastIndex].X;
                            yy = crossSections[i].StationValues[lastIndex].Y;
                            if (Universal.InDomain(xx, yy))
                                if (!(Equals(xx, previousRightX) & Equals(yy, previousRightY)))
                                {
                                    var aPoint = new PolyPoint();
                                    aPoint.X = xx;
                                    aPoint.Y = yy;
                                    externalRightPolygon.Add(aPoint);
                                    previousRightX = xx;
                                    previousRightY = yy;
                                }


                            // CHANNEL POLYGON

                            // Left channel polygon.
                            if (crossSections[i].StationValues[banks[i].LeftBankIndex].Valid)
                            {
                                double leftBankX = crossSections[i].StationValues[banks[i].LeftBankIndex].X;
                                double leftBankY = crossSections[i].StationValues[banks[i].LeftBankIndex].Y;
                                if (Universal.InDomain(leftBankX, leftBankY))
                                {
                                    // Coordinates of first channel station of this cross section.
                                    var aPoint = new PolyPoint();
                                    aPoint = new PolyPoint();
                                    aPoint.X = leftBankX;
                                    aPoint.Y = leftBankY;
                                    channelLeftPolygon.Add(aPoint);
                                }
                            }

                            // Right channel polygon.
                            if (crossSections[i].StationValues[banks[i].RightBankIndex].Valid)
                            {
                                double rightBankX = crossSections[i].StationValues[banks[i].RightBankIndex].X;
                                double rightBankY = crossSections[i].StationValues[banks[i].RightBankIndex].Y;
                                if (Universal.InDomain(rightBankX, rightBankY))
                                {
                                    // Coordinates of last channel station of this cross section.
                                    var aPoint = new PolyPoint();
                                    aPoint.X = rightBankX;
                                    aPoint.Y = rightBankY;
                                    channelRightPolygon.Add(aPoint);
                                }
                            }

                        }

                        if (crossSections[i].ReachName != nameOfReach | i == crossSections.Count - 1)
                        {
                            // New reach found (or end of file). Create top and bottom polygons of previous reach.

                            // TOP & BOTTOM OF EXTERNAL POLYGON:

                            // TOP EXTERNAL. Coordinates of points of first station of this cross section
                            // (in reverse order omitting first and last points).
                            double previousTopX = -9999;
                            double previousTopY = -9999;
                            for (int j = crossSections[indexOfFirstCrossSectionOfReach].StationValues.Count - 1; j >= 0; --j)
                            {
                                if (crossSections[indexOfFirstCrossSectionOfReach].StationValues[j].Valid)
                                {
                                    xx = crossSections[indexOfFirstCrossSectionOfReach].StationValues[j].X;
                                    yy = crossSections[indexOfFirstCrossSectionOfReach].StationValues[j].Y;
                                    if (Universal.InDomain(xx, yy))
                                        if (!(Equals(xx, previousTopX) & Equals(yy, previousTopY)))
                                        {
                                            var aPoint = new PolyPoint();
                                            aPoint.X = xx;
                                            aPoint.Y = yy;
                                            externalTopPolygon.Add(aPoint);
                                            previousTopX = xx;
                                            previousTopY = yy;
                                        }
                                }
                            }
                            if (externalLeftPolygon.Count > 0)
                                if (Universal.InDomain(externalLeftPolygon[0].X, externalLeftPolygon[0].Y))
                                    externalTopPolygon.Add(externalLeftPolygon[0]);

                            // BOTTOM EXTERNAL. Coordinates of points of last station of previous cross section.

                            // Select last cross section of previous reach.
                            int thisCrossSection;
                            if (crossSections[i].ReachName != nameOfReach)
                                // This is a new reach. Have to append the bottom polygon to the previous reach.
                                thisCrossSection = i - 1;
                            else
                                // The file has only one reach. Append the bottom polygon to only polygon.
                                thisCrossSection = i;

                            double previousBottomX = -9999;
                            double previousBottomY = -9999;
                            for (int j = crossSections[thisCrossSection].StationValues.Count - 1; j >= 0; --j)
                            {
                                xx = crossSections[thisCrossSection].StationValues[j].X;
                                yy = crossSections[thisCrossSection].StationValues[j].Y;
                                if (crossSections[thisCrossSection].StationValues[j].Valid)
                                    if (Universal.InDomain(xx, yy))
                                        if (!(Equals(xx, previousBottomX) & Equals(yy, previousBottomY)))
                                        {
                                            var aPoint = new PolyPoint();
                                            aPoint.X = xx;
                                            aPoint.Y = yy;
                                            externalBottomPolygon.Add(aPoint);
                                            previousBottomX = xx;
                                            previousBottomY = yy;
                                        }
                            }

                            // TOP & BOTTOM OF CHANNEL POLYGON:

                            int leftIndex = banks[indexOfFirstCrossSectionOfReach].LeftBankIndex;
                            int rightIndex = banks[indexOfFirstCrossSectionOfReach].RightBankIndex;

                            // TOP CHANNEL. Coordinates of points of first station of this cross section

                            //if (channelRightPolygon.Count > 0)
                            //  channelTopPolygon.Add(channelRightPolygon[0]);

                            previousTopX = -9999;
                            previousTopY = -9999;
                            for (int j = rightIndex; j >= leftIndex; --j)
                            {
                                if (crossSections[indexOfFirstCrossSectionOfReach].StationValues[j].Valid)
                                {
                                    xx = crossSections[indexOfFirstCrossSectionOfReach].StationValues[j].X;
                                    yy = crossSections[indexOfFirstCrossSectionOfReach].StationValues[j].Y;
                                    if (Universal.InDomain(xx, yy))
                                        if (!(Equals(xx, previousTopX) & Equals(yy, previousTopY)))
                                        {
                                            var aPoint = new PolyPoint();
                                            aPoint.X = xx;
                                            aPoint.Y = yy;
                                            channelTopPolygon.Add(aPoint);
                                            previousTopX = xx;
                                            previousTopY = yy;
                                        }
                                }
                            }
                            if (channelLeftPolygon.Count > 0)
                                if (Universal.InDomain(channelLeftPolygon[0].X, channelLeftPolygon[0].Y))
                                    channelTopPolygon.Add(channelLeftPolygon[0]);

                            // BOTTOM CHANNEL. Coordinates of points of last station of previous
                            // cross section (from left bank to right bank).
                            previousBottomX = -9999;
                            previousBottomY = -9999;
                            leftIndex = banks[thisCrossSection].LeftBankIndex;
                            rightIndex = banks[thisCrossSection].RightBankIndex;
                            for (int j = rightIndex - 1; j >= leftIndex; --j)
                            {
                                xx = crossSections[thisCrossSection].StationValues[j].X;
                                yy = crossSections[thisCrossSection].StationValues[j].Y;
                                if (crossSections[thisCrossSection].StationValues[j].Valid)
                                    if (Universal.InDomain(xx, yy))
                                        if (!(Equals(xx, previousBottomX) & Equals(yy, previousBottomY)))
                                        {
                                            var aPoint = new PolyPoint();
                                            aPoint.X = xx;
                                            aPoint.Y = yy;
                                            channelBottomPolygon.Add(aPoint);
                                            previousBottomX = xx;
                                            previousBottomY = yy;
                                        }
                            }

                            // Select this cross section of new reach.
                            indexOfFirstCrossSectionOfReach = i;

                            // New reach found (or end of file with one reach only), store data from previous reach.
                            var thisPolygon = new ReachPolygon
                            {
                                // Add all remaining  points of last cut line to close 
                                ReachName = nameOfReach,
                                ExternalRightPolygon = externalRightPolygon,
                                ExternalLeftPolygon = externalLeftPolygon,
                                ExternalTopPolygon = externalTopPolygon,
                                ExternalBottomPolygon = externalBottomPolygon,
                                ChannelRightPolygon = channelRightPolygon,
                                ChannelLeftPolygon = channelLeftPolygon,
                                ChannelTopPolygon = channelTopPolygon,
                                ChannelBottomPolygon = channelBottomPolygon
                            };
                            reachPolygons.Add(thisPolygon);

                            nameOfReach = crossSections[i].ReachName;
                            externalRightPolygon = new List<PolyPoint>();
                            externalLeftPolygon = new List<PolyPoint>();
                            externalTopPolygon = new List<PolyPoint>();
                            externalBottomPolygon = new List<PolyPoint>();
                            channelRightPolygon = new List<PolyPoint>();
                            channelLeftPolygon = new List<PolyPoint>();
                            channelTopPolygon = new List<PolyPoint>();
                            channelBottomPolygon = new List<PolyPoint>();
                        }
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(Universal.Idioma("ERROR 1101131252: error while creating polygon vertices. ", "ERROR 1101131252: error creando vértices de polígonos. ") +
                            ex.Message, "RiverFlow2D",
                            MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return;
                    }
                }

                // WRITE FILES:

                // Print station coords and elevation in 2 files: with all stations and with channel stations only.
                int index = openFileDialog.FileName.LastIndexOf("\\");
                string folderPath = openFileDialog.FileName.Substring(0, index);
                string hecRasFileName = openFileDialog.FileName.Substring(index);
                index = hecRasFileName.LastIndexOf(".");
                hecRasFileName = hecRasFileName.Substring(0, index);

                var folderBrowserDialog = new FolderBrowserDialog
                {
                    Description = "Select the directory to save the files",
                    SelectedPath = folderPath
                };

                if (folderBrowserDialog.ShowDialog() == DialogResult.OK)
                {
                    //Print two files with stations: all stations and channel stations.
                    folderPath = folderBrowserDialog.SelectedPath;
                    string expFileAllStations = folderPath + hecRasFileName + "_ALL_STATIONS.EXP";
                    string expFileChannelStations = folderPath + hecRasFileName + "_CHANNEL_STATIONS.EXP";

                    // Count number of all stations and in channel.
                    int nAll = 0;
                    int nChannel = 0;

                    for (int i = 0; i < crossSections.Count; ++i)
                    {
                        crossSections[i].ValidChannelCount = 0;

                        for (int j = 0; j < crossSections[i].StationValues.Count; ++j)
                        {
                            double x = crossSections[i].StationValues[j].X;
                            double y = crossSections[i].StationValues[j].Y;

                            if (Universal.InDomain(x, y))
                            {
                                nAll++;
                                crossSections[i].ValidStationCount++;
                                if (crossSections[i].StationValues[j].InChannel)
                                {
                                    nChannel++;
                                    crossSections[i].ValidChannelCount++;
                                }
                            }
                        }
                    }

                    try
                    {
                        var allStationsFile = new StreamWriter(expFileAllStations);
                        var channelStationsFile = new StreamWriter(expFileChannelStations);

                        string fileNumberOfPointsInCrossSections = folderPath + hecRasFileName + "_NUMBER_OF_POINTS_IN_CROSS_SECTIONS.TXT";
                        string fileNumberOfChannelPointsInCrossSections = folderPath + hecRasFileName +
                                                                          "_NUMBER_OF_CHANNEL_POINTS_IN_CROSS_SECTIONS.TXT";

                        var totalNumberOfPointsFile = new StreamWriter(fileNumberOfPointsInCrossSections);
                        var totalNumberOfChannelPointsFile = new StreamWriter(fileNumberOfChannelPointsInCrossSections);


                        // STATIONS. Write number of stations.
                        if (_isLite)
                        {
                            // This is the lite version, limit the number of points to write.
                            if (nAll > 100) nAll = 100;
                            if (nChannel > 100) nChannel = 100;
                            MessageBox.Show(Universal.Idioma("This RiverFlow2D LT version will write a maximum of 100 HEC-RAS elevation points.",
                                "Esta versión de  RiverFlow2D LT escribe un máximo de 100 puntos de elevación HEC-RAS."),
                                "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }

                        allStationsFile.WriteLine(nAll + "   1");
                        channelStationsFile.WriteLine(nChannel + "   1");

                        progressBar.Maximum = crossSections.Count;
                        progressBar.Value = 0;
                        totalNumberOfPointsFile.WriteLine(nAll);
                        totalNumberOfChannelPointsFile.WriteLine(nChannel);

                        for (int i = 0; i < crossSections.Count; ++i)
                        {
                            progressBar.Value++;

                            //Write number of points in this cross section.
                            totalNumberOfPointsFile.WriteLine((i + 1).ToString() + " " + crossSections[i].ValidStationCount);
                            totalNumberOfChannelPointsFile.WriteLine((i + 1).ToString() + " " + crossSections[i].ValidChannelCount);

                            for (int j = 0; j < crossSections[i].StationValues.Count; ++j)
                            {

                                double x = crossSections[i].StationValues[j].X;
                                double y = crossSections[i].StationValues[j].Y;

                                if (Universal.InDomain(x, y))
                                {
                                    //Write it, inside or outside the channel
                                    allStationsFile.WriteLine(" " + x.ToString("0.00") + "  " + y.ToString("0.00") + "  " +
                                                              crossSections[i].StationValues[j].Elevation.ToString("0.00"));
                                    totalNumberOfPointsFile.WriteLine(x.ToString("0.00") + "  " + y.ToString("0.00") + "  " +
                                                                      crossSections[i].StationValues[j].Elevation.ToString("0.00"));

                                    //Write only those in channel
                                    if (crossSections[i].StationValues[j].InChannel)
                                    {
                                        channelStationsFile.WriteLine(x.ToString("0.00") + "  " + y.ToString("0.00") + "  " +
                                                                      crossSections[i].StationValues[j].Elevation.ToString("0.00"));
                                        totalNumberOfChannelPointsFile.WriteLine(x.ToString("0.00") + "  " + y.ToString("0.00") + "  " +
                                                                                 crossSections[i].StationValues[j].Elevation.ToString("0.00"));
                                    }
                                }
                            }
                        }

                        allStationsFile.Close();
                        channelStationsFile.Close();
                        totalNumberOfPointsFile.Close();

                        // POLYGONS.

                        //Write two files with polygons of each reach: all polygons and channel polygons.
                        string expFileAllPolygons = folderPath + hecRasFileName + "_ALL_POLY.EXP";
                        string expFileChannelPolygons = folderPath + hecRasFileName + "_CHANNEL_POLY.EXP";
                        try
                        {

                            var allPolygonsFile = new StreamWriter(expFileAllPolygons);
                            var channelPolygonsFile = new StreamWriter(expFileChannelPolygons);

                            progressBar.Maximum = crossSections.Count;
                            progressBar.Value = 0;

                            for (int i = 0; i < reachPolygons.Count; ++i)
                            {
                                progressBar.Value++;

                                {
                                    // EXTERNAL POLYGONS:
                                    // Write number of polygon points of this reach, id, and name

                                    int nLeft = reachPolygons[i].ExternalLeftPolygon.Count;
                                    int nBottom = reachPolygons[i].ExternalBottomPolygon.Count;
                                    int nRight = reachPolygons[i].ExternalRightPolygon.Count;
                                    int nTop = reachPolygons[i].ExternalTopPolygon.Count;

                                    //nLeft = 0;
                                    //nBottom = 0;
                                    //nRight = 0;
                                    //nTop = 0;

                                    double x;
                                    double y;

                                    allPolygonsFile.WriteLine((nLeft + nRight + nTop + nBottom).ToString() + "  " + (i + 1).ToString());

                                    // Write sequence of coordinates of external left polygon of this reach.
                                    if (nLeft > 0)
                                        for (int j = 0; j < reachPolygons[i].ExternalLeftPolygon.Count; ++j)
                                        {
                                            x = reachPolygons[i].ExternalLeftPolygon[j].X;
                                            y = reachPolygons[i].ExternalLeftPolygon[j].Y;
                                            if (Universal.InDomain(x, y))
                                                allPolygonsFile.WriteLine(x.ToString("0.00") + "  " + y.ToString("0.00"));
                                        }

                                    // Write points of last cutline of this reach.
                                    if (nBottom > 0)
                                        for (int j = reachPolygons[i].ExternalBottomPolygon.Count - 1; j >= 0; --j)
                                        {
                                            x = reachPolygons[i].ExternalBottomPolygon[j].X;
                                            y = reachPolygons[i].ExternalBottomPolygon[j].Y;
                                            if (Universal.InDomain(x, y))
                                                allPolygonsFile.WriteLine(x.ToString("0.00") + "  " + y.ToString("0.00"));
                                        }

                                    // Write sequence of coordinates of external right polygon of this reach.
                                    if (nRight > 0)
                                        for (int j = reachPolygons[i].ExternalRightPolygon.Count - 1; j >= 0; --j)
                                        {
                                            x = reachPolygons[i].ExternalRightPolygon[j].X;
                                            y = reachPolygons[i].ExternalRightPolygon[j].Y;
                                            if (Universal.InDomain(x, y))
                                                allPolygonsFile.WriteLine(x.ToString("0.00") + "  " + y.ToString("0.00"));
                                        }

                                    // Write points of first cutline of this reach.
                                    if (nTop > 0)
                                        for (int j = 0; j < reachPolygons[i].ExternalTopPolygon.Count; ++j)
                                        {
                                            x = reachPolygons[i].ExternalTopPolygon[j].X;
                                            y = reachPolygons[i].ExternalTopPolygon[j].Y;
                                            if (Universal.InDomain(x, y))
                                                allPolygonsFile.WriteLine(x.ToString("0.00") + "  " + y.ToString("0.00"));
                                        }

                                    //CHANNEL POLYGONS:

                                    nLeft = reachPolygons[i].ChannelLeftPolygon.Count;
                                    nBottom = reachPolygons[i].ChannelBottomPolygon.Count;
                                    nRight = reachPolygons[i].ChannelRightPolygon.Count;
                                    nTop = reachPolygons[i].ChannelTopPolygon.Count;

                                    //nLeft = 0;
                                    //nBottom = 0;
                                    //nRight = 0;
                                    //nTop = 0;

                                    //Write first line of channel polygon of this reach.
                                    channelPolygonsFile.WriteLine((nLeft + nRight + nTop + nBottom).ToString() + "  " + (i + 1).ToString());

                                    // Write sequence of coordinates of channel left polygon of this reach.
                                    if (nLeft > 0)
                                        for (int j = 0; j < reachPolygons[i].ChannelLeftPolygon.Count; ++j)
                                        {
                                            x = reachPolygons[i].ChannelLeftPolygon[j].X;
                                            y = reachPolygons[i].ChannelLeftPolygon[j].Y;
                                            //if (Universal.InDomain(x,y))
                                            channelPolygonsFile.WriteLine(x.ToString("0.00") + "  " + y.ToString("0.00"));
                                        }

                                    //Write sequence of coordinates of channel bottom polygon of this reach.
                                    if (nBottom > 0)
                                        for (int j = reachPolygons[i].ChannelBottomPolygon.Count - 1; j >= 0; --j)
                                        {
                                            x = reachPolygons[i].ChannelBottomPolygon[j].X;
                                            y = reachPolygons[i].ChannelBottomPolygon[j].Y;
                                            channelPolygonsFile.WriteLine(x.ToString("0.00") + "  " + y.ToString("0.00"));
                                        }

                                    // Write sequence of coordinates of channel right polygon of this reach.
                                    if (nRight > 0)
                                        for (int j = reachPolygons[i].ChannelRightPolygon.Count - 1; j >= 0; --j)
                                        {
                                            x = reachPolygons[i].ChannelRightPolygon[j].X;
                                            y = reachPolygons[i].ChannelRightPolygon[j].Y;
                                            channelPolygonsFile.WriteLine(x.ToString("0.00") + "  " + y.ToString("0.00"));
                                        }

                                    //Write sequence of coordinates of channel top polygon of this reach.
                                    if (nTop > 0)
                                        for (int j = 0; j < reachPolygons[i].ChannelTopPolygon.Count; ++j)
                                        {
                                            x = reachPolygons[i].ChannelTopPolygon[j].X;
                                            y = reachPolygons[i].ChannelTopPolygon[j].Y;
                                            channelPolygonsFile.WriteLine(x.ToString("0.00") + "  " + y.ToString("0.00"));
                                        }
                                }

                            }
                            allPolygonsFile.Close();
                            channelPolygonsFile.Close();
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show(Universal.Idioma("ERROR 1101130841: error while creating structures to write polygons. ", "ERROR 1101130841: error creando estructuras para escribir polígonos. ") +
                                ex.Message,
                                "RiverFlow2D",
                                MessageBoxButtons.OK, MessageBoxIcon.Error);
                            return;
                        }

                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(Universal.Idioma("ERROR 2311120752: error trying to write station coordinates. ", "ERROR 2311120752: error escribiendo coordenandas de estructuras. ") +
                            ex.Message, "RiverFlow2D",
                            MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return;
                    }

                    progressBar.Visible = false;
                    MessageBox.Show("Stations coordinates and elevations were saved in:" + Environment.NewLine +
                                    expFileAllStations + Environment.NewLine +
                                    expFileChannelStations + Environment.NewLine + Environment.NewLine +
                                    "Polygon coordinates were saved in:" + Environment.NewLine +
                                    expFileAllStations + Environment.NewLine +
                                    expFileChannelStations
                        , "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 2111120951: error trying to open HEC-RAS file. ", "ERROR 2111120951: error abriendo archivo HEC-RAS. ") +
                    ex.Message, "RiverFlow2D",
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                progressBar.Visible = false;
                Cursor = Cursors.Default;
            }
        }

        private void picBoxHelp_MouseClick(object sender, MouseEventArgs e)
        {
            Help.OpenHelp();
        }


        private void txtInvertZ2_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = CheckForReal(txtInvertZ2, e);
        }

        private void txtInvertZ1_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = CheckForReal(txtInvertZ2, e);
        }

        private void txtInvertZ1_TextChanged(object sender, EventArgs e)
        {
            CulvertTextChanged("Z1");
        }

        private void txtInvertZ2_TextChanged(object sender, EventArgs e)
        {
            CulvertTextChanged("Z2");
        }

        private void richTxtEPSG_LinkClicked(object sender, LinkClickedEventArgs e)
        {
            System.Diagnostics.Process.Start(e.LinkText);
        }



        private void richTxtEPSG_KeyDown(object sender, KeyEventArgs e)
        {
            e.SuppressKeyPress = true;
        }


        private void chckUseElementElevations_CheckedChanged(object sender, EventArgs e)
        {
            if (chckUseElementElevations.Checked)
            {
                lblZ1.Enabled = false;
                lblZ2.Enabled = false;
                txtInvertZ1.Enabled = false;
                txtInvertZ2.Enabled = false;
                txtInvertZ1.Text = "-9999";
                txtInvertZ2.Text = "-9999";
            }
            else
            {
                lblZ1.Enabled = true;
                lblZ2.Enabled = true;
                txtInvertZ1.Enabled = true;
                txtInvertZ2.Enabled = true;
            }
            CulvertTextChanged("UseElementElevations");
        }

        private void chckUseElementElevations_Validated(object sender, EventArgs e)
        {
            UpdateData(chckUseElementElevations);
        }



        private void validatingTextField8_TextChanged(object sender, EventArgs e)
        {

        }


        private void chckADVariableTimeStep_CheckedChanged(object sender, EventArgs e)
        {
            if (chckADVariableTimeStep.Checked)
            {
                txtADTimeStepFactor.Enabled = true;
                txtADTimeStep.Enabled = false;
                if (txtADTimeStepFactor.Text == "")
                {
                    AddError(txtADTimeStepFactor,
                        Universal.Idioma("Pollutant Transport Time Step Factor cannot be empty if the Variable Time Step Option is selected.", ""),
                        "Pollutant Transport panel");
                    txtADTimeStepFactor.BackColor = Color.FromArgb(255, 255, 180, 180);
                    if (!_errors.Contains(txtADTimeStepFactor)) _errors.Add(txtADTimeStepFactor);
                    return;
                }

                double x = Double.Parse(txtADTimeStepFactor.Text);
                if (x <= 0 || x > 3)
                {
                    AddError(txtADTimeStepFactor, Universal.Idioma("Pollutant Transport Time Step Factor must be in the range (0,3]", 
                                                                     ""),
                        "Pollutant Transport panel");
                    txtADTimeStepFactor.BackColor = Color.FromArgb(255, 255, 180, 180);
                    _errors.Add(txtADTimeStepFactor);
                    return;
                }

                txtADTimeStepFactor.BackColor = SystemColors.Window;

            }
            else
            {
                txtADTimeStepFactor.Enabled = false;
                txtADTimeStep.Enabled = true;
                errorProvider.SetError(txtADTimeStepFactor, "");
                txtADTimeStepFactor.BackColor = SystemColors.Control;
                _errors.Remove(txtADTimeStepFactor);

            }
        }

        private void chckADVariableTimeStep_Validated(object sender, EventArgs e)
        {
            UpdateData(chckADVariableTimeStep);
        }

        private void txtADSimulationTime_KeyPress(object sender, KeyPressEventArgs e)
        {
            //checking whether pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
                //check if there is already a decimal point
                if (txtADSimulationTime.Text.Contains("."))
                    e.Handled = true;
        }

        private void txtADStartTime_KeyPress(object sender, KeyPressEventArgs e)
        {
            //checking whether pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
                //check if there is already a decimal point
                if (txtADStartTime.Text.Contains("."))
                    e.Handled = true;
        }

        private void txtADOutputInterval_KeyPress(object sender, KeyPressEventArgs e)
        {
            //checking whether pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
                //check if there is already a decimal point
                if (txtADOutputInterval.Text.Contains("."))
                    e.Handled = true;
        }

        private void txtADTimeStepFactor_TextChanged(object sender, EventArgs e)
        {

        }

        private void txtADTimeStepFactor_KeyPress(object sender, KeyPressEventArgs e)
        {
            //checking whether pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
                //check if there is already a decimal point
                if (txtADTimeStepFactor.Text.Contains("."))
                    e.Handled = true;
        }

        private void txtADTimeStep_KeyPress(object sender, KeyPressEventArgs e)
        {
            //checking whether pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
                //check if there is already a decimal point
                if (txtADTimeStep.Text.Contains("."))
                    e.Handled = true;
        }

        private void txtADSelectiveLumpingParameter_KeyPress(object sender, KeyPressEventArgs e)
        {
            //checking whether pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
                //check if there is already a decimal point
                if (txtADSelectiveLumpingParameter.Text.Contains("."))
                    e.Handled = true;
        }

        private void txtADLongitudinalDispertionCoeff_KeyPress(object sender, KeyPressEventArgs e)
        {
            //checking whether pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
                //check if there is already a decimal point
                if (txtADLongitudinalDispertionCoeff.Text.Contains("."))
                    e.Handled = true;
        }

        private void txtADTransversalDispertionCoeff_KeyPress(object sender, KeyPressEventArgs e)
        {
            //checking whether pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
                //check if there is already a decimal point
                if (txtADTransversalDispertionCoeff.Text.Contains("."))
                    e.Handled = true;
        }

        private void txtADSimulationTime_Validated(object sender, EventArgs e)
        {
            if (txtADSimulationTime.Text != "") UpdateData(txtADSimulationTime);

        }

        private void txtADStartTime_Validated(object sender, EventArgs e)
        {
            if (txtADStartTime.Text != "") UpdateData(txtADStartTime);
        }

        private void txtADOutputInterval_Validated(object sender, EventArgs e)
        {
            if (txtADOutputInterval.Text != "") UpdateData(txtADOutputInterval);
        }

        private void txtADTimeStepFactor_Validated(object sender, EventArgs e)
        {
            if (txtADTimeStepFactor.Text != "") UpdateData(txtADTimeStepFactor);
        }

        private void txtADTimeStep_Validated(object sender, EventArgs e)
        {
            if (txtADTimeStep.Text != "") UpdateData(txtADTimeStep);
        }

        private void txtADSelectiveLumpingParameter_Validated(object sender, EventArgs e)
        {
            if (txtADSelectiveLumpingParameter.Text != "") UpdateData(txtADSelectiveLumpingParameter);
        }

        private void txtADLongitudinalDispertionCoeff_Validated(object sender, EventArgs e)
        {
            if (txtADLongitudinalDispertionCoeff.Text != "") UpdateData(txtADLongitudinalDispertionCoeff);
        }

        private void txtADTransversalDispertionCoeff_Validated(object sender, EventArgs e)
        {
            if (txtADTransversalDispertionCoeff.Text != "") UpdateData(txtADTransversalDispertionCoeff);
        }

        private void txtADSimulationTime_Validating(object sender, CancelEventArgs e)
        {
            //Output interval cannot be empty
            if (txtADSimulationTime.Text == "")
            {
                AddError(txtADSimulationTime, Universal.Idioma("Simulation Time cannot be empty.", "El tiempo de simulación no puede estar vacío."), "Pollutant Transport panel");
                return;
            }

            if (txtADOutputInterval.Text != "")
            {
                //Output interval must be less than simulation time
                double simTime = Double.Parse(txtADSimulationTime.Text);
                double outputInterval = Double.Parse(txtADOutputInterval.Text);

                if (outputInterval > simTime)
                {
                    //If output interval is less than simulation time there is an error with both of them
                    AddError(txtADSimulationTime, Universal.Idioma("Simulation Time must be greater than Output Interval.", 
                        "El tiempo de simulación debe ser mayor que el intervalo de reportes."), "Pollutant Transport panel");
                    AddError(txtADOutputInterval, Universal.Idioma("Output Interval must be less than Simulation Time.", 
                        "El intervalo de reportes debe ser menor que el tiempo de simulación."),
                        "Pollutant Transport panel");
                    return;
                }

                //If simulation time is greater and is not empty then it has no problems
                RemoveError(txtADOutputInterval);
            }
            else
            {
                AddError(txtADSimulationTime, Universal.Idioma("Simulation Time must be greater than Output Interval.", 
                    "El tiempo de simulación debe ser mayor que el intervalo de reportes."), "Pollutant Transport panel");
                return;
            }

            RemoveError(txtADSimulationTime);
        }

        private void txtADOutputInterval_Validating(object sender, CancelEventArgs e)
        {
            //Output interval cannot be empty
            if (txtADOutputInterval.Text == "")
            {
                AddError(txtADOutputInterval, Universal.Idioma("Output Interval cannot be empty.", "El intervalo de salida no puede estar vacío."), "Pollutant Transport panel");
                return;
            }
            else if (txtADSimulationTime.Text != "")
            {
                //Output interval must be less than simulation time
                double simTime = Double.Parse(txtADSimulationTime.Text);
                double outputInterval = Double.Parse(txtADOutputInterval.Text);

                if (outputInterval > simTime)
                {
                    //If output interval is less than simulation time there is an error with both of them
                    AddError(txtADSimulationTime, Universal.Idioma("Simulation Time must be greater than Output Interval.", 
                        "El tiempo de simulación debe ser mayor que el intervalo de reportes."), "Pollutant Transport panel");
                    AddError(txtADOutputInterval, Universal.Idioma("Output Interval must be less or equal to Simulation Time.", 
                        "El intervalo de reportes debe ser menor que el tiempo de simulación."),
                        "Pollutant Transport panel");
                    return;
                }

                //If simulation time is greater and is not empty then it has no problems
                RemoveError(txtADSimulationTime);
            }
            else
                AddError(txtADOutputInterval, Universal.Idioma("Output Interval must be less than the Simulation Time.",
                    "El intervalo de reportes debe ser menor que el tiempo de simulación."),
                    "Pollutant Transport panel");

            RemoveError(txtADOutputInterval);
        }

        private void txtADTimeStepFactor_Validating(object sender, CancelEventArgs e)
        {
            if (chckADVariableTimeStep.Checked)
            {
                if (txtADTimeStepFactor.Text == "")
                {
                    AddError(txtADTimeStepFactor,
                       Universal.Idioma("Pollutant Transport Time Step Factor cannot be empty if the Variable Time Step Option is selected.", ""),
                        "Pollutant Transport panel");
                    txtADTimeStepFactor.BackColor = Color.FromArgb(255, 255, 180, 180);
                    if (!_errors.Contains(txtADTimeStepFactor)) _errors.Add(txtADTimeStepFactor);
                    return;
                }

                double x = Double.Parse(txtADTimeStepFactor.Text);
                if (x <= 0 || x > 3)
                {
                    AddError(txtADTimeStepFactor, Universal.Idioma("Pollutant Transport Time Step Factor must be in the range (0,3]", ""),
                        "Pollutant Transport panel");
                    txtADTimeStepFactor.BackColor = Color.FromArgb(255, 255, 180, 180);
                    _errors.Add(txtADTimeStepFactor);
                }
                else
                {
                    errorProvider.SetError(txtADTimeStepFactor, "");
                    txtADTimeStepFactor.BackColor = SystemColors.Window;
                    _errors.Remove(txtADTimeStepFactor);
                }
            }
        }

        private void txtADTimeStep_Validating(object sender, CancelEventArgs e)
        {
            if (txtADTimeStep.Text == "")
            {
                AddError(txtADTimeStep, Universal.Idioma("Time Step cannot be empty", "Falta Intervalo de Tiempo"), "Pollutant Transport panel");
                txtADTimeStep.BackColor = Color.FromArgb(255, 255, 180, 180);
                if (!_errors.Contains(txtADTimeStep)) _errors.Add(txtADTimeStep);
                return;
            }
            double x = Double.Parse(txtADTimeStep.Text);
            if (x <= 0)
            {
                AddError(txtADTimeStep, Universal.Idioma("Time Step must be greater than 0", "Intervalo de tiempo debe ser mayor que 0"), "Pollutant Transport panel");
                txtADTimeStep.BackColor = Color.FromArgb(255, 255, 180, 180);
                if (!_errors.Contains(txtADTimeStep)) _errors.Add(txtADTimeStep);
            }
            else
            {
                errorProvider.SetError(txtADTimeStep, "");
                txtADTimeStep.BackColor = SystemColors.Window;
                _errors.Remove(txtADTimeStep);
            }
        }

        private void txtSelectiveLumpingParameter_VisibleChanged(object sender, EventArgs e)
        {

        }

        private void txtADSelectiveLumpingParameter_Validating(object sender, CancelEventArgs e)
        {
            if (txtADSelectiveLumpingParameter.Text == "")
            {
                AddError(txtADSelectiveLumpingParameter, Universal.Idioma("Selective Lumping Parameter cannot be empty.", ""),
                    "Pollutant Transport panel");
                return;
            }
            double x = Double.Parse(txtADSelectiveLumpingParameter.Text);
            if (x < 0)
            {
                AddError(txtADSelectiveLumpingParameter, Universal.Idioma("Selective Lumping Parameter cannot be negative.", ""),
                    "Pollutant Transport panel");
            }
            else
            {
                RemoveError(txtADSelectiveLumpingParameter);
            }
        }

        private void txtADLongitudinalDispertionCoeff_Validating(object sender, CancelEventArgs e)
        {
            if (txtADLongitudinalDispertionCoeff.Text == "")
            {
                AddError(txtADLongitudinalDispertionCoeff, Universal.Idioma("Longitudinal dispersion coefficient cannot be empty.", "El coeficiente longitudinal de dispersión no puede estar vacío."),
                    "Pollutant Transport panel");
                return;
            }
            double x = Double.Parse(txtADLongitudinalDispertionCoeff.Text);
            if (x < 0.0)
            {
                AddError(txtADLongitudinalDispertionCoeff, Universal.Idioma("Longitudinal dispersion coefficient cannot be negative", ""),
                    "Pollutant Transport panel");
            }
            else
            {
                RemoveError(txtADLongitudinalDispertionCoeff);
            }
        }

        private void txtADTransversalDispertionCoeff_Validating(object sender, CancelEventArgs e)
        {
            if (txtADTransversalDispertionCoeff.Text == "")
            {
                AddError(txtADTransversalDispertionCoeff, Universal.Idioma("Transversal dispersion coefficient cannot be empty.", "El coeficiente transversal de dispersión no puede estar vacío."),
                    "Pollutant Transport panel");
                return;
            }
            double x = Double.Parse(txtADTransversalDispertionCoeff.Text);
            if (x < 0.0)
            {
                AddError(txtADTransversalDispertionCoeff, Universal.Idioma("Transversal dispersion coefficient cannot be negative", ""),
                    "Pollutant Transport panel");
            }
            else
            {
                RemoveError(txtADTransversalDispertionCoeff);
            }
        }

        private void radioADCoupled_CheckedChanged(object sender, EventArgs e)
        {
            CoupledCheckedChanged();
        }

        private void btnSaveAdvectionDispersion_Click(object sender, EventArgs e)
        {

            var saveFileDialog = new SaveFileDialog
            {
                Filter = "AD files (*.AD)|*.AD",
                InitialDirectory = _currentProjectPath,
                FileName = _currentProjectName + ".AD",
                FilterIndex = 1,
                RestoreDirectory = true
            };

            try
            {
                if (saveFileDialog.ShowDialog() == DialogResult.OK)
                {
                    ValFile.SaveRiverFLO2DdataVal = true;
                    _dataManager.SaveAdToFile(saveFileDialog.FileName);
                    string fileNameVal = saveFileDialog.FileName.Remove(saveFileDialog.FileName.Length - 2) + "VAL";
                    SaveRiverFLOW2DdataVAL(fileNameVal);
                    ValFile.SaveRiverFLO2DdataVal = false;
                }
            }
            catch
            {
                MessageBox.Show(Universal.Idioma("ERROR 0404131021: error while saving .AD file.", "ERROR 0404131021: error almacenando archivo .AD."),
                    "RiverFlow2D", MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
            }
        }

        private void btnOpenAdvectionDispersion_Click(object sender, EventArgs e)
        {
            var openFileDialog = new OpenFileDialog
            {
                Filter = "AD files (*.AD)|*.AD",
                InitialDirectory = _currentProjectPath,
                FileName = _currentProjectName + ".AD",
                FilterIndex = 1,
                RestoreDirectory = true,
                CheckFileExists = true
            };

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                try
                {
                    _dataManager.LoadAdFromFile(openFileDialog.FileName);
                    UpdateWithAdFile();
                    CoupledCheckedChanged();
                }
                catch
                {
                    MessageBox.Show(Universal.Idioma("ERROR 2810111729: error trying to open .AD file.", "ERROR 2810111729: error abriendo archivo .AD."),
                        "RiverFlow2D", MessageBoxButtons.OK,
                        MessageBoxIcon.Error);
                }

            }
        }

        private void radioADImplicit_CheckedChanged(object sender, EventArgs e)
        {
            if (radioADImplicit.Checked)
            {
                radioADExplicit.Checked = false;
            }
            else
            {
                radioADExplicit.Checked = true;
            }
        }

        private void radioADImplicit_Validated(object sender, EventArgs e)
        {

            _dataManager.Set((string)radioADImplicit.Tag, Convert.ToInt32(!radioADExplicit.Checked));
            UpdateData(radioADImplicit);
            UpdateData(radioADExplicit);
        }

        private void radioADExplicit_Validated(object sender, EventArgs e)
        {
            _dataManager.Set((string)radioADExplicit.Tag, Convert.ToInt32(radioADExplicit.Checked));
            UpdateData(radioADImplicit);
            UpdateData(radioADExplicit);
        }


        private void radioADUncoupled_CheckedChanged(object sender, EventArgs e)
        {
            if (radioADUncoupled.Checked)
            {
                btnADDepthAndVelocitiesFieldFile.Enabled = true;
                //txtADDepthAndVelocityFileName.Enabled = true;
                lblADSelectiveLumpingParameter.Enabled = true;
                txtADSelectiveLumpingParameter.Enabled = true;
                groupBoxADComputationalControlData.Enabled = true;
                ////radioADCoupled.Checked = false;
                EnableTimeControlData(true);

            }
            else
            {
                btnADDepthAndVelocitiesFieldFile.Enabled = false;
                //txtADDepthAndVelocityFileName.Enabled = false;
                lblADSelectiveLumpingParameter.Enabled = false;
                txtADSelectiveLumpingParameter.Enabled = false;
                groupBoxADComputationalControlData.Enabled = false;
                ////radioADCoupled.Checked = true;
                EnableTimeControlData(false);
            }
        }

        private void radioADCoupled_Validated(object sender, EventArgs e)
        {
            _dataManager.Set((string)radioADCoupled.Tag, Convert.ToInt32(radioADCoupled.Checked));

            //UpdateData(radioADCoupled);
            //UpdateData(radioADUncoupled);
            //UpdateData(txtADDepthAndVelocityFileName);
        }

        private void radioADUncoupled_Validated(object sender, EventArgs e)
        {
            _dataManager.Set((string)radioADUncoupled.Tag, Convert.ToInt32(radioADCoupled.Checked));
            //UpdateData(radioADUncoupled);
            //UpdateData(radioADCoupled);
            //UpdateData(txtADDepthAndVelocityFileName);
        }

        private void chckHotStart_CheckedChanged(object sender, EventArgs e)
        {

        }

        private void chckADHotStart_Validated(object sender, EventArgs e)
        {
            UpdateData(chckADHotStart);
        }

        private void btnADDepthAndVelocitiesFieldFile_Click(object sender, EventArgs e)
        {
            var openFileDialog = new OpenFileDialog
            {
                Filter = "UVHB files (*.UVHB)|*.UVHB",
                InitialDirectory = _currentProjectPath,
                FileName = _currentProjectName + ".UVHB",
                FilterIndex = 1,
                RestoreDirectory = true,
                CheckFileExists = true
            };

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                txtADDepthAndVelocityFileName.Text = Path.ChangeExtension(openFileDialog.FileName, null);
                // Go to end of text
                txtADDepthAndVelocityFileName.Select(txtADDepthAndVelocityFileName.Text.Length, 0);
                UpdateData(txtADDepthAndVelocityFileName);
            }
        }

        private void txtADDepthAndVelocityFileName_Validated(object sender, EventArgs e)
        {
            if (txtADDepthAndVelocityFileName.Text == "")
                txtADDepthAndVelocityFileName.Text = "(no file)";
            UpdateData(txtADDepthAndVelocityFileName);
        }

        private void EnableTimeControlData(bool enable)
        {
            groupBoxTimeAdvectionDispersion.Enabled = enable;
            txtADSimulationTime.Enabled = enable;
            txtADStartTime.Enabled = enable;
            txtADOutputInterval.Enabled = enable;
            chckADVariableTimeStep.Enabled = enable;
            txtADTimeStepFactor.Enabled = enable;
            txtADTimeStep.Enabled = enable;
            chckADHotStart.Enabled = enable;
            lblADSimulationTime.Enabled = enable;
            lblADStartTime.Enabled = enable;
            lblADOutputInterval.Enabled = enable;
            lblADTimeStepFactor.Enabled = enable;
            lblADTimeStep.Enabled = enable;
        }

        private void CoupledCheckedChanged()
        {
            if (radioADCoupled.Checked)
            {

                btnADDepthAndVelocitiesFieldFile.Enabled = false;
                //txtADDepthAndVelocityFileName.Enabled = false;
                lblADSelectiveLumpingParameter.Enabled = false;
                txtADSelectiveLumpingParameter.Enabled = false;
                groupBoxADComputationalControlData.Enabled = false;
                ////radioADUncoupled.Checked = false;
                EnableTimeControlData(false);

            }
            else
            {
                btnADDepthAndVelocitiesFieldFile.Enabled = true;
                //txtADDepthAndVelocityFileName.Enabled = true;
                lblADSelectiveLumpingParameter.Enabled = true;
                txtADSelectiveLumpingParameter.Enabled = true;
                groupBoxADComputationalControlData.Enabled = true;
                ////radioADUncoupled.Checked = true;
                EnableTimeControlData(true);
            }
        }


        private void TurnOffAll()
        {
            tabOptions.Visible = false;
            //tabWind.Visible = false; susbtituted by tabWinPlus
            tabWindPlus.Visible = false;
            tabMud.Visible = false;
            //tabSedimentTransport.Visible = false;
            tabSedimentTransportPlus.Visible = false;
            tabPollutantTransportPlus.Visible = false;
            tabOptions2.Visible = false;
            tabBridges.Visible = false;
            tabOilSpillOnLand.Visible = false;
            tabInfiltration.Visible = false;
            tabControlOpenBoundaryConditionsOBCP.Visible = false;
        }


        private void TurnOnAll()
        {
            tabOptions.Visible = true;
            //tabWind.Visible = true; susbtituted by tabWinPlus
            tabWindPlus.Visible = true;
            tabMud.Visible = true;
            //tabSedimentTransport.Visible = true;
            tabSedimentTransportPlus.Visible = true;
            tabPollutantTransportPlus.Visible = true;
            tabOptions2.Visible = true;
            tabBridges.Visible = true;
            tabOilSpillOnLand.Visible = true;
            tabInfiltration.Visible = true;
            tabControlOpenBoundaryConditionsOBCP.Visible = true;
        }

        private void treeViewOptions_NodeMouseClick(object sender, TreeNodeMouseClickEventArgs e)
        {

            string nodeText = e.Node.Text;

            if (nodeText == "Modules" | nodeText == "Módulos"
                | nodeText == "Components" | nodeText == "Componentes"
                | nodeText == "Output" | nodeText == "Salida"
                | nodeText == "Options" | nodeText == "Opciones"
                | nodeText == "Help" | nodeText == "Ver Ayuda")
                //Do nothing
                return;

            //Check that for current model, its available modules and components.
            bool changePanel = true;
            if (nodeText == "View Help" || nodeText == "About RiverFlow2D" || nodeText == "Ver Help" || nodeText == "Acerca de RiverFlow2D")
                changePanel = false;
            else if (RiverDipModel == "Model CPU" || RiverDipModel == "Model GPU" || RiverDipModel == "Modelo CPU" || RiverDipModel == "Modelo GPU")
            {
                //if (nodeText == "Wind")
                //	changePanel = false;
            }
            else //Model FE.
                if (nodeText == "Mud/Debris Flow" || nodeText == "Gates" || nodeText == "Bridges"
                    || nodeText == "Old Spill on Land" || nodeText == "Dam Breach" ||

                    nodeText == "Flujo de Lodos/Detritos" || nodeText == "Compuertas" || nodeText == "Puentes"
                    || nodeText == "Derrame de Petroléo" || nodeText == "Brechas en Presas"

                    )
                changePanel = false;

            _bridgeTabShowing = false;

            if (changePanel)
            {
                // remove all tabs
                for (int i = tabOptions.TabPages.Count - 1; i >= 0; i--)
                {
                    tabOptions.TabPages.Remove(tabOptions.TabPages[i]);
                }
                TurnOffAll();
            }

            //e.Node.BackColor = Color.LightSkyBlue;
            switch (nodeText)
            {
                case "Control Data":
                case "Control":

                    tabOptions.Visible = true;
                    tabOptions.TabPages.Add(_savedTabPages[0]);
                    break;

                case "Sediment Transport":
                case "Transporte de Sedimentos":
                    if (changePanel)
                    {
                        if (RiverDipModel == "Model CPU" || RiverDipModel == "Model GPU" ||
                            RiverDipModel == "Modelo CPU" || RiverDipModel == "Modelo GPU")
                        {
                            tabOptions.Visible = true;
                            tabOptions.TabPages.Add(_savedTabPages[20]);
                            picBoxRiverImageFaded.Parent = tabPageSedimentTransportPlus;

                        }
                        else //FE model:
                        {
                            tabOptions.Visible = true;
                            tabOptions.TabPages.Add(_savedTabPages[1]);
                            picBoxRiverImageFaded.Parent = tabSedimentTransport;
                        }
                    }
                    else
                        MessageBox.Show(Universal.Idioma("The Sediment Transport module is not available for RiverFlow2D " + RiverDipModel + ".\n" +
                                        "It is currently available in the finite element RiverFlow2D Model FE.", ""),
                            "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Information);

                    break;

                case "Rainfall/Evaporation":
                case "Lluvia/Evaporación":
                    tabOptions.Visible = true;
                    tabOptions.TabPages.Add(_savedTabPages[2]);
                    picBoxRiverImageFaded.Parent = tabRainfallEvaporation;
                    break;

                case "Graphic Output Options":
                case "Opciones de Salida Gráfica":
                    tabOptions.Visible = true;
                    tabOptions.TabPages.Add(_savedTabPages[3]);
                    picBoxRiverImageFaded.Parent = tabGraphicOutputOptions;
                    break;

                case "Profile Output":
                case "Reportes en Perfiles":
                    tabOptions.Visible = true;
                    tabOptions.TabPages.Add(_savedTabPages[4]);
                    picBoxRiverImageFaded.Parent = tabProfileCutOutput;
                    break;

                case "Cross Section Output":
                case "Reportes en Secciones Transversales":
                    tabOptions.Visible = true;
                    tabOptions.TabPages.Add(_savedTabPages[5]);
                    picBoxRiverImageFaded.Parent = tabCrossSectionOutput;
                    break;

                case "Inflow Boundary Data":
                case "Datos en Entradas":
                    tabOptions.Visible = true;
                    tabOptions.TabPages.Add(_savedTabPages[6]);
                    picBoxRiverImageFaded.Parent = tabInflowBoundaryData;
                    break;

                case "Outflow Boundary Data":
                case "Datos en Salidas":
                    tabOptions.Visible = true;
                    tabOptions.TabPages.Add(_savedTabPages[7]);
                    picBoxRiverImageFaded.Parent = tabOutflowBoundaryData;
                    break;

                case "Culverts":
                case "Alcantarillas":
                    tabOptions.Visible = true;
                    tabOptions.TabPages.Add(_savedTabPages[8]);
                    picBoxRiverImageFaded.Parent = tabCulvertsData;
                    break;

                case "Observation Points":
                case "Puntos de Observación":
                    tabOptions.Visible = true;
                    tabOptions.TabPages.Add(_savedTabPages[9]);
                    picBoxRiverImageFaded.Parent = tabObservationPoints;
                    break;

                case "Bridge Piers":
                case "Pilas de Puentes":
                    tabOptions.Visible = true;
                    tabOptions.TabPages.Add(_savedTabPages[10]);
                    picBoxRiverImageFaded.Parent = tabPiersDragForces;
                    break;

                case "Open Boundary Conditions":
                case "Condiciones de Contorno Abiertos":

                    //OBCP:
                    tabOptions.Visible = true;
                    tabOptions.TabPages.Add(_savedTabPages[26]);
                    picBoxRiverImageFaded.Parent = tabPageOBCP;

                    break;

                case "Sources and Sinks":
                case "Fuentes y Sumideros":
                    tabOptions.Visible = true;
                    tabOptions.TabPages.Add(_savedTabPages[12]);
                    picBoxRiverImageFaded.Parent = tabSourcesAndSinks;
                    break;

                case "Weirs":
                case "Vertederos":
                    tabOptions.Visible = true;
                    tabOptions.TabPages.Add(_savedTabPages[13]);
                    picBoxRiverImageFaded.Parent = tabWeirsPage;
                    break;

                case "Internal Rating Tables":
                case "Tablas Internas de Caudal":
                    tabOptions.Visible = true;
                    tabOptions.TabPages.Add(_savedTabPages[14]);
                    picBoxRiverImageFaded.Parent = tabInternalRatingTables;
                    break;

                case "Pollutant Transport":
                case "Calidad del Agua":

                    if (changePanel)
                    {
                        if (RiverDipModel == "Model CPU" || RiverDipModel == "Model GPU" ||
                            RiverDipModel == "Modelo CPU" || RiverDipModel == "Modelo GPU"
                            )
                        {
                            tabOptions.Visible = true;
                            tabOptions.TabPages.Add(_savedTabPages[21]);
                            picBoxRiverImageFaded.Parent = tabPagePollutantTransportPlus;
                        }
                        else //FE model:
                        {
                            tabOptions.Visible = true;
                            tabOptions.TabPages.Add(_savedTabPages[16]);
                            picBoxRiverImageFaded.Parent = tabPollutantTransport;
                        }
                    }
                    break;

                //case "River Animator":

                //    tabOptions.Visible = true;
                //    tabOptions.TabPages.Add(_savedTabPages[15]);
                //    picBoxRiverImageFaded.Parent = tabRiverFLO2DPlotter;
                //    break;

                case "Tools":
                case "Herramientas":
                    tabOptions.Visible = true;
                    tabOptions.TabPages.Add(_savedTabPages[17]);
                    picBoxRiverImageFaded.Parent = tabTools;
                    break;

                case "Wind":
                case "Viento":
                    //if (changePanel)
                    //{
                    tabOptions.Visible = true;
                    tabOptions.TabPages.Add(_savedTabPages[18]);
                    picBoxRiverImageFaded.Parent = tabPageWindPlus;
                    //}
                    //else
                    //	MessageBox.Show(Universal.Idioma("The Wind component is not available for RiverFlow2D " + RiverDipModel + ".\n" +
                    //									"It is currently available in the finite element RiverFlow2D Model FE.",
                    //		"RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    break;

                case "Gates":
                case "Compuertas":
                    if (changePanel)
                    {
                        tabOptions.Visible = true;
                        tabOptions.TabPages.Add(_savedTabPages[22]);
                        picBoxRiverImageFaded.Parent = tabPageGates;
                    }
                    else
                        MessageBox.Show(Universal.Idioma("The Gates component is not available for RiverFlow2D " + RiverDipModel + ".\n" +
                                        "It is currently available in the finite volume RiverFlow2D Model CPU or Model GPU.", ""),
                            "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    break;

                case "Bridges":
                case "Puentes":
                    if (changePanel)
                    {
                        tabOptions.Visible = true;
                        tabOptions.TabPages.Add(_savedTabPages[23]);
                        picBoxRiverImageFaded.Parent = tabPageBridges;
                        _bridgeTabShowing = false;
                    }
                    else
                        MessageBox.Show(Universal.Idioma("The Bridges component is not available for RiverFlow2D " + RiverDipModel + ".\n" +
                                        "It is currently available in the finite volume RiverFlow2D Model CPU or Model GPU.", ""),
                            "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    break;

                case "Oil Spill on Land":
                case "Derrame de Petróleo":
                    if (changePanel)
                    {
                        tabOptions.Visible = true;
                        tabOptions.TabPages.Add(_savedTabPages[24]);
                        picBoxRiverImageFaded.Parent = tabPageOilSpillOnLand;
                    }
                    else
                        MessageBox.Show(Universal.Idioma("The Oil Spill on Land component is not available for RiverFlow2D " + RiverDipModel + ".\n" +
                                        "It is currently available in the finite volume RiverFlow2D Model CPU or Model GPU.", ""),
                            "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    break;


                case "Infiltration":
                case "Infiltración":
                    if (changePanel)
                    {
                        tabOptions.Visible = true;
                        tabOptions.TabPages.Add(_savedTabPages[25]);
                        picBoxRiverImageFaded.Parent = tabPageInfiltration;
                        InfiltrationpPametersChanged = false;
                    }
                    else
                        MessageBox.Show(Universal.Idioma("The Infiltration component is not available for RiverFlow2D " + RiverDipModel + ".\n" +
                                        "It is currently available in the finite volume RiverFlow2D Model CPU or Model GPU.", ""),
                            "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    break;



                case "Dam Breach":
                case "Brechas en Presas":
                    if (changePanel)
                    {
                        tabOptions.Visible = true;
                        tabOptions.TabPages.Add(_savedTabPages[27]);
                        picBoxRiverImageFaded.Parent = tabPageDamBreach;
                    }
                    else
                        MessageBox.Show(Universal.Idioma("The Dam Breach component is not available for RiverFlow2D " + RiverDipModel + ".\n" +
                                        "It is currently available in the finite volume RiverFlow2D Model CPU or Model GPU.", ""),
                          "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    break;

                case "Mud/Debris Flow":
                case "Flujo de Lodos/Detritos":
                    if (changePanel)
                    {
                        tabOptions.Visible = true;
                        tabOptions.TabPages.Add(_savedTabPages[19]);
                        picBoxRiverImageFaded.Parent = tabPageMudDebrisFlow;
                    }
                    else
                        MessageBox.Show(Universal.Idioma("The Mud/Debris Flow module is not available for RiverFlow2D " + RiverDipModel + ".\n" +
                                        "It is currently available in the finite volume RiverFlow2D Model CPU or Model GPU.", ""),
                            "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    break;

                case "Model Selection":
                case "Selección de Modelos":
                    var modelSel = new ModelSelection();
                    RiverDipNewModel = "";
                    modelSel.ShowDialog();
                    if (RiverDipNewModel != "")
                        if (RiverDipModel != RiverDipNewModel)
                        {
                            SetRiverDipModel(RiverDipNewModel);
                            FixGraphicOutputPlotOptions();
                            // Change model selection in Control Data panel:
                            loading = true;
                            if (RiverDipModel == "Model CPU")
                                radioCPU.Checked = true;
                            else
                                radioGPU.Checked = true;
                            loading = false;

                        }

                    tabOptions.Visible = true;
                    tabOptions.TabPages.Add(_savedTabPages[0]);
                    break;

				case "License":
				case "Licencia":
					var license = new LicenseManagement();
					RiverDipNewModel = "";
					license.ShowDialog();
					tabOptions.Visible = true;
					tabOptions.TabPages.Add(_savedTabPages[0]);
					break;

				case "View Help":
                case "Ayuda":
                    Help.OpenHelp();
                    break;

                case "About RiverFlow2D":
                case "Acerca de RiverFlow2D":
                    var about = new RiverFlo2DAboutBox();
                    about.Text = Universal.Idioma("About RiverFlow2DDIP", "Acerca de RiverFLO2DDIP");
                    about.ShowDialog();
                    break;
            }

            picBoxRiverImageFaded.Parent = null;
        }


        private void chckWind_CheckedChanged(object sender, EventArgs e)
        {
            //int size = tabPageWind.Controls.Count;

            //		for (int newCol = 0; newCol < size; ++newCol)
            //		{
            //			tabPageWind.Controls[newCol].Enabled = chckWind.Checked;
            //			RemoveError(tabPageWind.Controls[newCol]);

            //			if (tabPageWind.Controls[newCol] is Panel)
            //			{
            //				int sizePanel = tabPageWind.Controls[newCol].Controls.Count;

            //				for (int j = 0; j < sizePanel; ++j)
            //				{
            //					tabPageWind.Controls[newCol].Controls[j].Enabled = chckWind.Checked;
            //					RemoveError(tabPageWind.Controls[newCol].Controls[j]);
            //				}
            //			}
            //		}		

            int size = tabPageWindPlus.Controls.Count;

            for (int i = 0; i < size; ++i)
            {
                tabPageWindPlus.Controls[i].Enabled = chckWind.Checked;
                RemoveError(tabPageWindPlus.Controls[i]);

                if (tabPageWindPlus.Controls[i] is Panel)
                {
                    int sizePanel = tabPageWindPlus.Controls[i].Controls.Count;

                    for (int j = 0; j < sizePanel; ++j)
                    {
                        tabPageWindPlus.Controls[i].Controls[j].Enabled = chckWind.Checked;
                        RemoveError(tabPageWindPlus.Controls[i].Controls[j]);
                    }
                }
            }
        }

        private void btnOpenWind_Click(object sender, EventArgs e)
        {
            var openFileDialog = new OpenFileDialog
            {
                Filter = "WIND files (*.WIND)|*.WIND",
                InitialDirectory = _currentProjectPath,
                FileName = _currentProjectName + ".WIND",
                FilterIndex = 1,
                RestoreDirectory = true,
                CheckFileExists = true
            };

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                try
                {
                    _dataManager.LoadWindFromFile(openFileDialog.FileName);
                    UpdateWithWindFile();

                    _dataManager.Set((string)radioConstant.Tag, 1); //Only this option for now.
                    radioConstant.Checked = true;
                }
                catch
                {
                    MessageBox.Show(Universal.Idioma("ERROR 1306131539: error trying to open .WIND file.", "ERROR 1306131539: error abriendo archivo .WIND."),
                        "RiverFlow2D", MessageBoxButtons.OK,
                        MessageBoxIcon.Error);
                }

            }
        }

        private void btnSaveWind_Click(object sender, EventArgs e)
        {
            var saveFileDialog = new SaveFileDialog
            {
                Filter = "WIND files (*.WIND)|*.WIND",
                InitialDirectory = _currentProjectPath,
                FileName = _currentProjectName + ".WIND",
                FilterIndex = 1,
                RestoreDirectory = true
            };

            try
            {
                if (saveFileDialog.ShowDialog() == DialogResult.OK)
                {
                    ValFile.SaveRiverFLO2DdataVal = true;
                    string fileNameVal = saveFileDialog.FileName.Remove(saveFileDialog.FileName.Length - 4) + "VAL";
                    SaveRiverFLOW2DdataVAL(fileNameVal);
                    ValFile.SaveRiverFLO2DdataVal = false;
                }
            }
            catch
            {
                MessageBox.Show(Universal.Idioma("ERROR 1306131541: error trying to save .WIND file.", "ERROR 1306131541: error almacenando archivo .WIND."),
                    "RiverFlow2D", MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
            }
        }

        private void txtWindDensity_Validated(object sender, EventArgs e)
        {
            if (txtWindDensity.Text != "") UpdateData(txtWindDensity);

        }

        private void txtC10_TextChanged(object sender, EventArgs e)
        {

        }

        private void txtC10_Validated(object sender, EventArgs e)
        {
            if (txtC10.Text != "") UpdateData(txtC10);
        }

        private void txtUWConstant_Validated(object sender, EventArgs e)
        {
            if (txtUWConstant.Text != "") UpdateData(txtUWConstant);
        }

        private void txtVwConstant_Validated(object sender, EventArgs e)
        {
            if (txtVwConstant.Text != "") UpdateData(txtVwConstant);
        }

        private void txtWindDensity_Validating(object sender, CancelEventArgs e)
        {
            if (txtWindDensity.Text == "")
            {
                AddError(txtWindDensity, Universal.Idioma("Wind density cannot be empty.", "La densidad del aire no puede estar vacía."), "Wind panel");
                return;
            }

            double x = Double.Parse(txtWindDensity.Text);
            if (x < 0.0 || x > 100)
            {
                AddError(txtWindDensity, Universal.Idioma("Wind density must be in the range [0 ,100]", "Densidad del aire debe estar en el intervalo [0,100]"), "Wind panel");
            }
            else
            {
                RemoveError(txtWindDensity);
            }
        }

        private void txtC10_Validating(object sender, CancelEventArgs e)
        {
            if (txtC10.Text == "")
            {
                AddError(txtC10, Universal.Idioma("C10 cannot be empty.", "C10 no puede estar vacío."), "Wind panel");
                return;
            }

            double x = Double.Parse(txtC10.Text);
            if (x < 0.0 || x > 100)
            {
                AddError(txtC10, Universal.Idioma("C10 must be in the range [0 ,100]", "C10 debe estar en el intervalo [0,100]"), "Wind panel");
            }
            else
            {
                RemoveError(txtC10);
            }
        }

        private void txtUWConstant_Validating(object sender, CancelEventArgs e)
        {
            if (txtUWConstant.Text == "")
            {
                AddError(txtUWConstant, Universal.Idioma("UW constant cannot be empty.", "La constante UW no puede estar vacía."), "Wind panel");
                return;
            }

            double x = Double.Parse(txtUWConstant.Text);
            if (x < -100 || x > 100)
            {
                AddError(txtUWConstant, Universal.Idioma("UW must be in the range [-100 ,100]", "UW debe estar en el intervalo [-100, 100]"), "Wind panel");
            }
            else
            {
                RemoveError(txtUWConstant);
            }
        }

        private void txtVwConstant_Validating(object sender, CancelEventArgs e)
        {
            if (txtVwConstant.Text == "")
            {
                AddError(txtVwConstant, Universal.Idioma("VW constant cannot be empty.", "La constante VW no puede estar vacía."), "Wind panel");
                return;
            }

            double x = Double.Parse(txtVwConstant.Text);
            if (x < -100 || x > 100)
            {
                AddError(txtVwConstant, Universal.Idioma("VW must be in the range [-100 ,100]", "VW debe estar en el intervalo [-100, 100]"), "Wind panel");
            }
            else
            {
                RemoveError(txtVwConstant);
            }
        }

        private void txtWindDensity_KeyPress(object sender, KeyPressEventArgs e)
        {
            //checking whether pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
                //check if there is already a decimal point
                if (txtWindDensity.Text.Contains("."))
                    e.Handled = true;
        }

        private void txtC10_KeyPress(object sender, KeyPressEventArgs e)
        {
            //checking whether pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
                //check if there is already a decimal point
                if (txtC10.Text.Contains("."))
                    e.Handled = true;
        }

        private void txtUWConstant_KeyDown(object sender, KeyEventArgs e)
        {

        }

        private void txtUWConstant_KeyPress(object sender, KeyPressEventArgs e)
        {
            //checking whether pressed key is number, decimal, backspace, or minus sign
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b' && e.KeyChar != '-')
                e.Handled = true;
            else if (e.KeyChar == '.')
                //check if there is already a decimal point
                if (txtUWConstant.Text.Contains("."))
                    e.Handled = true;
            if (e.KeyChar == '-')
                //check if there is already a minus sign
                if (txtUWConstant.Text.Contains("-"))
                    e.Handled = true;
        }

        private void txtVwConstant_KeyPress(object sender, KeyPressEventArgs e)
        {
            //checking whether pressed key is number, decimal, backspace, or minus sign
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b' && e.KeyChar != '-')
                e.Handled = true;
            else if (e.KeyChar == '.')
                //check if there is already a decimal point
                if (txtVwConstant.Text.Contains("."))
                    e.Handled = true;
            if (e.KeyChar == '-')
                //check if there is already a minus sign
                if (txtVwConstant.Text.Contains("-"))
                    e.Handled = true;
        }

        private void radioConstant_Validated(object sender, EventArgs e)
        {

            _dataManager.Set((string)radioConstant.Tag, Convert.ToInt32(radioConstant.Checked));
        }

        private void txtVwConstant_TextChanged(object sender, EventArgs e)
        {

        }

        private void radioVariable_Validated(object sender, EventArgs e)
        {
            _dataManager.Set((string)radioVariable.Tag, Convert.ToInt32(radioVariable.Checked));

        }

        private void chckWind_Validated(object sender, EventArgs e)
        {
            UpdateData(chckWind);
        }

        private void radioVariable_CheckedChanged(object sender, EventArgs e)
        {
            txtUWConstant.Enabled = false;
            txtVwConstant.Enabled = false;
        }

        private void radioConstant_CheckedChanged(object sender, EventArgs e)
        {
            txtUWConstant.Enabled = true;
            txtVwConstant.Enabled = true;
        }




        private void txtYieldStress_KeyPress(object sender, KeyPressEventArgs e)
        {
            //checking whether pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
                //check if there is already a decimal point
                if (txtYieldStress.Text.Contains("."))
                    e.Handled = true;
        }

        private void txtBinghamViscosity_KeyPress(object sender, KeyPressEventArgs e)
        {
            //checking whether pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
                //check if there is already a decimal point
                if (txtBinghamViscosity.Text.Contains("."))
                    e.Handled = true;
        }

        private void txtInternalFrictionAngle_KeyPress(object sender, KeyPressEventArgs e)
        {
            //checking whether pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
                //check if there is already a decimal point
                if (txtInternalFrictionAngle.Text.Contains("."))
                    e.Handled = true;
        }

        private void txtMaterialDensity_KeyPress(object sender, KeyPressEventArgs e)
        {
            //checking whether pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
                //check if there is already a decimal point
                if (txtMaterialDensity.Text.Contains("."))
                    e.Handled = true;
        }

        private void txtYieldStress_Validated(object sender, EventArgs e)
        {
            if (txtYieldStress.Text != "") UpdateData(txtYieldStress);
        }

        private void txtBinghamViscosity_Validated(object sender, EventArgs e)
        {
            if (txtBinghamViscosity.Text != "") UpdateData(txtBinghamViscosity);
        }

        private void txtInternalFrictionAngle_Validated(object sender, EventArgs e)
        {
            if (txtInternalFrictionAngle.Text != "") UpdateData(txtInternalFrictionAngle);
        }

        private void txtMaterialDensity_Validated(object sender, EventArgs e)
        {
            if (txtMaterialDensity.Text != "") UpdateData(txtMaterialDensity);
        }

        private void txtYieldStress_Validating(object sender, CancelEventArgs e)
        {
            if (txtYieldStress.Text == "")
                AddError(txtYieldStress, Universal.Idioma("Yield stress cannot be empty.", "El esfuerzo de cedencia no puede estar vacío."), "Mud/Debris Flow panel");
            else
                RemoveError(txtYieldStress);
        }

        private void txtBinghamViscosity_Validating(object sender, CancelEventArgs e)
        {
            if (txtBinghamViscosity.Text == "")
                AddError(txtBinghamViscosity, Universal.Idioma("Bingham viscosity cannot be empty.", "La viscosidad Bingham no puede estar vacía."), "Mud/Debris Flow panel");
            else
                RemoveError(txtBinghamViscosity);

        }

        private void txtInternalFrictionAngle_Validating(object sender, CancelEventArgs e)
        {
            if (txtInternalFrictionAngle.Text == "")
                AddError(txtInternalFrictionAngle, Universal.Idioma("Internal friction angle cannot be empty.", "El ángulo de fricción interna no puede estar vacío."), "Mud/Debris Flow panel");
            else
                RemoveError(txtInternalFrictionAngle);
        }

        private void txtMaterialDensity_Validating(object sender, CancelEventArgs e)
        {
            if (txtMaterialDensity.Text == "")
                AddError(txtMaterialDensity, Universal.Idioma("Material density cannot be empty.", "La densidad del material no puede estar vacía."), "Mud/Debris Flow panel");
            else
                RemoveError(txtMaterialDensity);
        }

        private void btnOpenMUD_Click(object sender, EventArgs e)
        {
            var openFileDialog = new OpenFileDialog
            {
                Filter = "MUD files (*.MUD)|*.MUD",
                InitialDirectory = _currentProjectPath,
                FileName = _currentProjectName + ".MUD",
                FilterIndex = 1,
                RestoreDirectory = true,
                CheckFileExists = true
            };

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                try
                {
                    RemoveAllErrors(tabPageMudDebrisFlow);
                    _dataManager.LoadMudFromFile(openFileDialog.FileName);
                    UpdateWithMudFile();
                }
                catch
                {
                    MessageBox.Show(Universal.Idioma("ERROR 0708131210: error trying to open .MUD file.", "ERROR 0708131210: error abriendo archivo .MUD."),
                        "RiverFlow2D", MessageBoxButtons.OK,
                        MessageBoxIcon.Error);
                }

            }
        }

        private void btnSaveMUD_Click(object sender, EventArgs e)
        {
            var saveFileDialog = new SaveFileDialog
            {
                Filter = "MUD files (*.MUD)|*.MUD",
                InitialDirectory = _currentProjectPath,
                FileName = _currentProjectName + ".MUD",
                FilterIndex = 1,
                RestoreDirectory = true
            };

            try
            {
                if (saveFileDialog.ShowDialog() == DialogResult.OK)
                {
                    ValFile.SaveRiverFLO2DdataVal = true;
                    _dataManager.SaveMudToFile(saveFileDialog.FileName);
                    string fileNameVal = saveFileDialog.FileName.Remove(saveFileDialog.FileName.Length - 3) + "VAL";
                    SaveRiverFLOW2DdataVAL(fileNameVal);
                    ValFile.SaveRiverFLO2DdataVal = false;
                }
            }
            catch
            {
                MessageBox.Show(Universal.Idioma("ERROR 0708131213: error trying to save .MUD file.", "ERROR 0708131213: error almacenando archivo .MUD."),
                    "RiverFlow2D", MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
            }
        }

        private void chckMud_CheckedChanged(object sender, EventArgs e)
        {
            //int size = tabPageMudDebrisFlow.Controls.Count;
            //for (int newCol = 0; newCol < size; ++newCol)
            //{
            //	tabPageMudDebrisFlow.Controls[newCol].Enabled = chckMud.Checked;
            //	RemoveError(tabPageMudDebrisFlow.Controls[newCol]);

            //	if (tabPageMudDebrisFlow.Controls[newCol] is Panel)
            //	{
            //		int sizePanel = tabPageMudDebrisFlow.Controls[newCol].Controls.Count;

            //		for (int j = 0; j < sizePanel; ++j)
            //		{
            //			tabPageMudDebrisFlow.Controls[newCol].Controls[j].Enabled = chckMud.Checked;
            //			RemoveError(tabPageMudDebrisFlow.Controls[newCol].Controls[j]);
            //		}
            //	}
            //}

            ////Sediment transport and mud/debris are mutually exclusive in PLUSes, doesn't exist in FE
            //if (chckMud.Checked)
            //	if (RiverDipModel == "Model CPU" || RiverDipModel == "Model CPU GPS")
            //	{
            //		chckSedimentTransport.Enabled = true;
            //		chckSedimentTransport.Checked = false; //Need to do it twice.
            //		radioPollutantTransport.Checked = true;
            //		radioPollutantTransport.Checked = false;
            //	}
            //	else if (RiverDipModel == "Model FE")
            //	{
            //		//This shouldn't be because chchMud doesn't exist for FE. Nevertheless disable it.
            //		chckMud.Enabled = false;
            //		//chckMud.Checked = true;
            //		chckMud.Checked = false; //Need to do it twice.
            //	}

            //UpdateData(chckSedimentTransport);
            //UpdateData(chckMud);
            //UpdateData(radioPollutantTransport);

        }


        private void comboFlowResistanceRelation_Validated(object sender, EventArgs e)
        {
            UpdateData(comboFlowResistanceRelation);
        }

        private void treeViewOptions_KeyDown(object sender, KeyEventArgs e)
        {
            e.Handled = true;
        }

        private void chckAdvectionDispersion_CheckedChanged(object sender, EventArgs e)
        {
            ////Pollutant Transport FE.
            //int size = tabAdvectionDispersion.Controls.Count;
            //for (int newCol = 0; newCol < size; ++newCol)
            //{
            //    tabAdvectionDispersion.Controls[newCol].Enabled = chckAdvectionDispersion.Checked;
            //    RemoveError(tabAdvectionDispersion.Controls[newCol]);

            //    if (tabAdvectionDispersion.Controls[newCol] is Panel)
            //    {
            //        int sizePanel = tabAdvectionDispersion.Controls[newCol].Controls.Count;

            //        for (int j = 0; j < sizePanel; ++j)
            //        {
            //            tabAdvectionDispersion.Controls[newCol].Controls[j].Enabled = chckAdvectionDispersion.Checked;
            //            RemoveError(tabAdvectionDispersion.Controls[newCol].Controls[j]);
            //        }
            //    }
            //}

            ////Pollutant Transport Plus.
            //size = tabPagePollutantTransportPlus.Controls.Count;
            //for (int newCol = 0; newCol < size; ++newCol)
            //{
            //    tabPagePollutantTransportPlus.Controls[newCol].Enabled = chckAdvectionDispersion.Checked;
            //    RemoveError(tabPagePollutantTransportPlus.Controls[newCol]);

            //    if (tabPagePollutantTransportPlus.Controls[newCol] is Panel)
            //    {
            //        int sizePanel = tabPagePollutantTransportPlus.Controls[newCol].Controls.Count;

            //        for (int j = 0; j < sizePanel; ++j)
            //        {
            //            tabPagePollutantTransportPlus.Controls[newCol].Controls[j].Enabled = chckAdvectionDispersion.Checked;
            //            RemoveError(tabPagePollutantTransportPlus.Controls[newCol].Controls[j]);
            //        }
            //    }
            //}

            ////Sediment transport, mud/debris, and pollutant transport are mutually exclusive in PLUSes.
            //if (RiverDipModel == "Model CPU" || RiverDipModel == "Model GPU")
            //    if (chckAdvectionDispersion.Checked)
            //    {
            //        chckMud.Enabled = true;
            //        chckMud.Checked = false;
            //        chckSedimentTransport.Checked = true;
            //        chckSedimentTransport.Checked = false;
            //    }

            //UpdateData(chckSedimentTransport);
            //UpdateData(chckMud);
            //UpdateData(chckAdvectionDispersion);
        }

        private void txtDecay_KeyPress(object sender, KeyPressEventArgs e)
        {
            //checking whether pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
                //check if there is already a decimal point
                if (txtDecay.Text.Contains("."))
                    e.Handled = true;
        }

        private void txtDecay_Validated(object sender, EventArgs e)
        {
            if (txtDecay.Text != "") UpdateData(txtDecay);

        }

        private void txtDecay_Validating(object sender, CancelEventArgs e)
        {
            if (txtDecay.Text == "")
            {
                AddError(txtDecay, Universal.Idioma("Decay coefficient cannot be empty.", "El coeficiente de decaimiento no puede estar vacío."), "Pollutant Transport panel");
                return;
            }
            double x = Double.Parse(txtDecay.Text);
            if (x < 0.0)
            {
                AddError(txtDecay, Universal.Idioma("Decay coefficient cannot be negative", "El coeficiente de decaimiento no puede ser negativo."), "Pollutant Transport panel");
            }
            else
            {
                RemoveError(txtDecay);
            }
        }

        private void chckADSources_Validated(object sender, EventArgs e)
        {
            UpdateData(chckADSources);
        }

        private void comboGraphCode_SelectedIndexChanged(object sender, EventArgs e)
        {
            SetGraphCodeTag();
        }

        private void comboFlowResistanceRelation_SelectedIndexChanged(object sender, EventArgs e)
        {
            //Remove all message errors.
            if (_errors.Count > 0)
            {
                for (int i = 0; i < _errors.Count; ++i)
                {
                    _errors[i].BackColor = SystemColors.Window;
                }
            }
            _errors.Clear();
            errorProvider.Clear();

            switch (comboFlowResistanceRelation.SelectedIndex)
            {
                case 0: //Turbulent.
                    txtYieldStress.Enabled = false;
                    txtBinghamViscosity.Enabled = false;
                    txtInternalFrictionAngle.Enabled = false;
                    txtMaterialDensity.Enabled = true;
					chckMaterialDensity.Enabled = true;
                    comboYieldStressRelation.Enabled = false;
                    comboViscosityRelation.Enabled = false;
                    txtCv.Enabled = false;
                    break;

                case 1: //Full Bingham.
                    txtYieldStress.Enabled = true;
                    txtBinghamViscosity.Enabled = true;

                    comboYieldStressRelation.Enabled = true;
                    comboViscosityRelation.Enabled = true;

                    if (comboYieldStressRelation.SelectedIndex > 0)
                        txtYieldStress.Enabled = false;
                    if (comboViscosityRelation.SelectedIndex > 0)
                        txtBinghamViscosity.Enabled = false;

                    txtCv.Enabled = true;

                    txtInternalFrictionAngle.Enabled = false;
                    txtMaterialDensity.Enabled = true;
					chckMaterialDensity.Enabled = true;
					break;

                case 2: //Simplified Bingham.
                    txtYieldStress.Enabled = true;
                    txtBinghamViscosity.Enabled = true;

                    comboYieldStressRelation.Enabled = true;
                    comboViscosityRelation.Enabled = true;

                    if (comboYieldStressRelation.SelectedIndex > 0)
                        txtYieldStress.Enabled = false;
                    if (comboViscosityRelation.SelectedIndex > 0)
                        txtBinghamViscosity.Enabled = false;


                    txtCv.Enabled = true;

                    txtInternalFrictionAngle.Enabled = false;
                    txtMaterialDensity.Enabled = true;
					chckMaterialDensity.Enabled = true;
					break;

                case 3: //Turbulent and Coulomb.
                    txtYieldStress.Enabled = false;
                    txtBinghamViscosity.Enabled = false;

                    comboYieldStressRelation.Enabled = false;
                    comboViscosityRelation.Enabled = false;
                    txtCv.Enabled = false;

                    txtInternalFrictionAngle.Enabled = true;
                    txtMaterialDensity.Enabled = true;
					chckMaterialDensity.Enabled = true;
					break;

                case 4: //Turbulent and Yield.
                    txtYieldStress.Enabled = true;
                    txtBinghamViscosity.Enabled = false;

                    comboYieldStressRelation.Enabled = true;
                    comboViscosityRelation.Enabled = false;

                    if (comboYieldStressRelation.SelectedIndex > 0)
                        txtYieldStress.Enabled = false;

                    txtCv.Enabled = true;

                    txtInternalFrictionAngle.Enabled = false;
                    txtMaterialDensity.Enabled = true;
					chckMaterialDensity.Enabled = true;
					break;

                case 5: //Turbulent, Coulomb, and Yield.
                    txtYieldStress.Enabled = true;
                    txtBinghamViscosity.Enabled = false;

                    comboYieldStressRelation.Enabled = true;
                    comboViscosityRelation.Enabled = false;

                    if (comboYieldStressRelation.SelectedIndex > 0)
                        txtYieldStress.Enabled = false;


                    txtCv.Enabled = true;

                    txtInternalFrictionAngle.Enabled = true;
                    txtMaterialDensity.Enabled = true;
					chckMaterialDensity.Enabled = true;
					break;

                case 6: //Quadratic.
                    txtYieldStress.Enabled = true;
                    txtBinghamViscosity.Enabled = true;

                    comboYieldStressRelation.Enabled = true;
                    comboViscosityRelation.Enabled = true;

                    if (comboYieldStressRelation.SelectedIndex > 0)
                        txtYieldStress.Enabled = false;
                    if (comboViscosityRelation.SelectedIndex > 0)
                        txtBinghamViscosity.Enabled = false;



                    txtCv.Enabled = true;

                    txtInternalFrictionAngle.Enabled = false;
                    txtMaterialDensity.Enabled = true;
					chckMaterialDensity.Enabled = true;
					break;

                case 7: //Granular Material.
                    txtYieldStress.Enabled = false;
                    txtBinghamViscosity.Enabled = false;

                    comboYieldStressRelation.Enabled = false;
                    comboViscosityRelation.Enabled = false;
                    txtCv.Enabled = false;

                    txtInternalFrictionAngle.Enabled = true;
                    txtMaterialDensity.Enabled = true;
					chckMaterialDensity.Enabled = true;
					break;

            }
        }

        private void tabPageMudDebrisFlow_Click(object sender, EventArgs e)
        {

        }

        private void btnAddSuspendedSediment_Click(object sender, EventArgs e)
        {
            try
            {
                dataSuspendedSediment.SelectionMode = DataGridViewSelectionMode.CellSelect;
                DataGridViewColumn col = new DataGridViewTextBoxColumn();
                int nCols = dataSuspendedSediment.Columns.Count;
                col.Name = "Sediment" + nCols.ToString();
                col.HeaderText = "Frac. " + nCols.ToString();
                col.Width = 77;
                col.SortMode = DataGridViewColumnSortMode.NotSortable;
                dataSuspendedSediment.Columns.Add(col);
                dataSuspendedSediment.SelectionMode = DataGridViewSelectionMode.FullColumnSelect;

                SetSuspendedSedimentTransportDefaults(nCols);

                dataSuspendedSediment.FirstDisplayedScrollingColumnIndex = nCols;

                dataSuspendedSediment.ClearSelection();
                dataSuspendedSediment.AllowUserToAddRows = true;
                //UpdateData(dataSuspendedSediment);
                dataSuspendedSediment.AllowUserToAddRows = false;
                _dataManager.Set("SUSPENDED_SEDIMENT_NUMBER_OF_SEDIMENTS", dataSuspendedSediment.Columns.Count - 1);
                dataSuspendedSediment.CurrentCell = dataSuspendedSediment[nCols, 1];

                FixGraphicOutputPlotOptionsForSedimentPlus();

                ////Add new fraction to Graphic Options Panel (plot dropdown).
                ////string nextFrac = "Fraction " + (dataSuspendedSediment.ColumnCount-1).ToString();
                ////comboGraphCode.Items.Add(nextFrac);



            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 0611130942: ", "") +
                    ex.Message, "RiverFlow2D", MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
            }

        }

        private void btnRemoveSelectedSuspendedSediment_Click(object sender, EventArgs e)
        {
            int columnIndex = dataSuspendedSediment.CurrentCell.ColumnIndex;
            string columnName = dataSuspendedSediment.Columns[columnIndex].Name;
            if (columnName != "Variables")
            {
                dataSuspendedSediment.Columns.Remove(columnName);
                for (int i = 1; i <= dataSuspendedSediment.Columns.Count - 1; i++)
                {
                    dataSuspendedSediment.Columns[i].Name = "Fraction" + i.ToString();
                    dataSuspendedSediment.Columns[i].HeaderText = "Frac. " + i.ToString();
                }
                UpdateData(dataSuspendedSediment);
                _dataManager.Set("SUSPENDED_SEDIMENT_NUMBER_OF_SEDIMENTS", dataSuspendedSediment.Columns.Count - 1);
            }
            else
                System.Media.SystemSounds.Beep.Play();

            //Remove fraction from Graphic Options plot dropdown list.
            comboGraphCode.Items.RemoveAt(comboGraphCode.Items.Count - 1);

        }


        private void SetSuspendedSedimentTransportDefaults(int col)
        {
            //Set defaults:
            bool unit = radioEnglish.Checked;
            if (unit)
            {
                dataSuspendedSediment.Rows[0].Cells[col].Value = "165";
                dataSuspendedSediment.Rows[1].Cells[col].Value = "0.01";
                dataSuspendedSediment.Rows[2].Cells[col].Value = "0.0000003937";
                dataSuspendedSediment.Rows[3].Cells[col].Value = "0.4";
                dataSuspendedSediment.Rows[4].Cells[col].Value = "0.047";
                dataSuspendedSediment.Rows[5].Cells[col].Value = "35";
                dataSuspendedSediment.Rows[6].Cells[col].Value = "1";
            }
            else
            {
                dataSuspendedSediment.Rows[0].Cells[col].Value = "2650";
                dataSuspendedSediment.Rows[1].Cells[col].Value = "0.01";
                dataSuspendedSediment.Rows[2].Cells[col].Value = "0.00000001";
                dataSuspendedSediment.Rows[3].Cells[col].Value = "0.4";
                dataSuspendedSediment.Rows[4].Cells[col].Value = "0.047";
                dataSuspendedSediment.Rows[5].Cells[col].Value = "35";
                dataSuspendedSediment.Rows[6].Cells[col].Value = "1";
            }
        }

        private void SetBedLoadSedimentTransportDefaults(int col)
        {
            //Set defaults:
            bool unit = radioEnglish.Checked;
            if (unit)
            {
                dataBedLoadSediment.Rows[0].Cells[col].Value = "165";
                dataBedLoadSediment.Rows[1].Cells[col].Value = "0.0036576";
                dataBedLoadSediment.Rows[2].Cells[col].Value = "0.0036576";
                dataBedLoadSediment.Rows[3].Cells[col].Value = "0.0036576";
                dataBedLoadSediment.Rows[4].Cells[col].Value = "0.4";
                dataBedLoadSediment.Rows[5].Cells[col].Value = "0.047";
                dataBedLoadSediment.Rows[6].Cells[col].Value = "35";
                dataBedLoadSediment.Rows[7].Cells[col].Value = "1";
                dataBedLoadSediment.Rows[8].Cells[col].Value = "1";
            }
            else
            {
                dataBedLoadSediment.Rows[0].Cells[col].Value = "2650";
                dataBedLoadSediment.Rows[1].Cells[col].Value = "0.001";
                dataBedLoadSediment.Rows[2].Cells[col].Value = "0.001";
                dataBedLoadSediment.Rows[3].Cells[col].Value = "0.001";
                dataBedLoadSediment.Rows[4].Cells[col].Value = "0.4";
                dataBedLoadSediment.Rows[5].Cells[col].Value = "0.047";
                dataBedLoadSediment.Rows[6].Cells[col].Value = "35";
                dataBedLoadSediment.Rows[7].Cells[col].Value = "1";
                dataBedLoadSediment.Rows[8].Cells[col].Value = "1";
            }
        }

        private void btnOpenSedimentPlus_Click(object sender, EventArgs e)
        {
            var openFileDialog = new OpenFileDialog
            {
                Filter = "SEDS/SEDB files (*.SEDS;*.SEDB)|*.SEDS;*.SEDB",
                InitialDirectory = _currentProjectPath,
                FileName = _currentProjectName + ".SEDS",
                FilterIndex = 1,
                RestoreDirectory = true,
                CheckFileExists = true
            };

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                string fileName = openFileDialog.FileName;
                string extension = fileName.Substring(fileName.LastIndexOf(".") + 1);
                if (extension != "SEDS" & extension != "SEDB")
                {
                    MessageBox.Show(Universal.Idioma("File must have .SEDS or .SEDE extension.", "El archivo debe tener extensión .SEDS o .SEDE."), 
                        "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Warning);

                }
                else
                {
                    var fileinfo = new FileInfo(fileName);
                    if (fileinfo.Length > 1)
                    {
                        try
                        {
                            if (extension == "SEDB")
                                //First read the SEDS file.
                                fileName = fileName.Remove(fileName.Length - 4) + "SEDS";

                            RemoveColumnsFromTable(dataSuspendedSediment, 1);
                            RemoveColumnsFromTable(dataBedLoadSediment, 1);

                            SEDPLUSFile.AddColumnsToSuspendedSedimentTable(fileName, dataSuspendedSediment);
                            SEDPLUSFile.AddColumnsToBedLoadSedimentTable(fileName, dataBedLoadSediment);

                            _dataManager.LoadSedsFromFile(fileName);

                            if (SEDPLUSFile.SEDSLoaded)
                            {
                                UpdateWithSEDSFile();
                                FixGraphicOutputPlotOptionsForSedimentPlus();
                            }
                            else
                            {
                                RemoveColumnsFromTable(dataSuspendedSediment, 0);
                                SEDPLUSFile.DeploySuspendedSedimentHeaders(dataSuspendedSediment);
                            }

                            if (SEDPLUSFile.SEDBLoaded)
                            {
                                UpdateWithSEDBFile();

                                //Make read only/or not diameter 30 and diameter 90.
                                if (comboBedLoadSedimentTypeFormula.SelectedIndex == 5)
                                    DataBedLoadSedimentReadOnly(false);
                                else
                                    DataBedLoadSedimentReadOnly(true);
                            }
                            else
                            {
                                SEDPLUSFile.RemoveColumnsFromBedLoadSedimentTable(dataBedLoadSediment, 0);
                                SEDPLUSFile.DeployBedLoadSedimentHeaders(dataBedLoadSediment);
                            }

                        }
                        catch
                        {
                            MessageBox.Show(Universal.Idioma("ERROR 1110131708: error trying to open file ", "ERROR 1110131708: error abriendo archivo ") +
                                fileName, "RiverFlow2D", MessageBoxButtons.OK,
                                MessageBoxIcon.Error);
                        }
                    }
                    else
                        MessageBox.Show(Universal.Idioma("WARNING: file " + fileName + " is empty.", "ADVERTENCIA: el archivo" + fileName + " está vacío."),
                            "RiverFlow2D", MessageBoxButtons.OK,
                            MessageBoxIcon.Warning);

                }

            }
        }

        private void btnSaveSedimentPlus_Click(object sender, EventArgs e)
        {

            if (!ValidateSedimentPlusVariables()) return;

            var saveFileDialog = new SaveFileDialog();

            if (chckSuspendedSediment.Checked)
            {
                saveFileDialog.Filter = "SEDS files (*.SEDS)|*.SEDS";
                saveFileDialog.InitialDirectory = _currentProjectPath;
                saveFileDialog.FileName = _currentProjectName + ".SEDS";
                saveFileDialog.FilterIndex = 1;
                saveFileDialog.RestoreDirectory = true;
            }
            else if (chckBedLoadSediment.Checked)
            {
                saveFileDialog.Filter = "SEDB files (*.SEDB)|*.SEDB";
                saveFileDialog.InitialDirectory = _currentProjectPath;
                saveFileDialog.FileName = _currentProjectName + ".SEDB";
                saveFileDialog.FilterIndex = 1;
                saveFileDialog.RestoreDirectory = true;
            }

            try
            {

                if (saveFileDialog.ShowDialog() == DialogResult.OK)
                {
                    string filenameSEDIMENT = saveFileDialog.FileName.Remove(saveFileDialog.FileName.Length - 4) + "SEDS";
                    _dataManager.SaveSedsToFile(filenameSEDIMENT);

                }
            }
            catch
            {
                MessageBox.Show(Universal.Idioma("ERROR 1110131855: error trying to save .SEDS file.", "ERROR 1110131855: error almacenando archivo .SEDS."),
                    "RiverFlow2D", MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
            }
        }


        private void comboSuspendedSedimentTypeFormula_Validated(object sender, EventArgs e)
        {
            UpdateData(comboSuspendedSedimentTypeFormula);
        }

        private void chckSuspendedSediment_Validated(object sender, EventArgs e)
        {
            UpdateData(chckSuspendedSediment);
        }

        private void chckBedLoadSediment_Validated(object sender, EventArgs e)
        {
            UpdateData(chckBedLoadSediment);
        }

        private void comboSuspendedSedimentTypeWS_Validated(object sender, EventArgs e)
        {
            UpdateData(comboSuspendedSedimentTypeWS);
        }

        //private void comboSuspendedSedimentTypeWS_Validated_1(object sender, EventArgs e)
        //{
        //	UpdateData(comboSuspendedSedimentTypeWS);
        //}

        private void txtSuspendedSedimentFactorWS_Validated(object sender, EventArgs e)
        {
            UpdateData(txtSuspendedSedimentFactorWS);
        }

        private void txtSuspendedSedimentFactorWS_KeyPress(object sender, KeyPressEventArgs e)
        {
            //checking whether pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
                //check if there is already a decimal point
                if (txtSuspendedSedimentFactorWS.Text.Contains("."))
                    e.Handled = true;
        }

        private void dataSuspendedSediment_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {


            if (e.ColumnIndex <= 0 || e.RowIndex < 0) return;

            if (dataSuspendedSediment[e.ColumnIndex, e.RowIndex].Value == null)
            {
                dataSuspendedSediment.CurrentCell.ErrorText = "Value can't be empty";
                dataSuspendedSediment.CurrentCell.Style.BackColor = Universal.BackColorError;
                return;
            }

            try
            {
                string value;
                switch (e.RowIndex)
                {
                    case 2:
                        //value = Convert.ToDouble(dataSuspendedSediment[e.ColumnIndex, e.RowIndex].Value).ToString("N7");
                        value = dataSuspendedSediment[e.ColumnIndex, e.RowIndex].Value.ToString();
                        break;

                    case 4:
                        //value = Convert.ToDouble(dataSuspendedSediment[e.ColumnIndex, e.RowIndex].Value).ToString("N3");
                        value = dataSuspendedSediment[e.ColumnIndex, e.RowIndex].Value.ToString();
                        break;

                    default:
                        //value = Convert.ToDouble(dataSuspendedSediment[e.ColumnIndex, e.RowIndex].Value).ToString("N2");
                        value = dataSuspendedSediment[e.ColumnIndex, e.RowIndex].Value.ToString(); //.ToString("N2");
                        break;
                }

                dataSuspendedSediment[e.ColumnIndex, e.RowIndex].Value = value;

                int cantColumns = dataSuspendedSediment.Columns.Count;
                int cantRows = dataSuspendedSediment.Rows.Count;

                var newData = new List<string[]>();

                for (int i = 0; i < cantColumns; ++i)
                {
                    newData.Add(new string[cantRows]);
                    for (int j = 0; j < cantRows; ++j)
                    {
                        object val = dataSuspendedSediment[i, j].Value;
                        if (val == null) newData[i][j] = "0.00";
                        else newData[i][j] = val.ToString();
                    }
                }

                _dataManager.Set((string)dataSuspendedSediment.Tag, newData);

                const int row = 1;
                double tot = 0;
                for (int i = 1; i < dataSuspendedSediment.Columns.Count; i++)
                {
                    tot += Convert.ToDouble(dataSuspendedSediment[i, row].Value);
                }

                if (tot < 0 || tot > 0.3)
                {
                    dataSuspendedSediment.CurrentCell.ErrorText = "Total initial concentration must be in the range [0, 0.3]";
                    dataSuspendedSediment.CurrentCell.Style.BackColor = Universal.BackColorError;
                    return;
                }
                else
                {
                    for (int i = 1; i < dataSuspendedSediment.Columns.Count; i++)
                    {
                        dataSuspendedSediment[i, row].ErrorText = "";
                        dataSuspendedSediment[i, row].Style.BackColor = SystemColors.Window;
                    }
                }

            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 3110131625: ", "") +
                    ex.Message,
                    "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

        }

        private void dataSuspendedSediment_KeyPress(object sender, KeyPressEventArgs e)
        {
            //check if pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
            {
                if (dataSuspendedSediment.EditingControl.Text.ToString().Contains("."))
                    e.Handled = true;
                else
                    e.Handled = false;
            }
            else
                e.Handled = false;
        }

        private void dataSuspendedSediment_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            var textbox = e.Control as DataGridViewTextBoxEditingControl;
            textbox.KeyPress -= new KeyPressEventHandler(dataSuspendedSediment_KeyPress);
            textbox.KeyPress += new KeyPressEventHandler(dataSuspendedSediment_KeyPress);
        }

        private void comboBedLoadSedimentTypeFormula_Validated(object sender, EventArgs e)
        {
            UpdateData(comboBedLoadSedimentTypeFormula);
        }

        private void dataBedLoadSediment_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {

            if (e.ColumnIndex <= 0 || e.RowIndex < 0) return;

            if (dataBedLoadSediment[e.ColumnIndex, e.RowIndex].Value == null)
            {
                dataBedLoadSediment.CurrentCell.ErrorText = "Value can't be empty";
                dataBedLoadSediment.CurrentCell.Style.BackColor = Universal.BackColorError;
                return;
            }
            try
            {
                string value;
                switch (e.RowIndex)
                {
                    case 1:
                    case 2:
                    case 3:
                        //value = Convert.ToDouble(dataBedLoadSediment[e.ColumnIndex, e.RowIndex].Value).ToString("N7");
                        value = dataBedLoadSediment[e.ColumnIndex, e.RowIndex].Value.ToString();
                        break;

                    case 5:
                        //value = Convert.ToDouble(dataBedLoadSediment[e.ColumnIndex, e.RowIndex].Value).ToString("N3");
                        value = dataBedLoadSediment[e.ColumnIndex, e.RowIndex].Value.ToString();
                        break;

                    default:
                        //value = Convert.ToDouble(dataBedLoadSediment[e.ColumnIndex, e.RowIndex].Value).ToString("N2");
                        value = dataBedLoadSediment[e.ColumnIndex, e.RowIndex].Value.ToString();
                        break;
                }

                dataBedLoadSediment[e.ColumnIndex, e.RowIndex].Value = value;

                int cantColumns = dataBedLoadSediment.Columns.Count;
                int cantRows = dataBedLoadSediment.Rows.Count;

                var newData = new List<string[]>();

                for (int i = 0; i < cantColumns; ++i)
                {
                    newData.Add(new string[cantRows]);
                    for (int j = 0; j < cantRows; ++j)
                    {
                        object val = dataBedLoadSediment[i, j].Value;
                        if (val == null) newData[i][j] = "0.00";
                        else newData[i][j] = val.ToString();
                    }
                }

                _dataManager.Set((string)dataBedLoadSediment.Tag, newData);

            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 0211131000: ", "") +
                    ex.Message,
                    "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void dataBedLoadSediment_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            var textbox = e.Control as DataGridViewTextBoxEditingControl;
            textbox.KeyPress -= new KeyPressEventHandler(dataBedLoadSediment_KeyPress);
            textbox.KeyPress += new KeyPressEventHandler(dataBedLoadSediment_KeyPress);
        }

        private void dataBedLoadSediment_KeyPress(object sender, KeyPressEventArgs e)
        {
            //check if pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
            {
                if (dataBedLoadSediment.EditingControl.Text.ToString().Contains("."))
                    e.Handled = true;
                else
                    e.Handled = false;
            }
            else
                e.Handled = false;
        }

        private void btnAddBedLoadSediment_Click(object sender, EventArgs e)
        {
            try
            {
                dataBedLoadSediment.SelectionMode = DataGridViewSelectionMode.CellSelect;
                DataGridViewColumn col = new DataGridViewTextBoxColumn();
                int nCols = dataBedLoadSediment.Columns.Count;
                col.Name = "Sediment" + nCols.ToString();
                col.HeaderText = "Frac. " + nCols.ToString();
                col.Width = 63;
                col.SortMode = DataGridViewColumnSortMode.NotSortable;
                dataBedLoadSediment.Columns.Add(col);
                dataBedLoadSediment.SelectionMode = DataGridViewSelectionMode.FullColumnSelect;

                SetBedLoadSedimentTransportDefaults(nCols);

                dataBedLoadSediment.FirstDisplayedScrollingColumnIndex = nCols;

                dataBedLoadSediment.ClearSelection();
                dataBedLoadSediment.AllowUserToAddRows = true;
                //UpdateData(dataSuspendedSediment);
                dataBedLoadSediment.AllowUserToAddRows = false;
                _dataManager.Set("BED_LOAD_SEDIMENT_NUMBER_OF_SEDIMENTS", dataBedLoadSediment.Columns.Count - 1);
                dataBedLoadSediment.CurrentCell = dataBedLoadSediment[nCols, 0];
            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 0611131341: ", "") +
                    ex.Message, "RiverFlow2D", MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
            }
        }

        private void btnRemoveSelectedBedLoadSediment_Click(object sender, EventArgs e)
        {
            int columnIndex = dataBedLoadSediment.CurrentCell.ColumnIndex;
            string columnName = dataBedLoadSediment.Columns[columnIndex].Name;
            if (columnName != "BedLoadVariables")
            {
                dataBedLoadSediment.Columns.Remove(columnName);
                for (int i = 1; i <= dataBedLoadSediment.Columns.Count - 1; i++)
                {
                    dataBedLoadSediment.Columns[i].Name = "Fraction" + i.ToString();
                    dataBedLoadSediment.Columns[i].HeaderText = "Frac." + i.ToString();
                }
                UpdateData(dataBedLoadSediment);
                _dataManager.Set("BED_LOAD_SEDIMENT_NUMBER_OF_SEDIMENTS", dataBedLoadSediment.Columns.Count - 1);
            }
            else
                System.Media.SystemSounds.Beep.Play();
        }

        private Boolean ValidateSedimentPlusVariables()
        {
            bool oneChecked = chckSuspendedSediment.Checked || chckBedLoadSediment.Checked;
            if (!oneChecked)
            {
                MessageBox.Show(Universal.Idioma(
                    "At least one sediment transport mode must be selected (suspended or bed load) in the Sediment Transport panel.", 
                    "Al menos un modo de transporte debe ser seleccionado (sedimentos en suspención o carga de fondo), en el panel de transporte de sedimentos."),
                    "RiverFlow2D",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Exclamation);
                return false;
            }


            if (chckSuspendedSediment.Checked & dataSuspendedSediment.Columns.Count == 1)
            {
                MessageBox.Show(
                    Universal.Idioma("Suspended sediment mode is selected in the Sediment Transport panel but the sediment table is empty.", "El modo de sedimentos en suspención está seleccionado en el panel de transporte de sedimentos, pero la tabla de sedimentos está vacía."),
                    "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return false;
            }

            if (chckBedLoadSediment.Checked & dataBedLoadSediment.Columns.Count == 1)
            {
                MessageBox.Show(Universal.Idioma(
                    "Bed load sediment mode is selected in the Sediment Transport panel but the bed load table is empty.",
                    "El modo de transporte de carga de fondo en el panel de transporte de sedimentos esta seleccionado, pero la tabla está vacía."),
                    "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return false;
            }

            if (dataBedLoadSediment.Columns.Count > 1)
            {
                double totalFractions = 0;
                for (int i = 1; i < dataBedLoadSediment.Columns.Count; i++)
                {
                    //Check that fractions add up to 1.
                    totalFractions += Convert.ToDouble(dataBedLoadSediment.Rows[7].Cells[i].Value);
                }
                if (totalFractions > 1.01 || totalFractions < 0.99)
                {
                    if (MessageBox.Show(Universal.Idioma("Sum of fractions in the bed load sediment table should be 1.\n" + "Ignore?", 
                        "La suma de fracciones en la tabla de transporte de carga de fondo debe ser 1.\n" + "¿Se ignora?"), 
                        "RiverFlow2D",  MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) == DialogResult.Yes)
                        return true;
                    else
                        return false;
                }
            }

            return true;
        }



        private void dataSuspendedSediment_CellValidating(object sender, DataGridViewCellValidatingEventArgs e)
        {

            if (e.ColumnIndex > 0 & e.FormattedValue.ToString() != "")
            {
                double val = Convert.ToDouble(e.FormattedValue);
                switch (e.RowIndex)
                {
                    case 0: //Specific Weight (Density).
                        if (Universal.RiverUnits == "Metric" && (val < 1000 || val > 3000))
                        {
                            dataSuspendedSediment.CurrentCell.ErrorText = "Density must be in the range [1000, 3000]";
                            dataSuspendedSediment.CurrentCell.Style.BackColor = Universal.BackColorError;
                            e.Cancel = false;
                        }
                        else if (Universal.RiverUnits == "English" && (val < 100 || val > 300))
                        {
                            dataSuspendedSediment.CurrentCell.ErrorText = "Density must be in the range [100, 300]";
                            dataSuspendedSediment.CurrentCell.Style.BackColor = Universal.BackColorError;
                            e.Cancel = false;
                        }
                        else
                        {
                            dataSuspendedSediment.CurrentCell.ErrorText = "";
                            dataSuspendedSediment.CurrentCell.Style.BackColor = SystemColors.Window;
                            e.Cancel = false;
                        }
                        break;

                    case 1: //Initial Concentration
                        {
                            break;
                        }

                    case 2: //Diameter.
                        if (Universal.RiverUnits == "Metric" && (val < 0.00000001 || val > 0.02))
                        {
                            dataSuspendedSediment.CurrentCell.ErrorText = "Diameter must be in the range [0.00000001, 0.02]";
                            dataSuspendedSediment.CurrentCell.Style.BackColor = Universal.BackColorError;
                            e.Cancel = false;
                        }
                        else if (Universal.RiverUnits == "English" &&
                                 (val < 0.0000003937 || val > 0.7874))
                        //((Math.Abs(val - 0.0000003937) > 0.01) || (Math.Abs(0.7874 - val) > 0.01)))
                        {
                            dataSuspendedSediment.CurrentCell.ErrorText = "Diameter must be in the range [0.0000003937, 0.7874]";
                            dataSuspendedSediment.CurrentCell.Style.BackColor = Universal.BackColorError;
                            e.Cancel = false;
                        }
                        else
                        {
                            dataSuspendedSediment.CurrentCell.ErrorText = "";
                            dataSuspendedSediment.CurrentCell.Style.BackColor = SystemColors.Window;
                            e.Cancel = false;
                        }
                        break;

                    case 3: //Porosity.
                        if (val < 0.2 || val > 0.6)
                        {
                            dataSuspendedSediment.CurrentCell.ErrorText = "Density must be in the range [0.2, 0.6]";
                            dataSuspendedSediment.CurrentCell.Style.BackColor = Universal.BackColorError;
                            e.Cancel = false;
                        }
                        else
                        {
                            dataSuspendedSediment.CurrentCell.ErrorText = "";
                            dataSuspendedSediment.CurrentCell.Style.BackColor = SystemColors.Window;
                            e.Cancel = false;
                        }
                        break;

                    case 4: //Shear stress.
                        if (val < 0.03 || val > 0.08)
                        {
							dataSuspendedSediment.CurrentCell.ErrorText = "Shear stress must be in the range [0.03, 0.08]";
                            dataSuspendedSediment.CurrentCell.Style.BackColor = Universal.BackColorError;
                            e.Cancel = false;
                        }
                        else
                        {
                            dataSuspendedSediment.CurrentCell.ErrorText = "";
                            dataSuspendedSediment.CurrentCell.Style.BackColor = SystemColors.Window;
                            e.Cancel = false;
                        }
                        break;

                    case 5: //Friction angle.
                        if (val < 20 || val > 50)
                        {
                            dataSuspendedSediment.CurrentCell.ErrorText = "Friction angle must be in the range [20, 50]";
                            dataSuspendedSediment.CurrentCell.Style.BackColor = Universal.BackColorError;
                            e.Cancel = false;
                        }
                        else
                        {
                            dataSuspendedSediment.CurrentCell.ErrorText = "";
                            dataSuspendedSediment.CurrentCell.Style.BackColor = SystemColors.Window;
                            e.Cancel = false;
                        }
                        break;

                    case 6: //Factor.
                        if (val < 0.00 || val > 20)
                        {
                            dataSuspendedSediment.CurrentCell.ErrorText = "Factor must be in the range [0, 20]";
                            dataSuspendedSediment.CurrentCell.Style.BackColor = Universal.BackColorError;
                            e.Cancel = false;
                        }
                        else
                        {
                            dataSuspendedSediment.CurrentCell.ErrorText = "";
                            dataSuspendedSediment.CurrentCell.Style.BackColor = SystemColors.Window;
                            e.Cancel = false;
                        }
                        break;
                }
            }

            if (e.FormattedValue.ToString() == "")
            {
                dataSuspendedSediment.CurrentCell.ErrorText = "Value can't be empty";
                dataSuspendedSediment.CurrentCell.Style.BackColor = Universal.BackColorError;
                e.Cancel = false;
            }


        }

        private void dataSuspendedSediment_CellLeave(object sender, DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex <= 0 || e.RowIndex < 0) return;

            if (dataSuspendedSediment[e.ColumnIndex, e.RowIndex].Value == null)
            {
                dataSuspendedSediment.CurrentCell.ErrorText = "Value can't be empty";
                dataSuspendedSediment.CurrentCell.Style.BackColor = Universal.BackColorError;
                return;
            }

            try
            {
                string value;
                switch (e.RowIndex)
                {
                    case 2:
                        //value = Convert.ToDouble(dataSuspendedSediment[e.ColumnIndex, e.RowIndex].Value).ToString("N7");
                        value = dataSuspendedSediment[e.ColumnIndex, e.RowIndex].Value.ToString();
                        break;

                    case 4:
                        //value = Convert.ToDouble(dataSuspendedSediment[e.ColumnIndex, e.RowIndex].Value).ToString("N3");
                        value = dataSuspendedSediment[e.ColumnIndex, e.RowIndex].Value.ToString();
                        break;

                    default:
                        value = dataSuspendedSediment[e.ColumnIndex, e.RowIndex].Value.ToString();
                        //value = Convert.ToDouble(dataSuspendedSediment[e.ColumnIndex, e.RowIndex].Value).ToString("#.##");
                        break;
                }

                dataSuspendedSediment[e.ColumnIndex, e.RowIndex].Value = value;

                int cantColumns = dataSuspendedSediment.Columns.Count;
                int cantRows = dataSuspendedSediment.Rows.Count;

                var newData = new List<string[]>();

                for (int i = 0; i < cantColumns; ++i)
                {
                    newData.Add(new string[cantRows]);
                    for (int j = 0; j < cantRows; ++j)
                    {
                        object val = dataSuspendedSediment[i, j].Value;
                        if (val == null) newData[i][j] = "0.00";
                        else newData[i][j] = val.ToString();
                    }
                }

                _dataManager.Set((string)dataSuspendedSediment.Tag, newData);

            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 3110131625: ", "") +
                    ex.Message,
                    "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void chckBedLoadSediment_CheckedChanged(object sender, EventArgs e)
        {
            if (chckBedLoadSediment.Checked)
                panelBedLoadSediment.Enabled = true;
            else
                panelBedLoadSediment.Enabled = false;
        }

        private void chckSuspendedSediment_CheckedChanged(object sender, EventArgs e)
        {
            if (chckSuspendedSediment.Checked)
                panelSuspendedSediment.Enabled = true;
            else
                panelSuspendedSediment.Enabled = false;
        }



        private void dataBedLoadSediment_CellValidating(object sender, DataGridViewCellValidatingEventArgs e)
        {

            if (e.ColumnIndex > 0 & e.FormattedValue.ToString() != "")
            {
                double val = Convert.ToDouble(e.FormattedValue);
                switch (e.RowIndex)
                {
                    case 0: //Density.
                        if (Universal.RiverUnits == "English" && (val < 100 || val > 300))
                        {
                            dataBedLoadSediment.CurrentCell.ErrorText = "Density must be in the range [100,300]";
                            dataBedLoadSediment.CurrentCell.Style.BackColor = Universal.BackColorError;
                            e.Cancel = false;
                        }
                        else if (Universal.RiverUnits == "Metric" && (val < 1000 || val > 3000))
                        {
                            dataBedLoadSediment.CurrentCell.ErrorText = "Density must be in the range [1000, 3000]";
                            dataBedLoadSediment.CurrentCell.Style.BackColor = Universal.BackColorError;
                            e.Cancel = false;
                        }
                        else
                        {
                            dataBedLoadSediment.CurrentCell.ErrorText = "";
                            dataBedLoadSediment.CurrentCell.Style.BackColor = SystemColors.Window;
                            e.Cancel = false;
                        }
                        break;

                    case 1: //D30.
                        if (Universal.RiverUnits == "Metric" && (val < 0.00001 || val > 0.25))
                        {
                            dataBedLoadSediment.CurrentCell.ErrorText = "Diameter D30 must be in the range [0.00001, 0.25]";
                            dataBedLoadSediment.CurrentCell.Style.BackColor = Universal.BackColorError;
                            e.Cancel = false;
                        }
                        else if (Universal.RiverUnits == "English" && (val < 0.0003937 || val > 9.8425))
                        {
                            dataBedLoadSediment.CurrentCell.ErrorText = "Diameter D30 must be in the range [0.0003937, 9.8425]";
                            dataBedLoadSediment.CurrentCell.Style.BackColor = Universal.BackColorError;
                            e.Cancel = false;
                        }
                        else
                        {
                            dataBedLoadSediment.CurrentCell.ErrorText = "";
                            dataBedLoadSediment.CurrentCell.Style.BackColor = SystemColors.Window;
                            e.Cancel = false;
                        }
                        break;


                    case 2: //Diameter 50.
                        if (Universal.RiverUnits == "Metric" && (val < 0.00001 || val > 0.25))
                        {
                            dataBedLoadSediment.CurrentCell.ErrorText = "Diameter D50 must be in the range [0.00001, 0.25]";
                            dataBedLoadSediment.CurrentCell.Style.BackColor = Universal.BackColorError;
                            e.Cancel = false;
                        }
                        else if (Universal.RiverUnits == "English" && (val < 0.0003937 || val > 9.8425))
                        {
                            dataBedLoadSediment.CurrentCell.ErrorText = "Diameter D50 must be in the range [0.0003937, 9.8425]";
                            dataBedLoadSediment.CurrentCell.Style.BackColor = Universal.BackColorError;
                            e.Cancel = false;
                        }
                        else
                        {
                            dataBedLoadSediment.CurrentCell.ErrorText = "";
                            dataBedLoadSediment.CurrentCell.Style.BackColor = SystemColors.Window;
                            e.Cancel = false;
                        }
                        break;

                    case 3: //Diameter 90.
                        if (Universal.RiverUnits == "Metric" && (val < 0.00001 || val > 0.25))
                        {
                            dataBedLoadSediment.CurrentCell.ErrorText = "Diameter D90 must be in the range [0.00001, 0.25]";
                            dataBedLoadSediment.CurrentCell.Style.BackColor = Universal.BackColorError;
                            e.Cancel = false;
                        }
                        else if (Universal.RiverUnits == "English" && (val < 0.0003937 || val > 9.8425))
                        {
                            dataBedLoadSediment.CurrentCell.ErrorText = "Diameter D90 must be in the range [0.0003937, 9.8425]";
                            dataBedLoadSediment.CurrentCell.Style.BackColor = Universal.BackColorError;
                            e.Cancel = false;
                        }
                        else
                        {
                            dataBedLoadSediment.CurrentCell.ErrorText = "";
                            dataBedLoadSediment.CurrentCell.Style.BackColor = SystemColors.Window;
                            e.Cancel = false;
                        }
                        break;

                    case 4: //Porosity.
                        if (val < 0.2 || val > 0.6)
                        {
                            dataBedLoadSediment.CurrentCell.ErrorText = "Porosity must be in the range [0.2, 0.6]";
                            dataBedLoadSediment.CurrentCell.Style.BackColor = Universal.BackColorError;
                            e.Cancel = false;
                        }
                        else
                        {
                            dataBedLoadSediment.CurrentCell.ErrorText = "";
                            dataBedLoadSediment.CurrentCell.Style.BackColor = SystemColors.Window;
                            e.Cancel = false;
                        }
                        break;

                    case 5: //Shear stress.
                        if (val < 0.03 || val > 0.08)
                        {
                            dataBedLoadSediment.CurrentCell.ErrorText = "Shear stress must be in the range [0.03, 0.08]";
                            dataBedLoadSediment.CurrentCell.Style.BackColor = Universal.BackColorError;
                            e.Cancel = false;
                        }
                        else
                        {
                            dataBedLoadSediment.CurrentCell.ErrorText = "";
                            dataBedLoadSediment.CurrentCell.Style.BackColor = SystemColors.Window;
                            e.Cancel = false;
                        }
                        break;

                    case 6: //Friction angle.
                        if (val < 10 || val > 50)
                        {
                            dataBedLoadSediment.CurrentCell.ErrorText = "Friction angle must be in the range [10, 50]";
                            dataBedLoadSediment.CurrentCell.Style.BackColor = Universal.BackColorError;
                            e.Cancel = false;
                        }
                        else
                        {
                            dataBedLoadSediment.CurrentCell.ErrorText = "";
                            dataBedLoadSediment.CurrentCell.Style.BackColor = SystemColors.Window;
                            e.Cancel = false;
                        }
                        break;

                    case 7: //Fraction.
                        if (val < 0.0 || val > 1)
                        {
                            dataBedLoadSediment.CurrentCell.ErrorText = "Fraction must be in the range [0, 1]";
                            dataBedLoadSediment.CurrentCell.Style.BackColor = Universal.BackColorError;
                            e.Cancel = false;
                        }
                        else
                        {
                            dataBedLoadSediment.CurrentCell.ErrorText = "";
                            dataBedLoadSediment.CurrentCell.Style.BackColor = SystemColors.Window;
                            e.Cancel = false;
                        }
                        break;

                    case 8: //Factor.
                        if (val < 0.0 || val > 20)
                        {
                            dataBedLoadSediment.CurrentCell.ErrorText = "Factor must be in the range [0, 20]";
                            dataBedLoadSediment.CurrentCell.Style.BackColor = Universal.BackColorError;
                            e.Cancel = false;
                        }
                        else
                        {
                            dataBedLoadSediment.CurrentCell.ErrorText = "";
                            dataBedLoadSediment.CurrentCell.Style.BackColor = SystemColors.Window;
                            e.Cancel = false;
                        }
                        break;
                }
            }
        }

        private void txtSuspendedSedimentFactorWS_Validating(object sender, CancelEventArgs e)
        {
            if (txtSuspendedSedimentFactorWS.Text == "")
            {
                AddError(txtSuspendedSedimentFactorWS, Universal.Idioma("Settling velocity formula factor must not be empty.", "El factor de velocidad de caída no puede estar vacío."),
                    "Sediment Transport panel");
                return;
            }
            double x = Double.Parse(txtSuspendedSedimentFactorWS.Text);
            if (x < 0.0 || x > 20)
            {
                AddError(txtSuspendedSedimentFactorWS, Universal.Idioma("Settling velocity formula factor must be in the range [0 ,20]", "El factor de velocidad de caída debe estar en el intervalo [0,20]"),
                    "Sediment Transport panel");
            }
            else
            {
                RemoveError(txtSuspendedSedimentFactorWS);
            }
        }

        private void dataSuspendedSediment_CellEnter(object sender, DataGridViewCellEventArgs e)
        {
            //int iCol = dataSuspendedSediment.CurrentCell.ColumnIndex;
            //if (iCol == 0)
            //{
            //	SendKeys.Send("{Tab}");
            //}
        }

        private void dataBedLoadSediment_CellEnter(object sender, DataGridViewCellEventArgs e)
        {
            //int iCol = dataBedLoadSediment.CurrentCell.ColumnIndex;
            //if (iCol == 0)
            //{
            //	SendKeys.Send("{Tab}");
            //}
        }

        private void dataSuspendedSediment_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void comboBedLoadSedimentTypeFormula_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (comboBedLoadSedimentTypeFormula.SelectedIndex == 5)
                DataBedLoadSedimentReadOnly(false);
            else
                DataBedLoadSedimentReadOnly(true);
        }

        private void tabPiersDragForces_Click(object sender, EventArgs e)
        {

        }

        private void ContinueLoadings()
        {
            try
            {
                //This block is executed even if no data is found or there are errors.

                //Update Animation panel with dependencies.
                txtFileNameOutput.Text = _currentProjectName;
                txtMidBedChange.Text = txtMinimumDepth.Text;

                //Select Control Data
                treeViewOptions.SelectedNode = treeViewOptions.Nodes[0];

                //Remove all tabs
                for (int i = tabOptions.TabPages.Count - 1; i >= 0; i--)
                {
                    tabOptions.TabPages.Remove(tabOptions.TabPages[i]);
                }
                TurnOffAll();
                tabOptions.Visible = true;
                tabOptions.TabPages.Add(_savedTabPages[0]);

                //Set GUI.
                if (RiverDipModel == "Model CPU")
                {
                    SetPLUSModelGUI();
                    FinishSetForSimplePlusGUI();
                }
                else if (RiverDipModel == "Model GPU")
                {
                    SetPLUSModelGUI();
                    FinishSetForGpuPlusGUI();
                }
                else
                {
                    SetFEModelGUI();
                    FinishSetForFEGUI();
                }
                //Text = mainHeader + RiverDipModel + ") - " + _currentProjectPathAndName;
				Text = mainHeader + _currentProjectPathAndName;
				UpdateWithDatFile();
            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 0804141019: error loading RiverFlow2D. ", "ERROR 0804141019: error cargando RiverFlow2D. ") +
                    ex.Message,
                    "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void InitializePreLoadControls()
        {

            RemoveColumnsFromTable(dataSuspendedSediment, 1);
            RemoveColumnsFromTable(dataBedLoadSediment, 1);

            //Build tables for sediment transport plus.
            SEDPLUSFile.DeploySuspendedSedimentHeaders(dataSuspendedSediment);
            SEDPLUSFile.DeployBedLoadSedimentHeaders(dataBedLoadSediment);

            comboSuspendedSedimentTypeFormula.SelectedIndex = 0;
            comboSuspendedSedimentTypeWS.SelectedIndex = 0;
            comboBedLoadSedimentTypeFormula.SelectedIndex = 0;
            //Select both modes.
            chckSuspendedSediment.Checked = true;
            chckBedLoadSediment.Checked = true;

            // Set lite version.
            _isLite = false;
            if (_isLite)
                MessageBox.Show(
                    "This RiverFlow2D LT version is limited to 2000 elements.",
                    "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Information);

            //Save all tabpages:
            //if (origen == "For new project")
            //{
            //	MessageBox.Show("New");
            //}
            //else

            if (_savedTabPagesAll == null)
            {
                //Panels need to be organized first time DIP is loaded:
                _savedTabPages = new List<TabPage>();

                for (int i = 0; i < tabOptions.TabPages.Count; i++)
                    _savedTabPages.Add(tabOptions.TabPages[i]);

                _savedTabPages.Add(tabPageWindPlus);
                _savedTabPages.Add(tabPageMudDebrisFlow);
                _savedTabPages.Add(tabPageSedimentTransportPlus);
                _savedTabPages.Add(tabPagePollutantTransportPlus);
                _savedTabPages.Add(tabPageGates);
                _savedTabPages.Add(tabPageBridges);
                _savedTabPages.Add(tabPageOilSpillOnLand);
                _savedTabPages.Add(tabPageInfiltration);
                _savedTabPages.Add(tabPageOBCP);
                _savedTabPages.Add(tabPageDamBreach);

                _savedTabPagesAll = _savedTabPages;
            }

            // Disable all controls in FLO2D Plotter if wished.
            _disablePlotter = false; //also doesn't read .PLOT
            if (_disablePlotter)
            {
                foreach (Control ctl in tabRiverFLO2DPlotter.Controls)
                {
                    ctl.Enabled = false;
                }
            }

            //Uncheck all modules, components, and output options (need to do it twice to take effect).
            //Modules:
            radioSedimentTransport.Checked = false;
            radioMudDebris.Checked = false;
            radioPollutantTransport.Checked = false;
            radioOilSpillOnLand.Checked = false;

            //Components (check them twice):
            chckRainfallEvaporation.Checked = true;
            chckRainfallEvaporation.Checked = false;

            chckPiers.Checked = true;
            chckPiers.Checked = false;

            chckCulverts.Checked = true;
            chckCulverts.Checked = false;

            chckInternalRatingTables.Checked = true;
            chckInternalRatingTables.Checked = false;

            chckSourcesAndSinks.Checked = true;
            chckSourcesAndSinks.Checked = false;

            chckWeirs.Checked = true;
            chckWeirs.Checked = false;

            chckWind.Checked = true;
            chckWind.Checked = false;

            chckBridges.Checked = true;
            chckBridges.Checked = false;

            chckGates.Checked = true;
            chckGates.Checked = false;

            chckDamBreach.Checked = true;
            chckDamBreach.Checked = false;

            //Output Options:
            chckTextFileOutput.Checked = true;
            chckTextFileOutput.Checked = false;

            chckGraphicOutput.Checked = true;
            chckGraphicOutput.Checked = false;

            chckOutputResultsCrossSections.Checked = true;
            chckOutputResultsCrossSections.Checked = false;

            chckOutputResultsProfile.Checked = true;
            chckOutputResultsProfile.Checked = false;
            chckMaximumValues.Checked = true;
            chckMaximumValues.Checked = false;

            chckComputeMassBalance.Checked = false;
            chckComputeMassBalance.Checked = true;

            chckResultsAtObservationPoints.Checked = true;
            chckResultsAtObservationPoints.Checked = false;
        }

        private void SetAllDefaults()
        {
            RestoreWindDefaults();
            RestoreWeirsDefaults();
            RestoreSourcesDefaults();
            RestoreSedPlusDefaults();
            RestoreSedimentDefaults();
            RestoreRainfallDefaults();
            RestoreProfilesDefaults();
            RestorePlotDefaults();
            RestorePiersDefaults();
            RestoreOutflowDefaults();
            RestoreOpenboundariesDefaults();
            RestoreObservationPointsDefaults();
            RestoreMudFlowDefaults();
            RestoreMeshDefaults();
            RestoreInternalratingtablesDefaults();
            RestoreInflowDefaults();
            RestoreGraphicsDefaults();
            if (RiverDipModel == "Model CPU" || RiverDipModel == "Model GPU")
            {
                RestoreDATConfigPLUSDefaults();
            }
            else
            {
                RestoreDATConfigDefaults();
            }
            RestoreCulvertsDefaults();
            RestoreCrossSectionDefaults();
            RestoreBoundaryDefaults();
            RestoreAdvectionDispersionDefaults();
            RestoreOilPDefaults();
        }

        private void RestoreWindDefaults()
        {
            //Wind
            _dataManager.Set("C10", 0.001);
            _dataManager.Set("SWIND", 0.0012);
            _dataManager.Set("IWINDCONSTANT", 1);
            _dataManager.Set("UWCONSTANT", 0.0);
            _dataManager.Set("VWCONSTANT", 0.0);
        }

        private void RestoreOilPDefaults()
        {
            //OilP
            _dataManager.Set("OILSPILLONLAND_VISCOSITY", 0.005);
            _dataManager.Set("OILSPILLONLAND_DENSITY", 900);
            _dataManager.Set("OILSPILLONLAND_FRR", 0);
            _dataManager.Set("OILSPILLONLAND_YS", 300);
        }

        private void RestoreWeirsDefaults()
        {
            //Weirs
            _dataManager.Set("WEIRSDATA", 0);
        }


        private void RestoreSourcesDefaults()
        {
            var emptyList = new List<string[]>();
            //Sources
            _dataManager.Set("SOURCES_SERIES_VALUES", emptyList);
        }

        private void RestoreSedPlusDefaults()
        {
            var emptyList = new List<string[]>();
            //SedPlus
            _dataManager.Set("SUSPENDED_SEDIMENT_PLUS_ACTIVE", 1);
            _dataManager.Set("BED_LOAD_SEDIMENT_PLUS_ACTIVE", 1);
            _dataManager.Set("SUSPENDED_SEDIMENT_NUMBER_OF_SEDIMENTS", 0);
            _dataManager.Set("SUSPENDEDSEDIMENT_VALUES", emptyList);
            _dataManager.Set("SUSPENDED_SEDIMENT_TYPE_FORMULA", 1);
            _dataManager.Set("SUSPENDED_SEDIMENT_TYPE_WS", 0);
            _dataManager.Set("SUSPENDED_SEDIMENT_FACTOR", 1);
            _dataManager.Set("SUSPENDED_SEDIMENT_FACTOR_WS", 0.01);
            _dataManager.Set("SUSPENDED_SEDIMENT_LONGITUDINAL_DISP_COEFF", 0);
            _dataManager.Set("SUSPENDED_SEDIMENT_TRANSVERSAL_DISP_COEFF", 0);
            _dataManager.Set("BED_LOAD_SEDIMENT_NUMBER_OF_SEDIMENTS", 0);
            _dataManager.Set("BEDLOADSEDIMENT_VALUES", emptyList);
            _dataManager.Set("BED_LOAD_SEDIMENT_TYPE_FORMULA", 1);
            _dataManager.Set("BED_LOAD_COUPLED_COMPUTATION", 1);
        }

        private void RestoreSedimentDefaults()
        {
            //Sediment
            _dataManager.Set("ST_FORMULA", 0);
            _dataManager.Set("STFRAC", 0);
            _dataManager.Set("NSEDSTEP", 1);
            _dataManager.Set("D50", 1.0);
            _dataManager.Set("D90", 1.0);
            _dataManager.Set("SG", 2.0);
            _dataManager.Set("POROS", 0.5);
            _dataManager.Set("A", 0.0);
            _dataManager.Set("B", 0.0);
        }

        private void RestoreRainfallDefaults()
        {
            var emptyList = new List<string[]>();
            //Rainfall
            _dataManager.Set("RAINEVAPDATA", emptyList);
        }

        private void RestoreProfilesDefaults()
        {
            var emptyList = new List<string[]>();
            //Profiles
            _dataManager.Set("NPROFILES", 0);
            _dataManager.Set("ND", 0);
            _dataManager.Set("NVERTEX1", 0);
            _dataManager.Set("PROFILE_VALUES", emptyList);
        }

        private void RestorePlotDefaults()
        {
            //Plot
            _dataManager.Set("FILE_NAME_OUTPUT", "");
            _dataManager.Set("MIN_VALUE", 0.0);
            _dataManager.Set("MAX_VALUE", 0.0);
            _dataManager.Set("PARAMETER", 1);
            _dataManager.Set("MIN_BED_CHANGE", 0.0);
            _dataManager.Set("SHOW_VELOCITY", 0);
            _dataManager.Set("X_RESOLUTION", 40);
            _dataManager.Set("Y_RESOLUTION", 40);
            _dataManager.Set("VELOCITY_SCALE", 50);
            _dataManager.Set("START", 0.0);
            _dataManager.Set("END", 0.0);
            _dataManager.Set("KML", 1);
            _dataManager.Set("WMV", 0);
            _dataManager.Set("GMT_OFFSET", 25);
            _dataManager.Set("EPSG", 0.0);
            _dataManager.Set("ANIMATE", 0);
            _dataManager.Set("RADIO_DATE_MAPPING_FILE", 0);
            _dataManager.Set("DATE_MAPPING_FILE", "");
            _dataManager.Set("RADIO_START_DATE_TIME", 0);
            _dataManager.Set("START_DATE_TIME", "");
            _dataManager.Set("TIFF_FILE", "");
            _dataManager.Set("NORTH", 0.0);
            _dataManager.Set("SOUTH", 0.0);
            _dataManager.Set("EAST", 0.0);
            _dataManager.Set("WEST", 0.0);
            _dataManager.Set("FRAMES_PER_SECOND", 1);
        }

        private void RestorePiersDefaults()
        {
            var emptyList = new List<string[]>();
            //Piers
            _dataManager.Set("PIERSDRAGFORCESDATA", emptyList);
        }

        private void RestoreOutflowDefaults()
        {
            var emptyList = new List<string[]>();
            //Outflow
            _dataManager.Set("NUMBER_OF_OUTFLOWS", 0);
            _dataManager.Set("OUTFLOWDATA", emptyList);
        }

        private void RestoreOpenboundariesDefaults()
        {
            var emptyList = new List<string[]>();
            //Openboundaries
            _dataManager.Set("OPENBOUNDARYCONDITIONSDATA", emptyList);
        }

        private void RestoreObservationPointsDefaults()
        {
            var emptyList = new List<string[]>();
            //ObservationPoints
            _dataManager.Set("OBSERVATIONPOINTSDATA", emptyList);
        }

        private void RestoreMudFlowDefaults()
        {
            //MudFlow
            _dataManager.Set("MF_FRR", 1);
            _dataManager.Set("MF_YS", 300);
            _dataManager.Set("MF_BVis", 0.00899);
            _dataManager.Set("MF_THETA", 3.5);
            _dataManager.Set("MF_DENS", 2000);
            _dataManager.Set("MF_CV", 0.1);
            _dataManager.Set("MF_YSR",1);
            _dataManager.Set("MF_VR",1);
			_dataManager.Set("MF_DENS_FORMULA", 1);
		}

        private void RestoreMeshDefaults()
        {
            //Mesh
            _dataManager.Set("NELEM", 0);
        }

        private void RestoreInternalratingtablesDefaults()
        {
            var emptyList = new List<string[]>();
            //Internalratingtables
            _dataManager.Set("INTERNALRATINGTABLE_VALUES", emptyList);
        }

        private void RestoreInflowDefaults()
        {
            var emptyList = new List<string[]>();
            //Inflow
            _dataManager.Set("NUMBER_OF_INFLOWS", 0);
            _dataManager.Set("INFLOWDATA", emptyList);
        }

        private void RestoreGraphicsDefaults()
        {
            //Graphics
            _dataManager.Set("IGRAPHCODE", 100);
            _dataManager.Set("COLORSCHEME", 1);
            _dataManager.Set("IAXES", 1);
            _dataManager.Set("IDXF", 0);
            _dataManager.Set("IGRAPHFILES", 0);
            _dataManager.Set("IVSF", 0);
            _dataManager.Set("SF_MULT", 2.0);
            _dataManager.Set("XMING", 0.0);
            _dataManager.Set("XMAXG", 0.0);
            _dataManager.Set("YMING", 0.0);
            _dataManager.Set("YMAXG", 0.0);
            _dataManager.Set("MINVARG", 0.0);
            _dataManager.Set("MAXVARG", 0.0);
            _dataManager.Set("MAXVELOC", 2.0);
            _dataManager.Set("BACKGROUND_IMAGE", 0);
            _dataManager.Set("TRANSPARENCY", 100);
            _dataManager.Set("BACKGROUND_IMAGE_FILE", "");
            _dataManager.Set("IMAGEWF", "");
        }

        private void RestoreDATConfigPLUSDefaults()
        {
            //DATConfigPLUS
            _dataManager.Set("Version", 201804);
            _dataManager.Set("IRIVERPLUS", 1);
            _dataManager.Set("IRAIN", 0);
            _dataManager.Set("ISED", 0);
            _dataManager.Set("IPIERS", 0);
            _dataManager.Set("IWEIRS", 0);
            _dataManager.Set("ICULVERTS", 0);
            _dataManager.Set("ISOURCES", 0);
            _dataManager.Set("IINTRC", 0);
            _dataManager.Set("IBRIDGES", 0);
            _dataManager.Set("IGATES", 0);
            _dataManager.Set("IDAMBREACH", 0);
            _dataManager.Set("iwetdry", 1.0);
            _dataManager.Set("IEXTREMES", 0);
            _dataManager.Set("NOGRAPH", 0);
            _dataManager.Set("IXSEC", 0);
            _dataManager.Set("IPROFILE", 0);
            _dataManager.Set("NOGRAPH", 1);
            _dataManager.Set("IOBS", 0);
            _dataManager.Set("IVARDT", 0);
            _dataManager.Set("DT", 0.5);
            _dataManager.Set("DTMULTIPLIER", 1.0);
            _dataManager.Set("TOUT", 0.1);
            _dataManager.Set("TLIMT", 2.0);
            _dataManager.Set("IINITIAL", 1);
            _dataManager.Set("IHOTSTART", 0);
            _dataManager.Set("rslipbc", 1.0);
            _dataManager.Set("XNMAN", 1.0);
            _dataManager.Set("EPSILON", 1);
            _dataManager.Set("NUNITS", 1);
            _dataManager.Set("HMIN", -1);
            _dataManager.Set("initial_wse", 0.0);
            _dataManager.Set("IADDISP", 0);
            _dataManager.Set("IWIND", 0);
            _dataManager.Set("IMUD", 0);
            _dataManager.Set("IDGP", _numberOfCores);
            _dataManager.Set("DIP", 1);
            //_dataManager.Set("LANGUAGE", 1);

        }

        private void RestoreDATConfigDefaults()
        {
            //DATConfig
            _dataManager.Set("Version", 201804);
            _dataManager.Set("IRIVERPLUS", 0);
            _dataManager.Set("IRAIN", 0);
            _dataManager.Set("ISED", 0);
            _dataManager.Set("IPIERS", 0);
            _dataManager.Set("IWEIRS", 0);
            _dataManager.Set("ICULVERTS", 0);
            _dataManager.Set("ISOURCES", 0);
            _dataManager.Set("IINTRC", 0);
            _dataManager.Set("iwetdry", 1.0);
            _dataManager.Set("IEXTREMES", 0);
            _dataManager.Set("NOGRAPH", 0);
            _dataManager.Set("IXSEC", 0);
            _dataManager.Set("IPROFILE", 0);
            _dataManager.Set("NOGRAPH", 1);
            _dataManager.Set("IOBS", 0);
            _dataManager.Set("IVARDT", 0);
            _dataManager.Set("DT", 1.0);
            _dataManager.Set("DTMULTIPLIER", 1.0);
            _dataManager.Set("TOUT", 0.1);
            _dataManager.Set("TLIMT", 2.0);
            _dataManager.Set("IINITIAL", 0);
            _dataManager.Set("IHOTSTART", 0);
            _dataManager.Set("rslipbc", 1.0);
            _dataManager.Set("XNMAN", 1.0);
            _dataManager.Set("EPSILON", 1);
            _dataManager.Set("NUNITS", 1);
            _dataManager.Set("HMIN", 0.3);
            _dataManager.Set("initial_wse", 0.0);
            _dataManager.Set("IADDISP", 0);
            _dataManager.Set("IWIND", 0);
            _dataManager.Set("IMUD", 0);
            _dataManager.Set("IDGP", -1);
            _dataManager.Set("DIP", 1);
            //_dataManager.Set("LANGUAGE", 1);
        }

        private void RestoreCulvertsDefaults()
        {
            var emptyList = new List<string[]>();
            //Culverts
            _dataManager.Set("CULVERTSDATA", emptyList);
        }

        private void RestoreCrossSectionDefaults()
        {
            var emptyList = new List<string[]>();
            //CrossSection
            _dataManager.Set("NCROSS_SECTIONS", 0);
            _dataManager.Set("NDCROSSSECTION", 0);
            _dataManager.Set("XSEC_VALUES", emptyList);
        }

        private void RestoreBoundaryDefaults()
        {
            var emptyList = new List<string[]>();
            //Boundary
            _dataManager.Set("NBOUNDARY1", 0);
            _dataManager.Set("NBOUNDARY2", 0);
            _dataManager.Set("DELIMITER2", 0);
            _dataManager.Set("BOUNDARYDATA", emptyList);
            _dataManager.Set("DELIMETER2", 0);
            _dataManager.Set("ISLANDDATA", emptyList);
        }

        private void RestoreAdvectionDispersionDefaults()
        {
            //AdvectionDispersion
            _dataManager.Set("AD_IRELEASE", 201405);
            _dataManager.Set("AD_SOURCES", 0);
            _dataManager.Set("AD_ALGORITHM", 1);
            _dataManager.Set("AD_COUPLED", 1);
            _dataManager.Set("AD_UVHBFILENAME", "");
            _dataManager.Set("AD_IVARDT", 0);
            _dataManager.Set("AD_DT", 1.0);
            _dataManager.Set("AD_DTMULT", 1.0);
            _dataManager.Set("AD_TOUT", 0.0);
            _dataManager.Set("AD_TLIMT", 0.0);
            _dataManager.Set("AD_IHOTSTART", 0);
            _dataManager.Set("AD_STARTTIME", 0.0);
            _dataManager.Set("AD_EPSILON", 0.0);
            _dataManager.Set("AD_DISPL", 0.0);
            _dataManager.Set("AD_DISPT", 0.0);
            _dataManager.Set("AD_KDECAY", 0.0);
        }

        private void ClearAllTables()
        {
            dataObservationPoints.Rows.Clear();
            dataPiersDragForces.Rows.Clear();
            dataOpenBoundaryConditions.Rows.Clear();
            dataSourcesAndSinks.Rows.Clear();
            dataWeirs.Rows.Clear();
            dataInternalRatingTable.Rows.Clear();
            dataCulverts.Rows.Clear();
            DisableType0();
            DisableType1();
            DisableType2();
            groupBoxInvertElevations.Visible = false;
            dataOutflow.Rows.Clear();
            dataTimeQ.Rows.Clear();
            dataCrossSection.Rows.Clear();
            dataProfile.Rows.Clear();
            dataRainfallEvaporation.Rows.Clear();
            dataSOURCESSeries.Rows.Clear();

        }

        private void ReadNamesOfLastProjects(string mode)
        {
            //Read paths and file names of last 5 projects.
            string recentProjectsFile = Path.GetTempPath() + "RecentProjects.TXT";
            try
            {
                if (File.Exists(recentProjectsFile))
                {
                    StreamReader sr = File.OpenText(recentProjectsFile);
                    string project;
                    if (!sr.EndOfStream)
                    {
                        project = sr.ReadLine();
                        Universal.RecentProjects[0] = project.Trim();
                        if (!sr.EndOfStream)
                        {
                            project = sr.ReadLine();
                            Universal.RecentProjects[1] = project.Trim();
                            if (!sr.EndOfStream)
                            {
                                project = sr.ReadLine();
                                Universal.RecentProjects[2] = project.Trim();
                                if (!sr.EndOfStream)
                                {
                                    project = sr.ReadLine();
                                    Universal.RecentProjects[3] = project.Trim();
                                    if (!sr.EndOfStream)
                                    {
                                        project = sr.ReadLine();
                                        Universal.RecentProjects[4] = project.Trim();
                                    }
                                }
                            }
                        }
                    }
                    sr.Close();

                    if (mode == "Include current .DAT")
                    {
                        Universal.RecentProjects[4] = Universal.RecentProjects[3];
                        Universal.RecentProjects[3] = Universal.RecentProjects[2];
                        Universal.RecentProjects[2] = Universal.RecentProjects[1];
                        Universal.RecentProjects[1] = Universal.RecentProjects[0];
                        Universal.RecentProjects[0] = (_currentProjectPathAndName + ".DAT").Trim();
                    }

                    //Clear repeats.
                    for (int i = 0; i <= 4; ++i)
                        for (int j = 1; j <= 4; ++j)
                            if (i != j && Universal.RecentProjects[i] == Universal.RecentProjects[j])
                                Universal.RecentProjects[j] = "";

                    //Make empties the last ones.
                    for (int i = 0; i <= 4; ++i)
                        if (Universal.RecentProjects[i] == "")
                            for (int j = i + 1; j <= 4; ++j)
                                if (Universal.RecentProjects[j] != "")
                                {
                                    Universal.RecentProjects[i] = Universal.RecentProjects[j];
                                    Universal.RecentProjects[j] = "";
                                    break;
                                }

                    if (Universal.RecentProjects[3] == Universal.RecentProjects[4])
                        Universal.RecentProjects[4] = "";

                    //Update 
                    var sw = new StreamWriter(recentProjectsFile);
                    for (int i = 0; i <= 4; ++i)
                        sw.WriteLine(Universal.RecentProjects[i]);
                    sw.Close();
                }
                else
                {
                    if (mode == "Include current .DAT")
                    {
                        var sw = new StreamWriter(recentProjectsFile);
                        sw.WriteLine(_currentProjectPathAndName);
                        sw.Close();
						Universal.RecentProjects[0] = (_currentProjectPathAndName + ".DAT").Trim();
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 0912131422: error trying to open file ", "ERROR 0912131422: error abriendo archivo ") +
                    recentProjectsFile + ". " + ex.Message,
                    "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void WriteNamesOfLastprojects(string mode)
        {
            //Read paths and file names of last 5 projects.
            string recentProjectsFile = Path.GetTempPath() + "RecentProjects.TXT";
            try
            {
                if (File.Exists(recentProjectsFile))
                {
                    //Update 
                    var sw = new StreamWriter(recentProjectsFile);
                    for (int i = 0; i <= 4; ++i)
                        sw.WriteLine(Universal.RecentProjects[i]);
                    sw.Close();
                }
                else
                {
                    if (mode == "Include current .DAT")
                    {
                        var sw = new StreamWriter(recentProjectsFile);
                        sw.WriteLine(_currentProjectPathAndName);
                        sw.Close();
						Universal.RecentProjects[0] = (_currentProjectPathAndName + ".DAT").Trim();
					}
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 2101141647: error trying to write file ", "ERROR 2101141647: error escribiendo archivo ") +
                    recentProjectsFile + ". " + ex.Message,
                    "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void txtNSEDSTEP_Validating(object sender, CancelEventArgs e)
        {
            if (txtNSEDSTEP.Text == "")
            {
                AddError(txtNSEDSTEP, Universal.Idioma("Time step ratio cannot be empty.", "La tasa del intervalo del tiempo esta vacía"), "Sediment Transport");
                return;
            }
            double x = int.Parse(txtNSEDSTEP.Text);
            if (x < 1)
            {
                AddError(txtNSEDSTEP, Universal.Idioma("Time step ratio must greater or equal to zero", "La tasa del intervalo del tiempo debe ser mayor o igual a cero"), "Sediment Transport");
            }
            else
            {
                RemoveError(txtNSEDSTEP);
            }
        }

        private void comboParallelComputing_Validated(object sender, EventArgs e)
        {
            UpdateData(comboParallelComputing);
        }

        private void comboNBarrels_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void dataBedLoadSediment_CellLeave(object sender, DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex <= 0 || e.RowIndex < 0) return;

            if (dataBedLoadSediment[e.ColumnIndex, e.RowIndex].Value == null)
            {
                dataBedLoadSediment.CurrentCell.ErrorText = "Value can't be empty";
                dataBedLoadSediment.CurrentCell.Style.BackColor = Universal.BackColorError;
                return;
            }

            try
            {
                string value;
                switch (e.RowIndex)
                {
                    case 2:
                        //value = Convert.ToDouble(dataSuspendedSediment[e.ColumnIndex, e.RowIndex].Value).ToString("N7");
                        value = dataBedLoadSediment[e.ColumnIndex, e.RowIndex].Value.ToString();
                        break;

                    case 4:
                        //value = Convert.ToDouble(dataSuspendedSediment[e.ColumnIndex, e.RowIndex].Value).ToString("N3");
                        value = dataBedLoadSediment[e.ColumnIndex, e.RowIndex].Value.ToString();
                        break;

                    default:
                        //value = Convert.ToDouble(dataSuspendedSediment[e.ColumnIndex, e.RowIndex].Value).ToString("#.##");
                        value = dataBedLoadSediment[e.ColumnIndex, e.RowIndex].Value.ToString();
                        break;
                }

                dataBedLoadSediment[e.ColumnIndex, e.RowIndex].Value = value;

                int cantColumns = dataBedLoadSediment.Columns.Count;
                int cantRows = dataBedLoadSediment.Rows.Count;

                var newData = new List<string[]>();

                for (int i = 0; i < cantColumns; ++i)
                {
                    newData.Add(new string[cantRows]);
                    for (int j = 0; j < cantRows; ++j)
                    {
                        object val = dataBedLoadSediment[i, j].Value;
                        if (val == null) newData[i][j] = "0.00";
                        else newData[i][j] = val.ToString();
                    }
                }

                _dataManager.Set((string)dataBedLoadSediment.Tag, newData);

            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 0402141517: ", "") +
                    ex.Message,
                    "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void dataBedLoadSediment_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }


        private void label1_Click(object sender, EventArgs e)
        {

        }

        private void lblPollutantTransportPlusTransversalCoeff_Click(object sender, EventArgs e)
        {

        }

        private void txtPollutantTransportPlusDispersionCoeff_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = CheckForReal(txtPollutantTransportPlusDispersionCoeff, e);
        }

        private void txtPollutantTransportPlusTransversalCoeff_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = CheckForReal(txtPollutantTransportPlusTransversalCoeff, e);
        }

        private void btnSavePollutantTransportPlus_Click(object sender, EventArgs e)
        {
            if (dataPollutantTransportPlusSolutes.RowCount >= 2)
            {
                var saveFileDialog = new SaveFileDialog
                {
                    Filter = "SOLUTES files (*.SOLUTES)|*.SOLUTES",
                    InitialDirectory = _currentProjectPath,
                    FileName = _currentProjectName + ".SOLUTES",
                    FilterIndex = 1,
                    RestoreDirectory = true
                };

                try
                {
                    if (saveFileDialog.ShowDialog() == DialogResult.OK) _dataManager.SaveSolutesToFile(saveFileDialog.FileName);
                }
                catch
                {
                    MessageBox.Show(Universal.Idioma("ERROR 0703141807: error trying to save .SOLUTES file.", "ERROR 0703141807: error almacenando archivo .SOLUTES."),
                        "RiverFlow2D", MessageBoxButtons.OK,
                        MessageBoxIcon.Error);
                }
            }
            else
            {
                MessageBox.Show(Universal.Idioma("The pollutant transport table is empty.", "La tabla de calidad del agua está vacía."), 
                    "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void dataPollutantTransportPlusSolutes_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {

            if (e.ColumnIndex < 0 || e.RowIndex < 0) return;

            string value = ""; // = "0.0";
            try
            {
                value = dataPollutantTransportPlusSolutes[e.ColumnIndex, e.RowIndex].Value.ToString();
            }
            catch (Exception)
            {
            }
            finally
            {
                dataPollutantTransportPlusSolutes[e.ColumnIndex, e.RowIndex].Value = value;
                UpdateData(dataPollutantTransportPlusSolutes);

            }
        }

        private void dataPollutantTransportPlusSolutes_RowsAdded(object sender, DataGridViewRowsAddedEventArgs e)
        {

            if (!_updating)
            {
                UpdateData(dataPollutantTransportPlusSolutes);
            }
        }

        private void dataPollutantTransportPlusSolutes_RowsRemoved(object sender, DataGridViewRowsRemovedEventArgs e)
        {
            if (!_updating)
            {
                UpdateData(dataPollutantTransportPlusSolutes);
                FixGraphicOutputPlotOptionsForPollutantTransport();

            }
        }

        private void txtPollutantTransportPlusDispersionCoeff_TextChanged(object sender, EventArgs e)
        {
            if (txtPollutantTransportPlusDispersionCoeff.Text != "") UpdateData(txtPollutantTransportPlusDispersionCoeff);
        }

        private void txtPollutantTransportPlusDispersionCoeff_Validating(object sender, CancelEventArgs e)
        {
            if (txtPollutantTransportPlusDispersionCoeff.Text == "")
            {
                AddError(txtPollutantTransportPlusDispersionCoeff, Universal.Idioma("Longitudinal dispersion coefficient cannot be empty.", "El coeficiente de dispersión longitudinal no puede estar vacío."),
                    "Pollutant Transport panel");
                return;
            }
            double x = Double.Parse(txtPollutantTransportPlusDispersionCoeff.Text);
            if (x < 0.0)
            {
                AddError(txtPollutantTransportPlusDispersionCoeff, Universal.Idioma("Longitudinal dispersion coefficient cannot be negative", "El coeficiente de dispersión longitudinal no puede ser negativo."),
                    "Pollutant Transport panel");
            }
            else
            {
                RemoveError(txtPollutantTransportPlusDispersionCoeff);
            }
        }

        private void txtPollutantTransportPlusDispersionCoeff_Validated(object sender, EventArgs e)
        {
            if (txtPollutantTransportPlusDispersionCoeff.Text != "") UpdateData(txtPollutantTransportPlusDispersionCoeff);
        }

        private void txtPollutantTransportPlusTransversalCoeff_Validated(object sender, EventArgs e)
        {
            if (txtPollutantTransportPlusTransversalCoeff.Text != "") UpdateData(txtPollutantTransportPlusTransversalCoeff);

        }

        private void txtPollutantTransportPlusTransversalCoeff_Validating(object sender, CancelEventArgs e)
        {
            if (txtPollutantTransportPlusTransversalCoeff.Text == "")
            {
                AddError(txtPollutantTransportPlusTransversalCoeff, Universal.Idioma("Transversal dispersion coefficient cannot be empty.", "El coeficiente de dispersión transversal no puede estar vacío."),
                    "Pollutant Transport panel");
                return;
            }
            double x = Double.Parse(txtPollutantTransportPlusTransversalCoeff.Text);
            if (x < 0.0)
            {
                AddError(txtPollutantTransportPlusTransversalCoeff, Universal.Idioma("Transversal dispersion coefficient cannot be negative", "El coeficiente de dispersión transversal no puede ser negativo."),
                    "Pollutant Transport panel");
            }
            else
            {
                RemoveError(txtPollutantTransportPlusTransversalCoeff);
            }
        }

        private void dataPollutantTransportPlusSolutes_KeyDown(object sender, KeyEventArgs e)
        {
            return;
            //if (e.KeyCode == Keys.Insert)
            //{
            //	dataPollutantTransportPlusSolutes.Rows.Insert(dataPollutantTransportPlusSolutes.CurrentRow.Index);
            //	//ColorRepeats(dataPollutantTransportPlusSolutes);
            //}
        }

        private void btnOpenPollutantTransportPlus_Click(object sender, EventArgs e)
        {
            var openFileDialog = new OpenFileDialog
            {
                Filter = "SOLUTES files (*.SOLUTES)|*.SOLUTES",
                InitialDirectory = _currentProjectPath,
                FileName = _currentProjectName + ".SOLUTES",
                FilterIndex = 1,
                RestoreDirectory = true,
                CheckFileExists = true
            };

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                try
                {
                    //Clean Pollutant Transport panel.
                    if (dataPollutantTransportPlusSolutes.RowCount > 2) dataPollutantTransportPlusSolutes.Rows.Clear();
                    RemoveError(txtPollutantTransportPlusDispersionCoeff);
                    RemoveError(txtPollutantTransportPlusTransversalCoeff);
                    //_dataManager.Set("POLL_TRANSP_PLUS_LONGITUDINAL_DISP_COEFF",0.0);
                    //_dataManager.Set("POLL_TRANSP_PLUS_TRANSVERSAL_DISP_COEFF", 0.0);

                    //Read .SOLUTES.
                    _dataManager.LoadSolutesFromFile(openFileDialog.FileName);
                    UpdateWithSolutesFile();
                    FixGraphicOutputPlotOptionsForPollutantTransport();
                }
                catch
                {
                    MessageBox.Show(Universal.Idioma("ERROR 2810111729: error trying to open .SED file.", "ERROR 2810111729: error abriendo archivo .SED."),
                        "RiverFlow2D", MessageBoxButtons.OK,
                        MessageBoxIcon.Error);
                }

            }
        }

        private void RemoveColumnsFromTable(DataGridView dataTable, int fromColumn)
        {

            try
            {
                while (dataTable.Columns.Count > fromColumn)
                {
                    string columnName;
                    if (fromColumn == 0)
                        columnName = dataTable.Columns[0].Name;
                    else
                        columnName = dataTable.Columns[1].Name;

                    dataTable.Columns.Remove(columnName);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 1003141528: error while creating suspended sediment table. ", "ERROR 1003141528: error creando tabla de sedimentos. ") +
                    ex.Message, "RiverFlow2D",
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

        }

        private void RemoveAllErrorMessages()
        {
            if (_errors.Count > 0)
            {
                for (int i = 0; i < _errors.Count; ++i)
                {
                    _errors[i].BackColor = SystemColors.Window;
                }
            }
            _errors.Clear();
            errorProvider.Clear();
        }

        private void dataPollutantTransportPlusSolutes_KeyPress(object sender, KeyPressEventArgs e)
        {
            //See if last row and key is Enter:
            if (e.KeyChar == (int)Keys.Enter &&
                dataPollutantTransportPlusSolutes.CurrentCell.RowIndex == dataPollutantTransportPlusSolutes.RowCount - 1)
            {
                dataPollutantTransportPlusSolutes.Rows.Add();
                return;
            }


            if (dataPollutantTransportPlusSolutes.CurrentCell.ColumnIndex == 2)
            {
                //check if pressed key is number, decimal or backspace
                if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                    e.Handled = true;
                else if (e.KeyChar == '.')
                {
                    if (dataPollutantTransportPlusSolutes != null &&
                        dataPollutantTransportPlusSolutes.EditingControl.Text.Contains("."))
                        e.Handled = true;
                    else
                        e.Handled = false;
                }
                else
                    e.Handled = false;
            }
        }

        private void dataPollutantTransportPlusSolutes_EditingControlShowing(object sender,
            DataGridViewEditingControlShowingEventArgs e)
        {
            var textbox = e.Control as DataGridViewTextBoxEditingControl;
            if (dataPollutantTransportPlusSolutes.CurrentCell.ColumnIndex == 2) //Coeficient
            {
                textbox.KeyPress -= new KeyPressEventHandler(dataPollutantTransportPlusSolutes_KeyPress);
                textbox.KeyPress += new KeyPressEventHandler(dataPollutantTransportPlusSolutes_KeyPress);
            }
        }

        private void chckTextFileOutput_CheckedChanged(object sender, EventArgs e)
        {
            //SetNOGRAPH();
        }

        private void chckTextFileOutput_Validating(object sender, CancelEventArgs e)
        {
            //SetNOGRAPH();
        }

        private void chckGraphicOutput_Validating(object sender, CancelEventArgs e)
        {
            //SetNOGRAPH();
        }

        private void chckGraphicOutput_MouseClick(object sender, MouseEventArgs e)
        {
            SetNOGRAPH();
        }

        private void chckTextFileOutput_MouseClick(object sender, MouseEventArgs e)
        {
            SetNOGRAPH();
        }

        private void btnBridges_Click(object sender, EventArgs e)
        {
            var thisBridge = new Bridges();
            thisBridge.ShowDialog();
        }

        private void radioPollutantTransport_CheckedChanged(object sender, EventArgs e)
        {

            //Pollutant Transport FE.
            EnableTabPage(tabPollutantTransport, radioPollutantTransport.Checked);

            //Pollutant Transport Plus.
            EnableTabPage(tabPagePollutantTransportPlus, radioPollutantTransport.Checked);

            //Sediment transport, mud/debris, and pollutant transport are mutually exclusive in PLUSes.
            if (radioPollutantTransport.Checked)
            {
                EnableTabPage(tabSedimentTransport, false);
                EnableTabPage(tabPageMudDebrisFlow, false);
                EnableTabPage(tabPageSedimentTransportPlus, false);
                EnableTabPage(tabPageOilSpillOnLand, false);
            }

            UpdateData(radioPollutantTransport);

            FixGraphicOutputPlotOptions();
        }

        private void radioPollutantTransport_Validated(object sender, EventArgs e)
        {
            UpdateData(radioPollutantTransport);
        }

        private void radioSedimentTransport_CheckedChanged(object sender, EventArgs e)
        {
            //Sediment transport FE.
            EnableTabPage(tabSedimentTransport, radioSedimentTransport.Checked);
            //Sediment transport Plus
            EnableTabPage(tabPageSedimentTransportPlus, radioSedimentTransport.Checked);

            if (comboTransportFormula.SelectedIndex != 6) //Van Rijn
                txtD90.Enabled = false;
            if (comboTransportFormula.SelectedIndex != 8) //rating curve
            {
                txtA.Enabled = false;
                txtB.Enabled = false;
            }

            chckSTFRAC.Enabled = false;

            //Sediment transport, mud/debris, pollutant transportand oil spill on land are mutually exclusive in PLUSes.
            if (radioSedimentTransport.Checked)
            {
                EnableTabPage(tabPageMudDebrisFlow, false);
                EnableTabPage(tabPagePollutantTransportPlus, false);
                EnableTabPage(tabPollutantTransport, false);
                EnableTabPage(tabPageOilSpillOnLand, false);
            }

            UpdateData(radioSedimentTransport);

            FixGraphicOutputPlotOptions();
        }

        private void radioMudDebris_CheckedChanged(object sender, EventArgs e)
        {
            EnableTabPage(tabPageMudDebrisFlow, radioMudDebris.Checked);

            //Sediment transport, mud/debris, and pollutant transport are mutually exclusive.
            if (radioMudDebris.Checked)
            {
                EnableTabPage(tabSedimentTransport, false);
                EnableTabPage(tabPageSedimentTransportPlus, false);
                EnableTabPage(tabPollutantTransport, false);
                EnableTabPage(tabPagePollutantTransportPlus, false);
                EnableTabPage(tabPageOilSpillOnLand, false);
            }

            UpdateData(radioMudDebris);

            FixGraphicOutputPlotOptions();
        }

        private void dataPollutantTransportPlusSolutes_CellLeave(object sender, DataGridViewCellEventArgs e)
        {
            //Delete all concentration items from Graphic Output dropdawn list.
            //Add new solutes names to Graphic Options Panel (plot dropdown).

            //FixGraphicOutputPlotOptionsForPollutantTransport();
            //return;

            //if (e.ColumnIndex <= 0 || e.RowIndex < 0) return;

            //if (dataPollutantTransportPlusSolutes[e.ColumnIndex, e.RowIndex].Value == null)
            //{
            //    dataPollutantTransportPlusSolutes.CurrentCell.ErrorText = "Value can't be empty";
            //    dataPollutantTransportPlusSolutes.CurrentCell.Style.BackColor = Universal.BackColorError;
            //    return;
            //}

            //try
            //{
            //    string value;
            //    switch (e.ColumnIndex)
            //    {
            //        case 1:

            //            value = dataPollutantTransportPlusSolutes[e.ColumnIndex, e.RowIndex].Value.ToString();
            //            break;

            //        case 2:
            //            //value = Convert.ToDouble(dataSuspendedSediment[e.ColumnIndex, e.RowIndex].Value).ToString("N3");
            //            value = dataPollutantTransportPlusSolutes[e.ColumnIndex, e.RowIndex].Value.ToString();
            //            break;

            //        default:
            //            value = dataPollutantTransportPlusSolutes[e.ColumnIndex, e.RowIndex].Value.ToString();
            //            //value = Convert.ToDouble(dataSuspendedSediment[e.ColumnIndex, e.RowIndex].Value).ToString("#.##");
            //            break;
            //    }

            //    dataPollutantTransportPlusSolutes[e.ColumnIndex, e.RowIndex].Value = value;

            //    int cantColumns = dataPollutantTransportPlusSolutes.Columns.Count;
            //    int cantRows = dataPollutantTransportPlusSolutes.Rows.Count;

            //    var newData = new List<string[]>();

            //    for (int newCol = 0 ; newCol < cantColumns ; ++newCol)
            //    {
            //        newData.Add(new string[cantRows]);
            //        for (int j = 0 ; j < cantRows ; ++j)
            //        {
            //            object val = dataPollutantTransportPlusSolutes[newCol, j].Value;
            //            if (val == null) newData[newCol][j] = "0.00";
            //            else newData[newCol][j] = val.ToString();
            //        }
            //    }

            //    _dataManager.Set((string) dataPollutantTransportPlusSolutes.Tag, newData);

            //}
            //catch (Exception ex)
            //{
            //    MessageBox.Show(Universal.Idioma("ERROR 0504141516: " + ex.Message,
            //                                    "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
            //}
        }

        private void dataPollutantTransportPlusSolutes_CellEndEdit(object sender, DataGridViewCellEventArgs e)
        {
            FixGraphicOutputPlotOptionsForPollutantTransport();
        }

        private void dataPollutantTransportPlusSolutes_CellValidated(object sender, DataGridViewCellEventArgs e)
        {

            //if (e.ColumnIndex == 1 && e.RowIndex >= 0 && e.RowIndex < dataPollutantTransportPlusSolutes.RowCount - 1)
            //{
            //    DataGridViewCell cell = dataPollutantTransportPlusSolutes[e.ColumnIndex, e.RowIndex];
            //    if (cell.Value == null)
            //    {
            //        dataPollutantTransportPlusSolutes.CurrentCell.ErrorText = "Value can't be empty";
            //        dataPollutantTransportPlusSolutes.CurrentCell.Style.BackColor = Universal.BackColorError;
            //    }
            //    else if ((string)dataPollutantTransportPlusSolutes[e.ColumnIndex - 1, e.RowIndex].Value == "True")
            //        FixGraphicOutputPlotOptionsForPollutantTransport();
            //}
            //else if (e.ColumnIndex == 0 && e.RowIndex > 0 && e.RowIndex < dataPollutantTransportPlusSolutes.RowCount - 1)
            //    if ((string)dataPollutantTransportPlusSolutes[e.ColumnIndex, e.RowIndex].Value == "True" &&
            //        ((string)dataPollutantTransportPlusSolutes[e.ColumnIndex + 1, e.RowIndex].Value != ""))
            //        FixGraphicOutputPlotOptionsForPollutantTransport();
        }

        private void dataPollutantTransportPlusSolutes_SelectionChanged(object sender, EventArgs e)
        {
        }

        private void dataPollutantTransportPlusSolutes_RowHeadersWidthSizeModeChanged(object sender,
            DataGridViewAutoSizeModeEventArgs e)
        {

        }

        private void radioMudDebris_Validated(object sender, EventArgs e)
        {
            _dataManager.Set((string)radioMudDebris.Tag, Convert.ToInt32(radioMudDebris.Checked));
        }

        private void radioSedimentTransport_Validated(object sender, EventArgs e)
        {
            UpdateData(radioSedimentTransport);
        }

        private void EnableTabPage(TabPage tPage, bool enable)
        {
            int size = tPage.Controls.Count;

            for (int i = 0; i < size; ++i)
            {
                tPage.Controls[i].Enabled = enable;
                RemoveError(tPage.Controls[i]);

                if (tPage.Controls[i] is Panel)
                {
                    int sizePanel = tPage.Controls[i].Controls.Count;

                    for (int j = 0; j < sizePanel; ++j)
                    {
                        tPage.Controls[i].Controls[j].Enabled = enable;
                        RemoveError(tPage.Controls[i].Controls[j]);
                    }
                }
            }
        }

        private void chckBridges_CheckedChanged(object sender, EventArgs e)
        {
            int size = tabPageBridges.Controls.Count;

            for (int i = 0; i < size; ++i)
            {
                tabPageBridges.Controls[i].Enabled = chckBridges.Checked;
                RemoveError(tabPageBridges.Controls[i]);

                if (tabPageBridges.Controls[i] is Panel)
                {
                    int sizePanel = tabPageBridges.Controls[i].Controls.Count;

                    for (int j = 0; j < sizePanel; ++j)
                    {
                        tabPageBridges.Controls[i].Controls[j].Enabled = chckBridges.Checked;
                        RemoveError(tabPageBridges.Controls[i].Controls[j]);
                    }
                }
            }
        }

        private void chckGates_CheckedChanged(object sender, EventArgs e)
        {
            //Enable or disable all elements of panel.

            //Get number of elements in tabPage than contains all elements of panel:
            int size = tabPageGates.Controls.Count;

            for (int i = 0; i < size; ++i)
            {
                tabPageGates.Controls[i].Enabled = chckGates.Checked;
                RemoveError(tabPageGates.Controls[i]);

                if (tabPageGates.Controls[i] is Panel)
                {
                    int sizePanel = tabPageGates.Controls[i].Controls.Count;

                    for (int j = 0; j < sizePanel; ++j)
                    {
                        tabPageGates.Controls[i].Controls[j].Enabled = chckGates.Checked;
                        RemoveError(tabPageGates.Controls[i].Controls[j]);
                    }
                }
            }
        }

        private void chckBridges_Validated(object sender, EventArgs e)
        {
            UpdateData(chckBridges);
        }

        private void chckGates_Validated(object sender, EventArgs e)
        {
            UpdateData(chckGates);
        }

        private void btnSaveGates_Click(object sender, EventArgs e)
        {
            if (dataGates.RowCount >= 1) //Check for at least one row (1 when not allow to add/delete rows) 
            {
                var saveFileDialog = new SaveFileDialog
                {
                    Filter = "GATES files (*.GATES)|*.GATES",
                    InitialDirectory = _currentProjectPath,
                    FileName = _currentProjectName + ".GATES",
                    FilterIndex = 1,
                    RestoreDirectory = true
                };

                try
                {
                    if (saveFileDialog.ShowDialog() == DialogResult.OK)
                        _dataManager.SaveGatesToFile(saveFileDialog.FileName);
                }
                catch
                {
                    MessageBox.Show(Universal.Idioma("ERROR 1406141212: error trying to save .GATES file.", "ERROR 1406141212: error almacenando archivo .GATES."),
                        "RiverFlow2D", MessageBoxButtons.OK,
                        MessageBoxIcon.Error);
                }
            }
            else
            {
                MessageBox.Show(Universal.Idioma("The gates table is empty. It was not saved.", "La tabla de compuertas está vacía. No fue almacenada."), 
                    "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void btnOpenGates_Click(object sender, EventArgs e)
        {
            var openFileDialog = new OpenFileDialog
            {
                Filter = "GATES files (*.GATES)|*.GATES",
                InitialDirectory = _currentProjectPath,
                FileName = _currentProjectName + ".GATES",
                FilterIndex = 1,
                RestoreDirectory = true,
                CheckFileExists = true
            };

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                var fileinfo = new FileInfo(openFileDialog.FileName);
                if (fileinfo.Length > 1)
                {
                    try
                    {
                        _dataManager.LoadGatesFromFile(openFileDialog.FileName);
                        UpdateWithGATESFile();
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(Universal.Idioma("ERROR 1406141143: error trying to open file ", "ERROR 1406141143: error abriendo archivo ") +
                            openFileDialog.FileName + ". " + ex.Message,
                            "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
                else
                    MessageBox.Show(Universal.Idioma("WARNING: file " + openFileDialog.FileName + " is empty.", "ADVERTENCIA: el archivo" + openFileDialog.FileName + " está vacío."),
                        "RiverFlow2D", MessageBoxButtons.OK,
                        MessageBoxIcon.Warning);
            }
        }

        private void dataGates_KeyDown(object sender, KeyEventArgs e)
        {
            //if (e.KeyCode == Keys.Insert)
            //{
            //	dataGates.Rows.Insert(dataGates.CurrentRow.Index);
            //}
        }

        private void dataGates_KeyPress(object sender, KeyPressEventArgs e)
        {
            //check if pressed key is number, decimal or backspace
            //if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
            //	e.Handled = true;
            //else if (e.KeyChar == '.')
            //{
            //	if (dataGates.EditingControl.Text.Contains("."))
            //		e.Handled = true;
            //	else
            //		e.Handled = false;
            //}
            //else
            //	e.Handled = false;
        }

        private void dataGates_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {

            //if (e.ColumnIndex < 0 || e.RowIndex < 0) return;
            //string value = "0.000";
            //try
            //{
            //	value = Convert.ToDouble(dataGates[e.ColumnIndex, e.RowIndex].Value).ToString("N3");
            //}
            //catch (Exception)
            //{
            //}
            //finally
            //{
            //	dataGates[e.ColumnIndex, e.RowIndex].Value = value;
            //	UpdateData(dataGates);
            //}
        }

        private void dataGates_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            //var textbox = e.Control as DataGridViewTextBoxEditingControl;
            //textbox.KeyPress -= new KeyPressEventHandler(dataGates_KeyPress);
            //textbox.KeyPress += new KeyPressEventHandler(dataGates_KeyPress);
        }

        private void dataGates_RowEnter(object sender, DataGridViewCellEventArgs e)
        {
            Universal.EnableTextChangedEvent = false;

            //From primary table, get file name of secondary table:
            string fileName = _currentProjectPath + "\\" + dataGates.Rows[e.RowIndex].Cells[4].Value;
            //Read seccondary data and load secondary table:
            lblGatesFileName.Text = dataGates.Rows[e.RowIndex].Cells[4].Value.ToString();
            //Update text above secundary table:
            ShowSecondaryGroup(dataGateOpenings, fileName);

            Universal.EnableTextChangedEvent = true;

            //try
            //{
            //  string openingFileName = dataGates[4, e.RowIndex].Value.ToString();
            //  txtOpeningsFile.Text = openingFileName;
            //  if (openingFileName != "")
            //  {
            //    dataOpenings.Rows.Clear();
            //    string[] split;
            //    string line;
            //    StreamReader s = File.OpenText(_currentProjectPath + "\\" + openingFileName);
            //    string nOpenings = s.ReadLine();
            //    for (int newCol = 1; newCol <= Convert.ToInt32(nOpenings); ++newCol)
            //    {
            //      line = s.ReadLine();
            //      var row = new string[2];
            //      split = line.Split(new Char[] { ' ', '\t' }, StringSplitOptions.RemoveEmptyEntries);
            //      row[0] = split[0];
            //      row[1] = split[1];
            //      dataOpenings.Rows.Add(row);
            //    }
            //    s.Close();
            //  }

            //}
            //catch (Exception ex)
            //{
            //  MessageBox.Show(Universal.Idioma("ERROR 1606141202: " + ex.Message, "RiverFlow2D",
            //    MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            //}

        }

        private void btnSaveAperture_Click(object sender, EventArgs e)
        {
            if (dataGateOpenings.RowCount >= 2)
            {
                var saveFileDialog = new SaveFileDialog
                {
                    InitialDirectory = _currentProjectPath,
                    FileName = txtOpeningsFile.Text,
                    RestoreDirectory = true
                };

                if (saveFileDialog.ShowDialog() == DialogResult.OK)
                {
                    try
                    {
                        TextWriter w = new StreamWriter(saveFileDialog.FileName);
                        w.WriteLine(dataGateOpenings.Rows.Count - 1);
                        for (var i = 0; i < dataGateOpenings.Rows.Count - 1; ++i)
                        {
                            double d0 = Convert.ToDouble(dataGateOpenings[0, i].Value);
                            double d1 = Convert.ToDouble(dataGateOpenings[1, i].Value);

                            w.WriteLine(d0 + "    " + d1);
                        }
                        w.Close();

                        txtOpeningsFile.Text = saveFileDialog.FileName;
                        //object a = txtOpeningsFile.Text;
                        //dataGates[4, dataGates.CurrentRow.Index].Value = a ;

                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(Universal.Idioma("ERROR 1406161211: error trying to save apertures file.\n", "ERROR 1406161211: error almacenando archivo de aberturas file.\n") +
                            ex.Message, "RiverFlow2D",
                            MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
                else
                {
                    MessageBox.Show(Universal.Idioma("The apertures table is empty. It was not saved.", "La tabla de aperturas está vacía. No fue almacenada. "), 
                        "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
        }

        private void dataGateOpenings_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex < 0 || e.RowIndex < 0) return;
            if (Universal.EnableTextChangedEvent)
            {
                try
                {
                    int index = dataGates.CurrentCell.RowIndex;
                    string gateOpeningsFileName = _currentProjectPath + "\\" + dataGates.Rows[index].Cells[4].Value.ToString();
                    if (Universal.SecondaryGroups.ContainsKey(gateOpeningsFileName))
                    {
                        Universal.SecondaryGroup aSeries = Universal.SecondaryGroups[gateOpeningsFileName];
                        var val = (string)dataGateOpenings.Rows[e.RowIndex].Cells[e.ColumnIndex].Value;
                        if (e.RowIndex <= aSeries.Table.Length - 1)
                        {
                            if (e.ColumnIndex == 0)
                                aSeries.Table[e.RowIndex].Col0 = val;
                            else
                                aSeries.Table[e.RowIndex].Col1 = val;

                            Universal.SecondaryGroups[gateOpeningsFileName] = aSeries;
                        }
                        else
                        {
                            var tmpAperture = new Universal.SecondaryTable[aSeries.Table.Length + 1];
                            aSeries.Table.CopyTo(tmpAperture, 0);

                            if (e.ColumnIndex == 0)
                                tmpAperture[tmpAperture.Length - 1].Col0 = val;
                            else
                                tmpAperture[tmpAperture.Length - 1].Col1 = val;

                            aSeries.Table = tmpAperture;
                            aSeries.NPoints = aSeries.NPoints + 1;

                            Universal.SecondaryGroups[gateOpeningsFileName] = aSeries;
                        }
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show(Universal.Idioma("ERROR 2304170814: error modifying value. ", "ERROR 2304170814: error modificando valor. ") +
                        ex.Message, "RiverFlow2D", MessageBoxButtons.OK,
                      MessageBoxIcon.Error);
                }
            }

            //if (e.ColumnIndex < 0 || e.RowIndex < 0) return;
            //string value = "0.0";
            //try
            //{
            //	value = Convert.ToDouble(dataOpenings[e.ColumnIndex, e.RowIndex].Value).ToString("N2");
            //}
            //catch (Exception)
            //{
            //}
            //finally
            //{
            //	dataOpenings[e.ColumnIndex, e.RowIndex].Value = value;
            //	UpdateData(dataOpenings);
            //}
        }

        private void dataGateOpenings_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            var textbox = e.Control as DataGridViewTextBoxEditingControl;
            textbox.KeyPress -= new KeyPressEventHandler(dataGateOpenings_KeyPress);
            textbox.KeyPress += new KeyPressEventHandler(dataGateOpenings_KeyPress);
        }

        private void dataGateOpenings_KeyPress(object sender, KeyPressEventArgs e)
        {
            //check if pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
            {
                if (dataGateOpenings.EditingControl.Text.Contains("."))
                    e.Handled = true;
                else
                    e.Handled = false;
            }
            else
                e.Handled = false;
        }

        private void dataGateOpenings_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Insert)
            {
                dataGateOpenings.Rows.Insert(dataGateOpenings.CurrentRow.Index);
            }
        }

        private void btnOpenBridges_Click(object sender, EventArgs e)
        {
            var openFileDialog = new OpenFileDialog
            {
                Filter = "BRIDGES files (*.BRIDGES)|*.BRIDGES",
                InitialDirectory = _currentProjectPath,
                FileName = _currentProjectName + ".BRIDGES",
                FilterIndex = 1,
                RestoreDirectory = true,
                CheckFileExists = true
            };

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                var fileinfo = new FileInfo(openFileDialog.FileName);
                if (fileinfo.Length > 1)
                {
                    try
                    {
                        _dataManager.LoadBridgesFromFile(openFileDialog.FileName);
                        UpdateWithBRIDGESFile();
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(Universal.Idioma("ERROR 2306141223: error trying to open file ", "ERROR 2306141223: error abriendo archivo ") +
                            openFileDialog.FileName + ". " + ex.Message,
                            "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
                else
                    MessageBox.Show(Universal.Idioma("WARNING: file " + openFileDialog.FileName + " is empty.", "ADVERTENCIA: el archivo" + openFileDialog.FileName + " está vacío."),
                        "RiverFlow2D", MessageBoxButtons.OK,
                        MessageBoxIcon.Warning);
            }

        }

        private void dataBridges_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            //if (e.ColumnIndex < 0 || e.RowIndex < 0) return;
            //string value = "0.0";
            //try
            //{
            //	value = Convert.ToDouble(dataBridgeGeometry[e.ColumnIndex, e.RowIndex].Value).ToString("N2");
            //}
            //catch (Exception)
            //{
            //}
            //finally
            //{
            //	dataBridgeGeometry[e.ColumnIndex, e.RowIndex].Value = value;
            //	UpdateData(dataBridgeGeometry);
            //}
        }

        private void dataBridges_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            //var textbox = e.Control as DataGridViewTextBoxEditingControl;
            //textbox.KeyPress -= new KeyPressEventHandler(dataBridges_KeyPress);
            //textbox.KeyPress += new KeyPressEventHandler(dataBridges_KeyPress);
        }

        private void dataBridges_KeyPress(object sender, KeyPressEventArgs e)
        {
            ////check if pressed key is number, decimal or backspace
            //if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
            //	e.Handled = true;
            //else if (e.KeyChar == '.')
            //{
            //	if (dataBridges.EditingControl.Text.Contains("."))
            //		e.Handled = true;
            //	else
            //		e.Handled = false;
            //}
            //else
            //	e.Handled = false;
        }

        private void dataBridges_RowEnter(object sender, DataGridViewCellEventArgs e)
        {
            Universal.EnableTextChangedEvent = false;

            //From primary table, get file name of secondary table:
            string fileName = _currentProjectPath + "\\" + dataBridges.Rows[e.RowIndex].Cells[1].Value;
            //Update text above secundary table:
            lblBridgesFileName.Text = dataBridges.Rows[e.RowIndex].Cells[1].Value.ToString();
            //Read seccondary data and load secondary table:
            ShowSecondaryGroup(dataBridgeGeometry, fileName);

            Universal.EnableTextChangedEvent = true;

            //_bridgeTabShowing = true;
            if (_bridgeTabShowing)
            {
                try
                {
                    string bridgeName = dataBridges[0, e.RowIndex].Value.ToString();
                    string openingFileName = dataBridges[1, e.RowIndex].Value.ToString();
                    txtBridgeGeometryFile.Text = openingFileName;

                    if (openingFileName != "")
                    {
                        if (CellValueChanged)
                        {
                            DialogResult dlgResult =
                                MessageBox.Show(
                                    "You changed one or more coordinate values in the current bridge.\n" +
                                    "If they are not saved they will be lost.\nDo you want to save them?",
                                    "RiverFlow2D", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                            if (dlgResult == DialogResult.Yes)
                                SaveBridgeGeometry();
                        }

                        StreamReader s = File.OpenText(_currentProjectPath + "\\" + openingFileName);
                        dataBridgeGeometry.Rows.Clear();
                        string nPoints = s.ReadLine();
                        var x = new PointF[Convert.ToInt32(nPoints) + 1];
                        var bed = new PointF[Convert.ToInt32(nPoints)];
                        var zLower = new PointF[Convert.ToInt32(nPoints)];
                        var zUpper = new PointF[Convert.ToInt32(nPoints)];
                        var deck = new PointF[Convert.ToInt32(nPoints)];
                        var a1 = Single.MaxValue;
                        var b1 = Single.MaxValue;
                        var a2 = Single.MinValue;
                        var b2 = Single.MinValue;

                        for (int newCol = 1; newCol <= Convert.ToInt32(nPoints); ++newCol)
                        {
                            string line = s.ReadLine();
                            var row = new string[5];
                            string[] split = line.Split(new Char[] { ' ', '\t' }, StringSplitOptions.RemoveEmptyEntries);
                            row[0] = split[0];
                            a1 = Math.Min(a1, Convert.ToSingle(row[0]));
                            a2 = Math.Max(a2, Convert.ToSingle(row[0]));
                            row[1] = split[1];
                            b1 = Math.Min(b1, Convert.ToSingle(row[1]));
                            b2 = Math.Max(b2, Convert.ToSingle(row[1]));
                            row[2] = split[2];
                            b1 = Math.Min(b1, Convert.ToSingle(row[2]));
                            b2 = Math.Max(b2, Convert.ToSingle(row[2]));
                            row[3] = split[3];
                            b1 = Math.Min(b1, Convert.ToSingle(row[3]));
                            b2 = Math.Max(b2, Convert.ToSingle(row[3]));
                            row[4] = split[4];
                            b1 = Math.Min(b1, Convert.ToSingle(row[4]));
                            b2 = Math.Max(b2, Convert.ToSingle(row[4]));
                            dataBridgeGeometry.Rows.Add(row);

                            bed[newCol - 1] = new PointF(Convert.ToSingle(row[0]), Convert.ToSingle(row[1]));
                            zLower[newCol - 1] = new PointF(Convert.ToSingle(row[0]), Convert.ToSingle(row[2]));
                            zUpper[newCol - 1] = new PointF(Convert.ToSingle(row[0]), Convert.ToSingle(row[3]));
                            deck[newCol - 1] = new PointF(Convert.ToSingle(row[0]), Convert.ToSingle(row[4]));
                        }
                        s.Close();

                        Bridges fc = Application.OpenForms["Bridges"] != null
                            ? (Bridges)Application.OpenForms["Bridges"]
                            : null;
                        if (fc != null)
                        {
                            fc.Close();
                        }

                        var aBridge = new Bridges();

                        aBridge.Show();
                        aBridge.Top = 0;
                        aBridge.Left = 0;
                        aBridge.Height = Convert.ToInt32(this.Width / 2);
                        aBridge.Width = Convert.ToInt32(this.Width / 1.5);
                        aBridge.Text = bridgeName;

                        aBridge.MyDataBridgeGeometry = dataBridgeGeometry;

                        //Transform from real coordinates to screen coordinates.
                        int x1;
                        int y1;
                        int x2;
                        int y2;
                        aBridge.GetWindowRectangle(out x1, out y1, out x2, out y2);

                        var bedI = new Point[Convert.ToInt32(nPoints)];
                        var zLowerI = new Point[Convert.ToInt32(nPoints)];
                        var zUpperI = new Point[Convert.ToInt32(nPoints)];
                        var deckI = new Point[Convert.ToInt32(nPoints)];

                        for (int newCol = 0; newCol < Convert.ToInt32(nPoints); ++newCol)
                        {
                            bedI[newCol].X = Convert.ToInt32(x1 + (x2 - x1) * (bed[newCol].X - a1) / (a2 - a1));
                            bedI[newCol].Y = Convert.ToInt32(y2 + (y1 - y2) * (bed[newCol].Y - b1) / (b2 - b1));
                            zLowerI[newCol].X = Convert.ToInt32(x1 + (x2 - x1) * (zLower[newCol].X - a1) / (a2 - a1));
                            zLowerI[newCol].Y = Convert.ToInt32(y2 + (y1 - y2) * (zLower[newCol].Y - b1) / (b2 - b1));
                            zUpperI[newCol].X = Convert.ToInt32(x1 + (x2 - x1) * (zUpper[newCol].X - a1) / (a2 - a1));
                            zUpperI[newCol].Y = Convert.ToInt32((y2 + (y1 - y2) * (zUpper[newCol].Y - b1) / (b2 - b1)));
                            deckI[newCol].X = Convert.ToInt32(x1 + (x2 - x1) * (deck[newCol].X - a1) / (a2 - a1));
                            deckI[newCol].Y = Convert.ToInt32(y2 + (y1 - y2) * (deck[newCol].Y - b1) / (b2 - b1));
                        }

                        aBridge.SetWorldRectangle(a1, b1, a2, b2);
                        aBridge.SetBridgePoints(Convert.ToInt32(nPoints), bed, zLower, zUpper, deck);
                        aBridge.SetDisplayPoints(bedI, zLowerI, zUpperI, deckI);
                        aBridge.RedrawCanvas();
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show("ERROR 2306141343: " +
                        ex.Message, "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                }
                finally
                {
                    _bridgeTabShowing = true;
                    CellValueChanged = false;
                }
            }
            else
            {
                _bridgeTabShowing = true;
                CellValueChanged = false;
            }
        }

        private void dataBridgeGeometry_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex >= 0 && e.RowIndex >= 0)
                if (Universal.EnableTextChangedEvent)
                {
                    //File name of secondary data. To be use as an index to the secondary data stored in memory structure:
                    int index = dataBridges.CurrentCell.RowIndex;
                    string fileName = _currentProjectPath + "\\" + dataBridges.Rows[index].Cells[1].Value.ToString();

                    //New value of cell:
                    var val = (string)dataBridgeGeometry.Rows[e.RowIndex].Cells[e.ColumnIndex].Value;

                    UpdateIndividualCellValueInSecondaryTableStructure(fileName, val, e);

                }

            //if (e.ColumnIndex < 0 || e.RowIndex < 0) return;
            //if (Universal.EnableTextChangedEvent)
            //{
            //  try
            //  {
            //    int index = dataBridgeGeometry.CurrentCell.RowIndex;
            //    string bridgeGeometryFileName = _currentProjectPath + "\\" + dataBridgeGeometry.Rows[index].Cells[1].Value.ToString();
            //    if (Universal.RainEvaporationGroups.ContainsKey(bridgeGeometryFileName))
            //    {
            //      Universal.BridgeGeometryGroup aSeries = Universal.BridgeGeometryGroups[bridgeGeometryFileName];
            //      var val = (string)dataRainfallEvaporation.Rows[e.RowIndex].Cells[e.ColumnIndex].Value;
            //      if (e.RowIndex <= aSeries.Table.Length - 1)
            //      {
            //        if (e.ColumnIndex == 0)
            //          aSeries.Table[e.RowIndex].X = val;
            //        else if (e.ColumnIndex == 1)
            //          aSeries.Table[e.RowIndex].Bed = val;
            //        else if (e.ColumnIndex == 1)
            //          aSeries.Table[e.RowIndex].Zlower = val;
            //        else if (e.ColumnIndex == 1)
            //          aSeries.Table[e.RowIndex].Zupper = val;
            //        else
            //          aSeries.Table[e.RowIndex].Deck = val;

            //        Universal.BridgeGeometryGroups[bridgeGeometryFileName] = aSeries;
            //      }
            //      else
            //      {
            //        var tmpHydrograph = new Universal.TimeRainEvaporationTable[aSeries.Table.Length + 1];
            //        aSeries.Table.CopyTo(tmpHydrograph, 0);

            //        if (e.ColumnIndex == 0)
            //          tmpHydrograph[tmpHydrograph.Length - 1].Time = val;
            //        else if (e.ColumnIndex == 1)
            //          tmpHydrograph[tmpHydrograph.Length - 1].RainFall = val;
            //        else
            //          tmpHydrograph[tmpHydrograph.Length - 1].Evaporation = val;

            //        aSeries.Table = tmpHydrograph;
            //        aSeries.NPoints = aSeries.NPoints + 1;

            //        Universal.RainEvaporationGroups[bridgeGeometryFileName] = aSeries;
            //      }
            //    }
            //  }
            //  catch (Exception ex)
            //  {
            //    MessageBox.Show(Universal.Idioma("ERROR 0105170645: error modifying value. " + ex.Message, "RiverFlow2D", MessageBoxButtons.OK,
            //      MessageBoxIcon.Error);
            //  }
            //}


            //if (e.ColumnIndex < 0 || e.RowIndex < 0) return;
            //string value = "0.0";
            //try
            //{
            //	value = Convert.ToDouble(dataBridgeGeometry[e.ColumnIndex, e.RowIndex].Value).ToString("N2");
            //}
            //catch (Exception)
            //{
            //}
            //finally
            //{
            //	UpdateData(dataBridgeGeometry);
            //	UpdateBridgePlot(e.ColumnIndex, e.RowIndex, Convert.ToSingle(value));
            //}
        }

        private void dataBridgeGeometry_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            var textbox = e.Control as DataGridViewTextBoxEditingControl;
            textbox.KeyPress -= new KeyPressEventHandler(dataBridgeGeometry_KeyPress);
            textbox.KeyPress += new KeyPressEventHandler(dataBridgeGeometry_KeyPress);
        }

        private void dataBridgeGeometry_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Insert)
            {
                dataBridgeGeometry.Rows.Insert(dataBridgeGeometry.CurrentRow.Index);
            }
        }

        private void dataBridgeGeometry_KeyPress(object sender, KeyPressEventArgs e)
        {
            //check if pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b' && e.KeyChar != '-')
                e.Handled = true;
            else if (e.KeyChar == '.')
            {
                if (dataBridgeGeometry.EditingControl.Text.Contains("."))
                    e.Handled = true;
                else
                    e.Handled = false;
            }
            else
                e.Handled = false;
        }

        private void btnSaveBridgeGeometry_Click(object sender, EventArgs e)
        {
            SaveBridgeGeometry();
        }

        private void SaveBridgeGeometry()
        {
            if (dataBridgeGeometry.RowCount >= 2)
            {
                var saveFileDialog = new SaveFileDialog
                {
                    InitialDirectory = _currentProjectPath,
                    FileName = txtBridgeGeometryFile.Text,
                    RestoreDirectory = true
                };

                if (saveFileDialog.ShowDialog() == DialogResult.OK)
                {
                    try
                    {
                        TextWriter w = new StreamWriter(saveFileDialog.FileName);
                        w.WriteLine(dataBridgeGeometry.Rows.Count - 1);
                        for (var i = 0; i < dataBridgeGeometry.Rows.Count; ++i)
                        {
                            double d0 = Convert.ToDouble(dataBridgeGeometry[0, i].Value);
                            double d1 = Convert.ToDouble(dataBridgeGeometry[1, i].Value);
                            double d2 = Convert.ToDouble(dataBridgeGeometry[2, i].Value);
                            double d3 = Convert.ToDouble(dataBridgeGeometry[3, i].Value);
                            double d4 = Convert.ToDouble(dataBridgeGeometry[4, i].Value);

                            w.WriteLine(d0 + "    " + d1 + "    " + d2 + "    " + d3 + "    " + d4);
                        }
                        w.Close();
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(Universal.Idioma("ERROR 2306141406: error trying to save bridge geometry file.\n", "ERROR 2306141406: error almacenando archivo de geometría de puente.\n") +
                            ex.Message, "RiverFlow2D",
                            MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
            else
            {
                MessageBox.Show(Universal.Idioma("The geometry table is empty. It was not saved.", "La tabla de geometría está vacía. No fue almacenada."), 
                    "RiverFlow2D", MessageBoxButtons.OK,  MessageBoxIcon.Information);
            }

        }

        private void btnSaveBridges_Click(object sender, EventArgs e)
        {
            if (dataBridges.RowCount >= 1) //Check for at least one row (1 when not allow to add/delete rows) 
            {
                var saveFileDialog = new SaveFileDialog
                {
                    Filter = "BRIDGES files (*.BRIDGES)|*.BRIDGES",
                    InitialDirectory = _currentProjectPath,
                    FileName = _currentProjectName + ".BRIDGES",
                    FilterIndex = 1,
                    RestoreDirectory = true
                };

                try
                {
                    if (saveFileDialog.ShowDialog() == DialogResult.OK)
                        _dataManager.SaveBridgesToFile(saveFileDialog.FileName);
                }
                catch
                {
                    MessageBox.Show(Universal.Idioma("ERROR 1406141212: error trying to save .BRIDGES file.", "ERROR 1406141212: error almacennado archivo .BRIDGES."),
                        "RiverFlow2D", MessageBoxButtons.OK,
                        MessageBoxIcon.Error);
                }
            }
            else
            {
                MessageBox.Show(Universal.Idioma("The bridges table is empty. It was not saved.", "La tabla de puentes está vacía. No fue almacenada."), 
                    "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void radioNone_Validated(object sender, EventArgs e)
        {
            UpdateData(radioNone);
			_dataManager.Set("IMUD", 0);
		}

        private void radioNone_CheckedChanged(object sender, EventArgs e)
        {
            if (radioNone.Checked)
            {
                EnableTabPage(tabPageMudDebrisFlow, false);
                EnableTabPage(tabPagePollutantTransportPlus, false);
                EnableTabPage(tabPollutantTransport, false);
                EnableTabPage(tabSedimentTransport, false);
                EnableTabPage(tabPageSedimentTransportPlus, false);
                EnableTabPage(tabPageOilSpillOnLand, false);
            }
            UpdateData(radioNone);
        }

        private void dataBridges_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        public void ChangeBridgeGeometryTableValue(int col, int row, double value)
        {
            dataBridgeGeometry[col, row].Value = Convert.ToString(value);
        }

        private void dataBridgeGeometry_MouseClick(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
            {
                int currentMouseOverRow = dataBridgeGeometry.HitTest(e.X, e.Y).RowIndex;
                if (currentMouseOverRow >= 0)
                {
                    auxiliaryDataGridView = dataBridgeGeometry;
                    auxiliaryFileName = _currentProjectPath + "\\" +
                                         dataBridges.Rows[dataBridges.CurrentCell.RowIndex].Cells[1].Value.ToString();
                    contextCutCopyPaste.Show(dataBridgeGeometry, new Point(e.X, e.Y));
                }
            }
        }

        private void dataBridgeGeometry_RowEnter(object sender, DataGridViewCellEventArgs e)
        {
            Bridges currentBridge = Application.OpenForms["Bridges"] != null
                ? (Bridges)Application.OpenForms["Bridges"]
                : null;
            if (currentBridge != null)
            {
                currentBridge.CurrentVertical = e.RowIndex;
                currentBridge.RedrawCanvas();
            }
        }

        private void dataBridgeGeometry_Click(object sender, EventArgs e)
        {

        }

        private void dataBridgeGeometry_CellMouseDown(object sender, DataGridViewCellMouseEventArgs e)
        {
            //if (e.RowIndex >= 0)
            //{
            //	dataBridgeGeometry.ClearSelection();
            //	dataBridgeGeometry.Rows[e.RowIndex].Selected = true;
            //	dataBridgeGeometry.CurrentCell = dataBridgeGeometry.Rows[e.RowIndex].Cells[0];
            //}
        }


        private void addPointToolStripMenuItem_Click(object sender, EventArgs e)
        {

        }

        private void addPointAboveToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (dataBridgeGeometry.CurrentRow.Index >= 0)
            {
                dataBridgeGeometry.MouseDown += dataBridgeGeometry_MouseDown;
                var row = (DataGridViewRow)dataBridgeGeometry.Rows[0].Clone();
                if (dataBridgeGeometry.CurrentRow.Index > 0)
                {
                    double v1 = Convert.ToDouble(dataBridgeGeometry[0, dataBridgeGeometry.CurrentRow.Index].Value);
                    double v2 = Convert.ToDouble(dataBridgeGeometry[0, dataBridgeGeometry.CurrentRow.Index - 1].Value);
                    row.Cells[0].Value = Convert.ToString((v1 + v2) / 2);
                    v1 = Convert.ToDouble(dataBridgeGeometry[1, dataBridgeGeometry.CurrentRow.Index].Value);
                    v2 = Convert.ToDouble(dataBridgeGeometry[1, dataBridgeGeometry.CurrentRow.Index - 1].Value);
                    row.Cells[1].Value = Convert.ToString((v1 + v2) / 2);
                    v1 = Convert.ToDouble(dataBridgeGeometry[2, dataBridgeGeometry.CurrentRow.Index].Value);
                    v2 = Convert.ToDouble(dataBridgeGeometry[2, dataBridgeGeometry.CurrentRow.Index - 1].Value);
                    row.Cells[2].Value = Convert.ToString((v1 + v2) / 2);
                    v1 = Convert.ToDouble(dataBridgeGeometry[3, dataBridgeGeometry.CurrentRow.Index].Value);
                    v2 = Convert.ToDouble(dataBridgeGeometry[3, dataBridgeGeometry.CurrentRow.Index - 1].Value);
                    row.Cells[3].Value = Convert.ToString((v1 + v2) / 2);
                    v1 = Convert.ToDouble(dataBridgeGeometry[4, dataBridgeGeometry.CurrentRow.Index].Value);
                    v2 = Convert.ToDouble(dataBridgeGeometry[4, dataBridgeGeometry.CurrentRow.Index - 1].Value);
                    row.Cells[4].Value = Convert.ToString((v1 + v2) / 2);

                }
                else
                {
                    double v = Convert.ToDouble(dataBridgeGeometry[0, dataBridgeGeometry.CurrentRow.Index].Value);
                    row.Cells[0].Value = Convert.ToString(v / 2);
                    v = Convert.ToDouble(dataBridgeGeometry[1, dataBridgeGeometry.CurrentRow.Index].Value);
                    row.Cells[1].Value = Convert.ToString(v / 2);
                    v = Convert.ToDouble(dataBridgeGeometry[2, dataBridgeGeometry.CurrentRow.Index].Value);
                    row.Cells[2].Value = Convert.ToString(v / 2);
                    v = Convert.ToDouble(dataBridgeGeometry[3, dataBridgeGeometry.CurrentRow.Index].Value);
                    row.Cells[3].Value = Convert.ToString(v / 2);
                    v = Convert.ToDouble(dataBridgeGeometry[4, dataBridgeGeometry.CurrentRow.Index].Value);
                    row.Cells[4].Value = Convert.ToString(v / 2);
                }
                dataBridgeGeometry.Rows.Insert(dataBridgeGeometry.CurrentRow.Index, row);
                dataBridgeGeometry.Rows[dataBridgeGeometry.CurrentRow.Index - 1].Selected = true;

                RestoreDataForBridgePlot();

            }
        }

        private void RestoreDataForBridgePlot()
        {
            try
            {
                int nPoints = dataBridgeGeometry.RowCount;
                var bed = new PointF[nPoints];
                var zLower = new PointF[nPoints];
                var zUpper = new PointF[nPoints];
                var deck = new PointF[nPoints];
                var a1 = Single.MaxValue;
                var b1 = Single.MaxValue;
                var a2 = Single.MinValue;
                var b2 = Single.MinValue;

                for (int i = 0; i <= nPoints - 1; ++i)
                {
                    Single d0 = Convert.ToSingle(dataBridgeGeometry[0, i].Value);
                    Single d1 = Convert.ToSingle(dataBridgeGeometry[1, i].Value);
                    Single d2 = Convert.ToSingle(dataBridgeGeometry[2, i].Value);
                    Single d3 = Convert.ToSingle(dataBridgeGeometry[3, i].Value);
                    Single d4 = Convert.ToSingle(dataBridgeGeometry[4, i].Value);

                    a1 = Math.Min(a1, d0);
                    a2 = Math.Max(a2, d0);
                    b1 = Math.Min(b1, d1);
                    b2 = Math.Max(b2, d1);
                    b1 = Math.Min(b1, d2);
                    b2 = Math.Max(b2, d2);
                    b1 = Math.Min(b1, d3);
                    b2 = Math.Max(b2, d3);
                    b1 = Math.Min(b1, d4);
                    b2 = Math.Max(b2, d4);

                    bed[i] = new PointF(d0, d1);
                    zLower[i] = new PointF(d0, d2);
                    zUpper[i] = new PointF(d0, d3);
                    deck[i] = new PointF(d0, d4);
                }

                Bridges fc = Application.OpenForms["Bridges"] != null
                    ? (Bridges)Application.OpenForms["Bridges"]
                    : null;
                if (fc != null)
                {
                    fc.Close();
                }

                var aBridge = new Bridges();

                aBridge.Show();
                aBridge.Top = 0;
                aBridge.Left = 0;
                aBridge.Height = Convert.ToInt32(this.Width / 2);
                aBridge.Width = Convert.ToInt32(this.Width / 1.5);
                aBridge.Text = txtBridgeGeometryFile.Text;

                aBridge.MyDataBridgeGeometry = dataBridgeGeometry;

                //Transform from real coordinates to screen coordinates.
                int x1;
                int y1;
                int x2;
                int y2;
                aBridge.GetWindowRectangle(out x1, out y1, out x2, out y2);

                var bedI = new Point[nPoints];
                var zLowerI = new Point[nPoints];
                var zUpperI = new Point[nPoints];
                var deckI = new Point[nPoints];

                for (int i = 0; i < nPoints; ++i)
                {
                    bedI[i].X = Convert.ToInt32(x1 + (x2 - x1) * (bed[i].X - a1) / (a2 - a1));
                    bedI[i].Y = Convert.ToInt32(y2 + (y1 - y2) * (bed[i].Y - b1) / (b2 - b1));
                    zLowerI[i].X = Convert.ToInt32(x1 + (x2 - x1) * (zLower[i].X - a1) / (a2 - a1));
                    zLowerI[i].Y = Convert.ToInt32(y2 + (y1 - y2) * (zLower[i].Y - b1) / (b2 - b1));
                    zUpperI[i].X = Convert.ToInt32(x1 + (x2 - x1) * (zUpper[i].X - a1) / (a2 - a1));
                    zUpperI[i].Y = Convert.ToInt32((y2 + (y1 - y2) * (zUpper[i].Y - b1) / (b2 - b1)));
                    deckI[i].X = Convert.ToInt32(x1 + (x2 - x1) * (deck[i].X - a1) / (a2 - a1));
                    deckI[i].Y = Convert.ToInt32(y2 + (y1 - y2) * (deck[i].Y - b1) / (b2 - b1));
                }

                aBridge.SetWorldRectangle(a1, b1, a2, b2);
                aBridge.SetBridgePoints(nPoints, bed, zLower, zUpper, deck);
                aBridge.SetDisplayPoints(bedI, zLowerI, zUpperI, deckI);
                aBridge.RedrawCanvas();
            }
            catch (Exception ex)
            {
                MessageBox.Show("ERROR 1908141122: " + 
                    ex.Message,  "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            }
        }

        private void addPointBelowToolStripMenuItem_Click(object sender, EventArgs e)
        {
            //dataBridgeGeometry.MouseDown += dataBridgeGeometry_MouseDown;
            //var row = (DataGridViewRow)dataBridgeGeometry.Rows[0].Clone();
            //dataBridgeGeometry.Rows.Insert(dataBridgeGeometry.CurrentRow.Index+1, row);

            if (dataBridgeGeometry.CurrentRow.Index >= 0)
            {
                dataBridgeGeometry.MouseDown += dataBridgeGeometry_MouseDown;
                var row = (DataGridViewRow)dataBridgeGeometry.Rows[0].Clone();
                if (dataBridgeGeometry.CurrentRow.Index < dataBridgeGeometry.RowCount - 1)
                {
                    double v1 = Convert.ToDouble(dataBridgeGeometry[0, dataBridgeGeometry.CurrentRow.Index].Value);
                    double v2 = Convert.ToDouble(dataBridgeGeometry[0, dataBridgeGeometry.CurrentRow.Index + 1].Value);
                    row.Cells[0].Value = Convert.ToString((v1 + v2) / 2);
                    v1 = Convert.ToDouble(dataBridgeGeometry[1, dataBridgeGeometry.CurrentRow.Index].Value);
                    v2 = Convert.ToDouble(dataBridgeGeometry[1, dataBridgeGeometry.CurrentRow.Index + 1].Value);
                    row.Cells[1].Value = Convert.ToString((v1 + v2) / 2);
                    v1 = Convert.ToDouble(dataBridgeGeometry[2, dataBridgeGeometry.CurrentRow.Index].Value);
                    v2 = Convert.ToDouble(dataBridgeGeometry[2, dataBridgeGeometry.CurrentRow.Index + 1].Value);
                    row.Cells[2].Value = Convert.ToString((v1 + v2) / 2);
                    v1 = Convert.ToDouble(dataBridgeGeometry[3, dataBridgeGeometry.CurrentRow.Index].Value);
                    v2 = Convert.ToDouble(dataBridgeGeometry[3, dataBridgeGeometry.CurrentRow.Index + 1].Value);
                    row.Cells[3].Value = Convert.ToString((v1 + v2) / 2);
                    v1 = Convert.ToDouble(dataBridgeGeometry[4, dataBridgeGeometry.CurrentRow.Index].Value);
                    v2 = Convert.ToDouble(dataBridgeGeometry[4, dataBridgeGeometry.CurrentRow.Index + 1].Value);
                    row.Cells[4].Value = Convert.ToString((v1 + v2) / 2);
                }
                else
                {
                    double v1 = Convert.ToDouble(dataBridgeGeometry[0, dataBridgeGeometry.CurrentRow.Index].Value);
                    double v2 = Convert.ToDouble(dataBridgeGeometry[0, dataBridgeGeometry.CurrentRow.Index - 1].Value);
                    row.Cells[0].Value = Convert.ToString(v1 + (v1 - v2));
                    v1 = Convert.ToDouble(dataBridgeGeometry[1, dataBridgeGeometry.CurrentRow.Index].Value);
                    v2 = Convert.ToDouble(dataBridgeGeometry[1, dataBridgeGeometry.CurrentRow.Index - 1].Value);
                    row.Cells[1].Value = Convert.ToString(v1 + (v1 - v2));
                    v1 = Convert.ToDouble(dataBridgeGeometry[2, dataBridgeGeometry.CurrentRow.Index].Value);
                    v2 = Convert.ToDouble(dataBridgeGeometry[2, dataBridgeGeometry.CurrentRow.Index - 1].Value);
                    row.Cells[2].Value = Convert.ToString(v1 + (v1 - v2));
                    v1 = Convert.ToDouble(dataBridgeGeometry[3, dataBridgeGeometry.CurrentRow.Index].Value);
                    v2 = Convert.ToDouble(dataBridgeGeometry[3, dataBridgeGeometry.CurrentRow.Index - 1].Value);
                    row.Cells[3].Value = Convert.ToString(v1 + (v1 - v2));
                    v1 = Convert.ToDouble(dataBridgeGeometry[4, dataBridgeGeometry.CurrentRow.Index].Value);
                    v2 = Convert.ToDouble(dataBridgeGeometry[4, dataBridgeGeometry.CurrentRow.Index - 1].Value);
                    row.Cells[4].Value = Convert.ToString(v1 + (v1 - v2));
                }
                dataBridgeGeometry.Rows.Insert(dataBridgeGeometry.CurrentRow.Index + 1, row);
                dataBridgeGeometry.Rows[dataBridgeGeometry.CurrentRow.Index + 1].Selected = true;

                RestoreDataForBridgePlot();
            }


        }

        private void contextMenuStrip1_Opening(object sender, CancelEventArgs e)
        {

        }

        private void radioOilSpillOnLand_CheckedChanged(object sender, EventArgs e)
        {
            EnableTabPage(tabPageOilSpillOnLand, radioOilSpillOnLand.Checked);

            //Sediment transport, mud/debris, pollutant transport, and oil spill on land are mutually exclusive.
            if (radioOilSpillOnLand.Checked)
            {
                EnableTabPage(tabSedimentTransport, false);
                EnableTabPage(tabPageSedimentTransportPlus, false);
                EnableTabPage(tabPollutantTransport, false);
                EnableTabPage(tabPagePollutantTransportPlus, false);
                EnableTabPage(tabPageMudDebrisFlow, false);
                btnRun.Text = Universal.Idioma("Run OilFlow2D", "Correr OilFlow2D");
            }
            else
            {
                btnRun.Text = Universal.Idioma("Run RiverFlow 2D", "Correr RiverFlow 2D");
            }

            //UpdateData(radioOilSpillOnLand);
        }

        private void radioOilSpillOnLand_Validated(object sender, EventArgs e)
        {
            _dataManager.Set((string)radioOilSpillOnLand.Tag, Convert.ToInt32(radioOilSpillOnLand.Checked) + 1);
        }

        //private void txtOilViscosity_KeyPress(object sender, KeyPressEventArgs e)
        //{
        //	//checking whether pressed key is number, decimal or backspace
        //	if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
        //		e.Handled = true;
        //	else if (e.KeyChar == '.')
        //		//check if there is already a decimal point
        //		if (txtOilOnLandViscosity.Text.Contains("."))
        //			e.Handled = true;
        //}

        //private void txtOilSpillOnLandViscosity_KeyPress(object sender, KeyPressEventArgs e)
        //{
        //	//checking whether pressed key is number, decimal or backspace
        //	if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
        //		e.Handled = true;
        //	else if (e.KeyChar == '.')
        //		//check if there is already a decimal point
        //		if (txtOilSpillOnLandViscosity.Text.Contains("."))
        //			e.Handled = true;
        //}

        //private void txtOilDensity_KeyPress(object sender, KeyPressEventArgs e)
        //{
        //	//checking whether pressed key is number, decimal or backspace
        //	if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
        //		e.Handled = true;
        //	else if (e.KeyChar == '.')
        //		//check if there is already a decimal point
        //		if (txtOilOnLandDensity.Text.Contains("."))
        //			e.Handled = true;
        //}

        //private void txtOilOnLandDensity_KeyPress(object sender, KeyPressEventArgs e)
        //{
        //	//checking whether pressed key is number, decimal or backspace
        //	if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
        //		e.Handled = true;
        //	else if (e.KeyChar == '.')
        //		//check if there is already a decimal point
        //		if (txtOilOnLandDensity.Text.Contains("."))
        //			e.Handled = true;
        //}

        //private void txtOilOnLandDensity_KeyPress(object sender, KeyPressEventArgs e)
        //{

        //}

        //private void txtOilViscosity_Validated(object sender, EventArgs e)
        //{
        //	if (txtOilOnLandViscosity.Text != "") UpdateData(txtOilOnLandViscosity);
        //}

        //private void txtOilOnLandViscosity_Validated(object sender, EventArgs e)
        //{
        //	if (txtOilOnLandViscosity.Text != "") UpdateData(txtOilOnLandViscosity);
        //}

        ////private void txtOilDensity_Validated(object sender, EventArgs e)
        ////{
        ////	if (txtOilOnLandDensity.Text != "") UpdateData(txtOilOnLandDensity);
        ////}

        //private void txtOilOnLandDensity_Validated(object sender, EventArgs e)
        //{
        //	if (txtOilOnLandDensity.Text != "") UpdateData(txtOilOnLandDensity);
        //}

        ////private void txtOilViscosity_Validating(object sender, CancelEventArgs e)
        ////{
        ////	if (txtOilOnLandViscosity.Text == "")
        ////		AddError(txtOilOnLandViscosity, "Oil Viscosity cannot be empty.", "Oil Spill on land panel");
        ////	else
        ////		RemoveError(txtOilOnLandViscosity);
        ////}

        //private void txtOilOnLandViscosity_Validating(object sender, CancelEventArgs e)
        //{
        //	if (txtOilOnLandViscosity.Text == "")
        //		AddError(txtOilOnLandViscosity, "Oil Viscosity cannot be empty.", "Oil Spill on land panel");
        //	else
        //		RemoveError(txtOilOnLandViscosity);
        //}

        //private void txtOilDensity_Validating(object sender, CancelEventArgs e)
        //{
        //	if (txtOilOnLandDensity.Text == "")
        //		AddError(txtOilOnLandDensity, "Oil Density cannot be empty.", "Oil Spill on land panel");
        //	else
        //		RemoveError(txtOilOnLandDensity);
        //}

        //private void txtOilOnLandDensity_Validating(object sender, CancelEventArgs e)
        //{
        //	if (txtOilOnLandDensity.Text == "")
        //		AddError(txtOilOnLandDensity, "Oil Density cannot be empty.", "Oil Spill on land panel");
        //	else
        //		RemoveError(txtOilOnLandDensity);
        //}

        private void btnSaveOILP_Click(object sender, EventArgs e)
        {
            var saveFileDialog = new SaveFileDialog
            {
                Filter = "OILP files (*.OILP)|*.OILP",
                InitialDirectory = _currentProjectPath,
                FileName = _currentProjectName + ".OILP",
                FilterIndex = 1,
                RestoreDirectory = true
            };

            try
            {
                if (saveFileDialog.ShowDialog() == DialogResult.OK)
                {
                    ValFile.SaveRiverFLO2DdataVal = true;
                    _dataManager.SaveOilpToFile(saveFileDialog.FileName);
                    string fileNameVal = saveFileDialog.FileName.Remove(saveFileDialog.FileName.Length - 4) + "VAL";
                    SaveRiverFLOW2DdataVAL(fileNameVal);
                    ValFile.SaveRiverFLO2DdataVal = false;
                }
            }
            catch
            {
                MessageBox.Show(Universal.Idioma("ERROR 1709141208: error trying to save .OILP file.", "ERROR 1709141208: error almacenando archivo .OILP."),
                    "RiverFlow2D", MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
            }
        }

        private void btnOpenOILP_Click(object sender, EventArgs e)
        {
            var openFileDialog = new OpenFileDialog
            {
                Filter = "OILP files (*.OILP)|*.OILP",
                InitialDirectory = _currentProjectPath,
                FileName = _currentProjectName + ".OILP",
                FilterIndex = 1,
                RestoreDirectory = true,
                CheckFileExists = true
            };

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                try
                {
                    _dataManager.LoadOilpFromFile(openFileDialog.FileName);
                    UpdateWithOILPFile();
                }
                catch
                {
                    MessageBox.Show(Universal.Idioma("ERROR 1803151701: error trying to open .MUD file.", "ERROR 1803151701: error abriendo archivo .MUD."),
                        "RiverFlow2D", MessageBoxButtons.OK,
                        MessageBoxIcon.Error);
                }

            }
        }

        //private void txtOilOnLandViscosity_KeyPress(object sender, KeyPressEventArgs e)
        //{
        //	//checking whether pressed key is number, decimal or backspace
        //	if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
        //		e.Handled = true;
        //	else if (e.KeyChar == '.')
        //		//check if there is already a decimal point
        //		if (txtOilOnLandViscosity.Text.Contains("."))
        //			e.Handled = true;
        //}

        private void SaveRiverFLOW2DdataVAL(string fileNameDat)
        {
            //Save RiverFLOW2Ddata.VAL
            try
            {

                if (ValFile.ValIndex > 0)
                {
                    string filenameVAL = fileNameDat;
                    string[] data = fileNameDat.Split(new Char[] { '\\' });
                    filenameVAL = "";
                    for (int i = 0; i < data.Length - 1; ++i)
                    {
                        filenameVAL += data[i] + "\\";
                    }
                    filenameVAL += "RiverFlow2Ddata.VAL";

                    TextWriter w = new StreamWriter(filenameVAL);

                    for (int i = 0; i < ValFile.ValIndex; ++i)
                        w.WriteLine(ValFile.RiverFLO2DdataVal[i]);
                    w.Close();

                    ValFile.ValIndex = 0;
                    ValFile.RiverFLO2DdataVal = new string[200];
                }
            }
            catch
            {
                MessageBox.Show(Universal.Idioma("ERROR 2810111727: error trying to save RiverFLO2Ddata.VAL.", "ERROR 2810111727: error almacenando RiverFLO2Ddata.VAL."),
                    "RiverFlow2D", MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
            }
        }

        private void comboTransportFormula_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (comboTransportFormula.SelectedIndex == 6) //Van Rijn
                txtD90.Enabled = true;
            else
            {
                txtD90.Enabled = false;
                RemoveError(txtD50);
                RemoveError(txtD90);
            }

            if (comboTransportFormula.SelectedIndex == 8) //rating curve
            {
                txtA.Enabled = true;
                txtB.Enabled = true;
            }
            else
            {
                txtA.Enabled = false;
                txtB.Enabled = false;
                RemoveError(txtA);
                RemoveError(txtB);

            }
        }

        private void comboTransportFormula_Validated(object sender, EventArgs e)
        {
            UpdateData(comboTransportFormula);
        }

        private void txtD90_TabIndexChanged(object sender, EventArgs e)
        {

        }

        private void txtSG_Validated(object sender, EventArgs e)
        {
            if (txtSG.Text != "") UpdateData(txtSG);
        }

        private void txtSG_Validating(object sender, CancelEventArgs e)
        {
            if (txtSG.Text == "")
            {
                AddError(txtSG, Universal.Idioma("Sediment Specific Gravity cannot be empty.", "La gravedad específica del sedimento no puede estar vacía."), "Sediment Transport panel");
                return;
            }
            double x = Double.Parse(txtSG.Text);
            if (x < 2.0 || x > 2.8)
            {
                AddError(txtSG, Universal.Idioma("Sediment Specific Gravity must be in the range [2.0, 2.8]", "La gravedad específica del sedimento debe estar en el intervalo [2.0,2.8]"), "Sediment Transport panel");
            }
            else RemoveError(txtSG);

        }

        private void txtB_Validated(object sender, EventArgs e)
        {
            if (txtB.Text != "") UpdateData(txtB);
        }

        private void chckSTFRAC_Validated(object sender, EventArgs e)
        {
            UpdateData(chckSTFRAC);
        }

        private void chckInfiltration_CheckedChanged(object sender, EventArgs e)
        {
            int size = tabInfiltration.Controls.Count;

            for (int i = 0; i < size; ++i)
            {
                tabInfiltration.Controls[i].Enabled = chckInfiltration.Checked;
                RemoveError(tabInfiltration.Controls[i]);

                if (tabInfiltration.Controls[i] is Panel)
                {
                    int sizePanel = tabInfiltration.Controls[i].Controls.Count;

                    for (int j = 0; j < sizePanel; ++j)
                    {
                        tabInfiltration.Controls[i].Controls[j].Enabled = chckInfiltration.Checked;
                        RemoveError(tabInfiltration.Controls[i].Controls[j]);
                    }
                }
            }

            SetIRAIN();


            //int size = tabPageInfiltration.Controls.Count;

            //for (int i = 0; i < size; ++i)
            //{
            //    tabPageInfiltration.Controls[i].Enabled = chckInfiltration.Checked;
            //    RemoveError(tabPageInfiltration.Controls[i]);

            //    if (tabPageInfiltration.Controls[i] is Panel)
            //    {
            //        int sizePanel = tabPageInfiltration.Controls[i].Controls.Count;

            //        for (int j = 0; j < sizePanel; ++j)
            //        {
            //            tabPageInfiltration.Controls[i].Controls[j].Enabled = chckInfiltration.Checked;
            //            RemoveError(tabPageInfiltration.Controls[i].Controls[j]);
            //        }
            //    }
            //}

            //SetIRAIN();
        }


        private void SetIRAIN()
        {
            if (chckInfiltration.Checked & chckRainfallEvaporation.Checked)
                _dataManager.Set("IRAIN", 4);
            else if (chckInfiltration.Checked & !chckRainfallEvaporation.Checked)
                _dataManager.Set("IRAIN", 3);
            else if (!chckInfiltration.Checked & chckRainfallEvaporation.Checked)
                _dataManager.Set("IRAIN", 2);
            else _dataManager.Set("IRAIN", 0);
		}

        private void chckInfiltration_Validated(object sender, EventArgs e)
        {
            //UpdateData(chckInfiltration);
        }


        private void dataInfiltration_RowEnter(object sender, DataGridViewCellEventArgs e)
        {

            Universal.EnableTextChangedEvent = false;



            //From primary table, get file name of secondary table:
            string fileName = _currentProjectPath + "\\" + dataInfiltration.Rows[e.RowIndex].Cells[1].Value;
            //Update text above secundary table:
            groupBoxInfiltrationFileName.Text = dataInfiltration.Rows[e.RowIndex].Cells[1].Value.ToString();
            //Read seccondary data and load secondary table:
            LoadLINFGroup(1, fileName);

            Universal.EnableTextChangedEvent = true;

            //string modelFile = dataInfiltration[1, e.RowIndex].Value.ToString().Trim();
            //try
            //{
            //  if (modelFile != "")
            //  {
            //    See if parameters from previous row were saved:
            //    if (InfiltrationpPametersChanged)
            //      if (MessageBox.Show(Universal.Idioma("Infiltration parameters from model file " + txtModelFile.Text.Trim() + " changed.\n" + "Would you like to save it?",
            //                          "RiverFlow2D", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            //        SaveInfiltrationModelFile();
            //      else
            //        InfiltrationpPametersChanged = false;

            //    modelFile = _currentProjectPath + "\\" + modelFile;
            //    txtModelFile.Text = modelFile;
            //    StreamReader s = File.OpenText(modelFile);
            //    string line;
            //    line = s.ReadLine(); //Model type.
            //    comboModelName.SelectedIndex = Convert.ToInt32(line.Trim()) - 1;
            //    line = s.ReadLine(); //Number of parameters.
            //    txtNumberOfParameters.Text = line.Trim();
            //    int nParms = Convert.ToInt32(line);
            //    line = s.ReadLine(); //Parameters.
            //    string[] split = line.Split(new[] { ' ', '\t' }, StringSplitOptions.RemoveEmptyEntries);

            //    if (split.Length == 0)
            //    {
            //      txtDecayRate.Text = "";
            //      txtFinalRate.Text = "";
            //      txtInitialRate.Text = "";
            //    }
            //    else if (split.Length == 1)
            //    {
            //      txtDecayRate.Text = split[0];
            //      txtFinalRate.Text = "";
            //      txtInitialRate.Text = "";
            //    }
            //    else if (split.Length == 2)
            //    {
            //      txtDecayRate.Text = split[0];
            //      txtFinalRate.Text = split[1];
            //      txtInitialRate.Text = "";
            //    }
            //    else
            //    {
            //      txtDecayRate.Text = split[0];
            //      txtFinalRate.Text = split[1];
            //      txtInitialRate.Text = split[2];
            //    }
            //    s.Close();
            //  }

            //  SetInfiltrationModelName();
            //  InfiltrationpPametersChanged = false;
            //}
            //catch (Exception ex)
            //{
            //  MessageBox.Show(Universal.Idioma("ERROR 2302151653: " + ex.Message, "RiverFlow2D",
            //    MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            //}

        }

        private void SetInfiltrationModelName()
        {
            bool unit = Universal.RiverUnits == "English";

            lblInitialRate.Visible = true;
            txtDecayRate.Visible = true;
            txtFinalRate.Visible = true;
            txtInitialRate.Visible = true;
            string modelType = comboModelName.Text.Trim();
            if (modelType == "Horton")
            {
                //comboModelName.Text = "Horton";
                lblKDecayRate.Text = Universal.Idioma("K Decay Rate", "Tasa de Decaimíento K");
                lblFinalRate.Text = Universal.Idioma("Fc Final Rate (", "Tasa Final Fc (") + (unit ? "in/s" : "m/s") + ")";
                lblInitialRate.Text = Universal.Idioma("Fo Initial Rate (", "Fo Tasa Inicial (") + (unit ? "in/s" : "m/s") + ")";
            }
            else if (modelType == "Green-Ampt")
            {
                //comboModelName.Text = "Green-Ampt";
                lblKDecayRate.Text = Universal.Idioma("Hydraulic Conductivity (", "Conductividad Hidráulica (") + (unit ? "in/s" : "m/s") + ")";
                lblFinalRate.Text = Universal.Idioma("Psi Wetting Front Soil Suction Head (" + (unit ? "in" : "m") + ")", "Carga de succión en frente mojado (" + (unit ? "in" : "m") + ")");
                lblInitialRate.Text = "Delta Theta";
            }
            else if (modelType == "SCS-CN")
            {
                //comboModelName.Text = "SCS-CN";
                lblKDecayRate.Text = Universal.Idioma("CN Curve Number", "Número CN");
                lblFinalRate.Text = Universal.Idioma("Initial Abstraction Constant", "Constante de Abstración Inicial");
                lblInitialRate.Visible = false;
                txtInitialRate.Visible = false;
                lblInitialRate.Text = "";
            }
            else
            {
                //comboModelName.Text = "?";
                lblKDecayRate.Text = "?";
                lblFinalRate.Text = "?";
                lblInitialRate.Text = "?";
            }

        }

        private void btnOpenInfiltration_Click(object sender, EventArgs e)
        {
            var openFileDialog = new OpenFileDialog
            {
                Filter = "LINF files (*.LINF)|*.LINF",
                InitialDirectory = _currentProjectPath,
                FileName = _currentProjectName + ".LINF",
                FilterIndex = 1,
                RestoreDirectory = true,
                CheckFileExists = true
            };

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                var fileinfo = new FileInfo(openFileDialog.FileName);
                if (fileinfo.Length > 1)
                {
                    try
                    {
                        _dataManager.LoadInfiltrationFromFile(openFileDialog.FileName);
                        UpdateWithLINFFile();
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(Universal.Idioma("ERROR 1202151819: error trying to open file ", "ERROR 1202151819: error abriendo archivo ") +
                            openFileDialog.FileName + ". " + ex.Message,
                            "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
                else
                    MessageBox.Show(Universal.Idioma("WARNING: file " + openFileDialog.FileName + " is empty.", "ADVERTENCIA: el archivo" + openFileDialog.FileName + " está vacío."),
                        "RiverFlow2D", MessageBoxButtons.OK,
                        MessageBoxIcon.Warning);
            }
        }

        private void btnSaveInfiltration_Click(object sender, EventArgs e)
        {
            if (dataInfiltration.RowCount >= 1) //Check for at least one row (1 when not allow to add/delete rows) 
            {
                var saveFileDialog = new SaveFileDialog
                {
                    Filter = "LINF files (*.LINF)|*.LINF",
                    InitialDirectory = _currentProjectPath,
                    FileName = _currentProjectName + ".LINF",
                    FilterIndex = 1,
                    RestoreDirectory = true
                };

                try
                {
                    if (saveFileDialog.ShowDialog() == DialogResult.OK)
                        _dataManager.SaveInfiltrationToFile(saveFileDialog.FileName);
                }
                catch
                {
                    MessageBox.Show(Universal.Idioma("ERROR 1202151831: error trying to save .LINF file.", "ERROR 1202151831: error abriendo archivo .LINF."),
                        "RiverFlow2D", MessageBoxButtons.OK,
                        MessageBoxIcon.Error);
                }
            }
            else
            {
                MessageBox.Show(Universal.Idioma("The infiltration table is empty. It was not saved.", "La tabla de infiltración está vacía. No fue almacenada."), 
                    "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        //dataInfiltration_CellValueChanged(sender, e);

        ////Writes model file when leaving row (for it could have been modified).
        //if (e.RowIndex >= 0)
        //{
        //	string modelFileName = CurrentProjectPath + "\\" + dataInfiltration[1, e.RowIndex].Value; //This is the name of model file (with path).
        //	try
        //	{
        //		if (modelFileName != "")
        //		{
        //			UpdateData(dataInfiltration);
        //			//MessageBox.Show("Writing file on _RowLeave: " + modelFileName);
        //			txtModelFile.Text = modelFileName;
        //			//Open Model File.
        //			TextWriter modelFile = new StreamWriter(modelFileName);
        //			modelFile.WriteLine(dataInfiltration[2, e.RowIndex].Value); //Model type (1 to 3).

        //			//Number of parameter (hiden in column 3).
        //			var nParms = (string)dataInfiltration[3, e.RowIndex].Value;
        //			int nParameters = Convert.ToInt32(nParms);
        //			modelFile.WriteLine(nParameters);

        //			//Parameters.
        //			string parameters = "";
        //			for (int newCol = 0; newCol < Convert.ToInt32(nParms); ++newCol)
        //				parameters = parameters.Trim() + "  " + dataInfiltration[newCol + 4, e.RowIndex].Value;

        //			modelFile.WriteLine(parameters);
        //			modelFile.Close();
        //			MessageBox.Show(modelFileName + "  " + parameters);


        //		}
        //	}
        //	catch (Exception ex)
        //	{
        //		MessageBox.Show(Universal.Idioma("ERROR 1602151729: error writing " + modelFileName + ". " + ex.Message,
        //			"RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
        //	}
        //}

        private void dataInfiltration_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            //if (e.ColumnIndex >= 0 && e.RowIndex >= 0)
            //{
            //	string value = "";
            //	value = dataInfiltration[e.ColumnIndex, e.RowIndex].Value.ToString();
            //	dataInfiltration[e.ColumnIndex, e.RowIndex].Value = value;
            //	UpdateData(dataInfiltration);
            //}
        }

        private void dataInfiltration_KeyPress(object sender, KeyPressEventArgs e)
        {
            //if (dataPollutantTransportPlusSolutes.CurrentCell.ColumnIndex != 1 &
            //    dataPollutantTransportPlusSolutes.CurrentCell.ColumnIndex != 2)
            //{
            //	//check if pressed key is number, decimal or backspace
            //	if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
            //		e.Handled = true;
            //	else if (e.KeyChar == '.')
            //	{
            //		if (dataPollutantTransportPlusSolutes != null &&
            //		    dataPollutantTransportPlusSolutes.EditingControl.Text.Contains("."))
            //			e.Handled = true;
            //		else
            //			e.Handled = false;
            //	}
            //	else
            //		e.Handled = false;
            //}
        }

        private void dataInfiltration_CellLeave(object sender, DataGridViewCellEventArgs e)
        {
            ////Update data be
            //if (e.RowIndex >= 0)
            //{

            //	if (e.ColumnIndex < 0 || e.RowIndex < 0) return;
            //	string value = "0.0";
            //	try
            //	{
            //		value = Convert.ToDouble(dataInfiltration[e.ColumnIndex, e.RowIndex].Value).ToString("N2");
            //	}
            //	catch (Exception)
            //	{
            //	}
            //	finally
            //	{
            //		dataInfiltration[e.ColumnIndex, e.RowIndex].Value = value;
            //		UpdateData(dataInfiltration);
            //	}

            //	//Writes model file when leaving row (for it could have been modified).
            //	string modelFileName = CurrentProjectPath + "\\" + dataInfiltration[1, e.RowIndex].Value; //This is the name of model file (with path).
            //	try
            //	{
            //		if (modelFileName != "")
            //		{
            //			UpdateData(dataInfiltration);
            //			//MessageBox.Show("Writing file on _RowLeave: " + modelFileName);
            //			//txtModelFile.Text = modelFileName;
            //			//Open Model File.
            //			TextWriter modelFile = new StreamWriter(modelFileName);
            //			string modelType = dataInfiltration[2, e.RowIndex].Value.ToString().Trim();
            //			if (modelType == "Horton")
            //				modelFile.WriteLine("1");
            //			else if (modelType == "Green-Ampt")
            //				modelFile.WriteLine("2");
            //			else
            //				modelFile.WriteLine("3");

            //			//Number of parameter (hiden in column 3).
            //			var nParms = (string)dataInfiltration[3, e.RowIndex].Value;
            //			int nParameters = Convert.ToInt32(nParms);
            //			modelFile.WriteLine(nParameters);

            //			//Parameters.
            //			string parameters = "";
            //			for (int newCol = 0; newCol < Convert.ToInt32(nParms); ++newCol)
            //				parameters = parameters.Trim() + "  " + dataInfiltration[newCol + 4, e.RowIndex].Value;

            //			modelFile.WriteLine(parameters);
            //			modelFile.Close();
            //			//MessageBox.Show(modelFileName + "  " + parameters);


            //		}
            //	}
            //	catch (Exception ex)
            //	{
            //		MessageBox.Show(Universal.Idioma("ERROR 1602151729: error writing " + modelFileName + ". " + ex.Message,
            //			"RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
            //	}

        }

        private void dataInfiltration_CellEnter(object sender, DataGridViewCellEventArgs e)
        {
            //string modelFileName = CurrentProjectPath + "\\" + dataInfiltration[1, e.RowIndex].Value; //This is the name of model file (with path).
            //txtModelFile.Text = modelFileName;

        }

        private void dataInfiltration_CellValidated(object sender, DataGridViewCellEventArgs e)
        {
            //if (e.ColumnIndex >= 0 && e.RowIndex >= 0)
            //{
            //	string value = "";
            //	try
            //	{
            //		value = dataInfiltration[e.ColumnIndex, e.RowIndex].Value.ToString();
            //	}
            //	catch (Exception)
            //	{
            //	}
            //	finally
            //	{
            //		dataInfiltration[e.ColumnIndex, e.RowIndex].Value = value;
            //		UpdateData(dataInfiltration);
            //	}
            //}
        }

        private void dataInfiltration_RowValidated(object sender, DataGridViewCellEventArgs e)
        {
            //	if (e.ColumnIndex >= 0 && e.RowIndex >= 0)
            //	{
            //		string value = "";
            //		try
            //		{
            //			value = dataInfiltration[e.ColumnIndex, e.RowIndex].Value.ToString();
            //		}
            //		catch (Exception)
            //		{
            //		}
            //		finally
            //		{
            //			dataInfiltration[e.ColumnIndex, e.RowIndex].Value = value;
            //			UpdateData(dataInfiltration);
            //		}
            //	}
            //}
        }

        private void btnSaveModelFile_Click(object sender, EventArgs e)
        {
            SaveInfiltrationModelFile();
        }

        private void SaveInfiltrationModelFile()
        {
            string modelFileName = txtModelFile.Text; //This is the name of model file (with path).
            try
            {
                if (modelFileName != "")
                {
                    TextWriter modelFile = new StreamWriter(modelFileName);
                    string modelName = comboModelName.Text.Trim();
                    if (modelName == "Horton")
                        modelFile.WriteLine("1");
                    else if (modelName == "Green-Ampt")
                        modelFile.WriteLine("2");
                    else if (modelName == "SCS-CN")
                        modelFile.WriteLine("3");

                    //Number of parameter (hiden in column 3).
                    int nParms = Convert.ToInt32(txtNumberOfParameters.Text.Trim());
                    modelFile.WriteLine(txtNumberOfParameters.Text.Trim());

                    //Parameters.
                    string parameters = txtDecayRate.Text.Trim() + "  " + txtFinalRate.Text.Trim() + "  " + txtInitialRate.Text.Trim();
                    modelFile.WriteLine(parameters);
                    modelFile.Close();
                    InfiltrationpPametersChanged = false;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 1602151729: error writing ", "ERROR 1602151729: error ecribiendo ") +
                    modelFileName + ". " + ex.Message,
                    "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void txtDecayRate_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = CheckForReal(txtDecayRate, e);
        }

        private void txtFinalRate_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = CheckForReal(txtFinalRate, e);
        }

        private void txtInitialRate_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = CheckForReal(txtInitialRate, e);
        }

        private void dataRainfallEvaporationZones_RowEnter(object sender, DataGridViewCellEventArgs e)
        {
            Universal.EnableTextChangedEvent = false;

            //From primary table, get file name of secondary table:
            string fileName = _currentProjectPath + "\\" + dataRainfallEvaporationZones.Rows[e.RowIndex].Cells[1].Value;
            //Update text above secundary table:
            lblRainfallFileName.Text = dataRainfallEvaporationZones.Rows[e.RowIndex].Cells[1].Value.ToString();
            //Read seccondary data and load secondary table:

            ShowSecondaryGroup(dataRainfallEvaporation, fileName);

            Universal.EnableTextChangedEvent = true;
        }

        private void btnSaveRainfallHydrograph_Click(object sender, EventArgs e)
        {
            SaveRainfallHydrographTable();
        }

        private void SaveRainfallHydrographTable()
        {
            string hydrographFileName = txtRainfallFileName.Text;
            try
            {
                if (hydrographFileName != "")
                {
                    TextWriter hydrographFile = new StreamWriter(hydrographFileName);
                    int nTimes = dataRainfallEvaporation.RowCount;
                    hydrographFile.WriteLine(nTimes.ToString());
                    for (int i = 0; i <= nTimes - 1; i++)
                    {
                        string line = dataRainfallEvaporation[0, i].Value.ToString() + "  " + dataRainfallEvaporation[1, i].Value.ToString() + "  " +
                                                    dataRainfallEvaporation[2, i].Value.ToString();
                        hydrographFile.WriteLine(line);
                    }
                    hydrographFile.Close();
                    RainfallHydrographTableChanged = false;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 2402151600: error writing ", "ERROR 2402151600: error escribiendo ") +
                    hydrographFileName + ". " + ex.Message,
                    "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void SaveOBCPSeriesTable()
        {
            try
            {
                string line;

                if (dataOBCPSeries.RowCount >= 2)
                {
                    UpdateControl(dataOBCPSeries);
                    TextWriter w = new StreamWriter(_currentProjectPath + "\\" + groupBoxOBCPSeries.Text);
                    try
                    {
                        w.WriteLine(dataOBCPSeries.Rows.Count);
                        string openBoundaryType = dataOBCP[1, dataOBCP.CurrentRow.Index].Value.ToString().Trim();
                        for (var i = 0; i < dataOBCPSeries.Rows.Count; ++i)
                        {
                            double d0;
                            double d1;
                            switch (openBoundaryType)
                            {

                                case "9":
                                case "12":
                                    d0 = Convert.ToDouble(dataOBCPSeries[1, i].Value);
                                    d1 = Convert.ToDouble(dataOBCPSeries[2, i].Value);
                                    w.WriteLine(d0 + "    " + d1);
                                    break;

                                case "1":
                                case "6":
                                    d0 = Convert.ToDouble(dataOBCPSeries[1, i].Value);
                                    d1 = Convert.ToDouble(dataOBCPSeries[2, i].Value);

                                    string concentrationValues = "";
                                    for (int j = 3; j < dataOBCPSeries.Columns.Count; j++)
                                    {
                                        if (dataOBCPSeries.Columns[j].Visible)
                                            concentrationValues = concentrationValues + "    " + dataOBCPSeries.Rows[i].Cells[j].Value;
                                    }
                                    line = d0 + "    " + d1 + concentrationValues;
                                    w.WriteLine(line);
                                    break;

                                case "5":
                                case "26":
                                    d0 = Convert.ToDouble(dataOBCPSeries[1, i].Value);
                                    d1 = Convert.ToDouble(dataOBCPSeries[2, i].Value);

                                    string solidDischargesValues = "";
                                    for (int j = 3; j < dataOBCPSeries.Columns.Count; j++)
                                    {
                                        if (dataOBCPSeries.Columns[j].Visible)
                                            solidDischargesValues = solidDischargesValues + "    " + dataOBCPSeries.Rows[i].Cells[j].Value;
                                    }
                                    line = d0 + "    " + d1 + solidDischargesValues;
                                    w.WriteLine(line);
                                    break;

                                case "10":
                                case "11":
                                    break;

                            }
                        }
                        OBCPSeriesTableChanged = false;
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(Universal.Idioma("ERROR 1502161237: error trying to save series file.\n", "ERROR 1502161237: error almacenando serie.\n") +
                            ex.Message, "RiverFlow2D",
                            MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    finally
                    {
                        w.Close();
                    }
                }
                else
                    MessageBox.Show(Universal.Idioma("ERROR 1508171730: (OBCP) There is no data to save.", "ERROR 1508171730: (OBCP) No hay datos para almacenar."),
                        "RiverFlow2D",
                        MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 0903161046: error trying to save series file.\n", "ERROR 0903161046: error almacenando serie.\n") +
                    ex.Message, "RiverFlow2D",
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

        }

        private void LoadOBCPSeriesTable(int rowIndex)
        {
            try //Read Series and update table of series:
            {
                bool unit = radioEnglish.Checked;

                string OBCPfile = dataOBCP[3, rowIndex].Value.ToString();

                _dataManager.loadOBCGroupSeries(rowIndex);
                UpdateControl(dataOBCPSeries);

                int nTrueValues = 0;
                for (int i = 1; i < dataOBCPSeries.Columns.Count; i++)
                {
                    if (dataOBCPSeries.Rows.Count > 1)
                        if (dataOBCPSeries.Rows[1].Cells[i].Value != null)
                            if ((string)dataOBCPSeries.Rows[1].Cells[i].Value != "")
                                nTrueValues++;
                    dataOBCPSeries.Columns[i].HeaderText = "";
                    dataOBCPSeries.Columns[i].Visible = false;

                }

                dataOBCP.Columns[0].HeaderText = Universal.Idioma("Group", "Grupo");
                dataOBCP.Columns[2].HeaderText = Universal.Idioma("BC Type", "BC Tipo");
                dataOBCP.Columns[3].HeaderText = Universal.Idioma("File", "Archivo");

                int nExtraColumns;
                string openBoundaryType = dataOBCP[1, rowIndex].Value.ToString();
                switch (openBoundaryType)
                {
                    case "1":
                        dataOBCPSeries.Visible = true;
                        btnOBCPPlot.Visible = true;
                        btnOBCPLoadSeries.Visible = true;
                        btnOBCPSaveSeries.Visible = true;
                        dataOBCPSeries.Columns[1].HeaderText = Universal.Idioma("Time (hrs)", "Tiempo (hrs)");
                        dataOBCPSeries.Columns[2].HeaderText = Universal.Idioma("Water Elev. (", "Cota de Agua (") + (unit ? "ft" : "m") + ")";
                        dataOBCPSeries.Columns[1].Visible = true;
                        dataOBCPSeries.Columns[2].Visible = true;

                        //==========================================================================================================================

                        for (int i = 3; i <= nTrueValues; i++)
                        {
                            dataOBCPSeries.Columns[i].HeaderText = "Conc. " + (i - 2); // + (unit ? " (ft3/s)" : " (m3/s)");
                            dataOBCPSeries.Columns[i].Visible = true;
                        }

                        // Number of extra columns for boundary conditions:
                        nExtraColumns = 0;
                        for (int i = 3; i < dataOBCPSeries.Columns.Count; i++)
                        {
                            if (dataOBCPSeries.Columns[i].HeaderText != "")
                                nExtraColumns++;
                        }

                        if (radioSedimentTransport.Checked)  //Sediment Transport Model Selected =>Pollutant Transport NOT selected
                        {
                            //Check that the number of concentrations is equal to the number of fractions in suspended sediment transport:
                            if (!loading)
                            {
                                if (chckSuspendedSediment.Checked)
                                //Number of extra concentrations must be equal to number of fractions en suspended sediment transport.
                                {
                                    int nFractions = dataSuspendedSediment.ColumnCount - 1;

                                    if (nFractions > nExtraColumns)
                                    {
                                        if (MessageBox.Show(
                                            "To avoid model errors, boundary condition of BCType 1 (Water Surface Elev. vs Time) in file '" + OBCPfile +
                                            "' must have " + nFractions +
                                            " concentrations, equal to the number of Suspended Sediment Transport fractions in the Sediment Transport module.\n\n" +
                                            "Would you like to add " + (nFractions - nExtraColumns) +
                                            " column(s) to the boundary conditions table?\n" +
                                            "(Changes will also be saved to file '" + OBCPfile + "' )"
                                          , "RiverFlow2D", MessageBoxButtons.YesNo, MessageBoxIcon.Information) ==
                                            DialogResult.Yes)
                                        {
                                            for (int i = 1; i <= nFractions - nExtraColumns; i++)
                                            {
                                                int suffix = nExtraColumns + i;
                                                bool ready = false;
                                                for (int j = 3; j < dataOBCPSeries.ColumnCount; j++)
                                                    if (!dataOBCPSeries.Columns[j].Visible)
                                                    {
                                                        dataOBCPSeries.Columns[j].HeaderText = "Conc. " + suffix; // + (unit ? " (ft3/s)" : " (m3/s)");
                                                        dataOBCPSeries.Columns[j].Name = "Conc. " + suffix; // +(unit ? " (ft3/s)" : " (m3/s)");
                                                        dataOBCPSeries.Columns[j].Visible = true;
                                                        for (int k = 1; k <= dataOBCPSeries.RowCount - 1; k++)
                                                            dataOBCPSeries[j, k].Value = "0.00";
                                                        ready = true;
                                                        break;
                                                    }
                                                if (!ready)
                                                {
                                                    dataOBCPSeries.Columns.Add("Conc." + suffix, "Conc. " + suffix);
                                                    dataOBCPSeries.Columns.Add("Conc." + suffix, "Conc. " + suffix);
                                                    dataOBCPSeries.Columns.Add("Conc." + suffix, "Conc. " + suffix);
                                                    dataOBCPSeries.Columns[dataOBCPSeries.ColumnCount - 1].Visible = true;
                                                    for (int j = 1; j < dataOBCPSeries.RowCount - 1; j++)
                                                        dataOBCPSeries[dataOBCPSeries.ColumnCount - 1, j].Value = "0.00";

                                                }
                                            }
                                            SaveOBCPSeriesTable();
                                        }

                                    }
                                    else if (nFractions < nExtraColumns)
                                    {
                                        if (MessageBox.Show(
                                            "To avoid model errors, boundary condition of BCType 1 (Water Surface Elev. vs Time) in file '" + OBCPfile +
                                            "' must have " + nFractions +
                                            " concentrations, equal to the number of Suspended Sediment Transport fractions in the Sediment Transport module.\n\n" +
                                            "Would you like to delete the last " + (nExtraColumns - nFractions) +
                                            " column(s) from the boundary condition table?\n" +
                                            "(Changes will also be saved to file '" + OBCPfile + "' )"
                                          , "RiverFlow2D", MessageBoxButtons.YesNo, MessageBoxIcon.Information) ==
                                            DialogResult.Yes)
                                        {
                                            int deleted = 0;
                                            for (int i = dataOBCPSeries.ColumnCount - 1; i >= 3; i--)
                                            {
                                                if (dataOBCPSeries.Columns[i].Visible)
                                                {
                                                    dataOBCPSeries.Columns[i].Visible = false;
                                                    deleted++;
                                                    if (deleted == nExtraColumns - nFractions)
                                                        break;
                                                }
                                            }
                                            SaveOBCPSeriesTable();
                                        }
                                    }
                                }
                                else if (chckBedLoadSediment.Checked) //and Suspended Sediment not checked
                                {
                                    //Bed load sediment transport checked and Suspended sediment transport not checked.

                                    int nFractions = dataBedLoadSediment.ColumnCount - 1;

                                    if (nExtraColumns > 0)
                                    {
                                        //There are more columns in Boundary Conditions table, other than Time and Discharge
                                        if (MessageBox.Show(
                                            "The Sediment Transport model is selected with bed load sediment.\n\n" +
                                            "To avoid model errors, boundary condition of BCType 1 (Water Surface Elev. vs Time)  in file '" + OBCPfile + "' must not have " + nExtraColumns +
                                            " extra concentrations, other than the Water Surface Elev. column.\n\n" +
                                            "Would you like to delete the last " + (nExtraColumns) +
                                            " column(s) from the boundary condition table?\n" +
                                            "(Changes will also be saved to file '" + OBCPfile + "' )"
                                            , "RiverFlow2D", MessageBoxButtons.YesNo, MessageBoxIcon.Information) ==
                                            DialogResult.Yes)
                                        {
                                            int deleted = 0;
                                            for (int i = dataOBCPSeries.ColumnCount - 1; i >= 3; i--)
                                            {
                                                if (dataOBCPSeries.Columns[i].Visible)
                                                {
                                                    dataOBCPSeries.Columns[i].Visible = false;
                                                    deleted++;
                                                    if (deleted == nExtraColumns)
                                                        break;
                                                }
                                            }
                                            SaveOBCPSeriesTable();
                                        }

                                    }

                                    if (nFractions == 0)
                                    {
                                        MessageBox.Show(Universal.Idioma("Warning: The Sediment Transport model with bed sediment must have at least one fraction",
                                                                         "ADVERTENCIA: El modelo de Transporte de Sedimentos debe tener al menos una fracción"),
                                            "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    }
                                }
                            }
                        }
                        else if (radioPollutantTransport.Checked) //Pollutant Transport Model Selected =>Sediment Transport NOT selected
                        {
                            //Check that the number of concentrations is equal to the number of fractions in Pollutant transport:
                            if (!loading)
                            {
                                int nSolutes = dataPollutantTransportPlusSolutes.RowCount;

                                if (nSolutes > nExtraColumns)
                                {
                                    if (MessageBox.Show(
                                          "To avoid model errors, boundary condition of BCType 1 (Water Surface Elev. vs Time) in file '" + OBCPfile +
                                          "' must have " + nSolutes +
                                          " concentrations, equal to the number of solutes in the Pollutant Transport module.\n\n" +
                                          "Would you like to add " + (nSolutes - nExtraColumns) +
                                          " column(s) to the boundary conditions table?\n" +
                                          "(Changes will also be saved to file '" + OBCPfile + "' )"
                                          , "RiverFlow2D", MessageBoxButtons.YesNo, MessageBoxIcon.Information) ==
                                          DialogResult.Yes)
                                    {
                                        for (int i = 1; i <= nSolutes - nExtraColumns; i++)
                                        {
                                            int suffix = nExtraColumns + i;
                                            bool ready = false;
                                            for (int col = 3; col < dataOBCPSeries.ColumnCount; col++)
                                                if (!dataOBCPSeries.Columns[col].Visible)
                                                {
                                                    dataOBCPSeries.Columns[col].HeaderText = "Conc. " + suffix;
                                                    // + (unit ? " (ft3/s)" : " (m3/s)");
                                                    dataOBCPSeries.Columns[col].Name = "Conc. " + suffix; // +(unit ? " (ft3/s)" : " (m3/s)");
                                                    dataOBCPSeries.Columns[col].Visible = true;
                                                    for (int row = 1; row <= dataOBCPSeries.RowCount - 1; row++)
                                                        dataOBCPSeries[col, row].Value = "0.00";
                                                    ready = true;
                                                    break;
                                                }
                                            if (!ready)
                                            {
                                                dataOBCPSeries.Columns.Add("Conc." + suffix, "Conc. " + suffix);
                                                dataOBCPSeries.Columns.Add("Conc." + suffix, "Conc. " + suffix);
                                                dataOBCPSeries.Columns.Add("Conc." + suffix, "Conc. " + suffix);
                                                dataOBCPSeries.Columns[dataOBCPSeries.ColumnCount - 1].Visible = true;
                                                for (int row = 1; row < dataOBCPSeries.RowCount - 1; row++)
                                                    dataOBCPSeries[dataOBCPSeries.ColumnCount - 1, row].Value = "0.00";
                                            }
                                        }
                                        SaveOBCPSeriesTable();
                                    }

                                }
                                else if (nSolutes < nExtraColumns)
                                {
                                    if (MessageBox.Show(
                                          "To avoid model errors, boundary condition of BCType 1 (Water Surface Elev. vs Time) in file '" + OBCPfile +
                                          "' must have " + nSolutes +
                                          " concentrations, equal to the number of solutes in the Pollutant Transport module.\n\n" +
                                          "Would you like to delete the last " + (nExtraColumns - nSolutes) +
                                          " column(s) from the boundary condition table?\n" +
                                          "(Changes will also be saved to file '" + OBCPfile + "' )"
                                          , "RiverFlow2D", MessageBoxButtons.YesNo, MessageBoxIcon.Information) ==
                                          DialogResult.Yes)
                                    {
                                        int deleted = 0;
                                        for (int i = dataOBCPSeries.ColumnCount - 1; i >= 3; i--)
                                        {
                                            if (dataOBCPSeries.Columns[i].Visible)
                                            {
                                                dataOBCPSeries.Columns[i].Visible = false;
                                                deleted++;
                                                if (deleted == nExtraColumns - nSolutes)
                                                    break;
                                            }
                                        }
                                        SaveOBCPSeriesTable();
                                    }
                                }
                            }
                        }


                        //=========================================================================================================================
                        break;

                    case "5":
                        dataOBCPSeries.Visible = true;
                        btnOBCPPlot.Visible = true;
                        btnOBCPLoadSeries.Visible = true;
                        btnOBCPSaveSeries.Visible = true;
                        dataOBCPSeries.Columns[1].HeaderText = Universal.Idioma("Time (hrs)", "Tiempo (hrs)"); ;
                        dataOBCPSeries.Columns[2].HeaderText = Universal.Idioma("Discharge (", "Caudal (") + (unit ? "ft3/s" : "m3/s") + ")";
                        dataOBCPSeries.Columns[3].HeaderText = Universal.Idioma("Water Elev. (", "Cota de Agua (") + (unit ? "ft" : "m") + ")";
                        dataOBCPSeries.Columns[1].Visible = true;
                        dataOBCPSeries.Columns[2].Visible = true;
                        dataOBCPSeries.Columns[3].Visible = true;
                        break;

                    case "6":
                        dataOBCPSeries.Visible = true;
                        btnOBCPPlot.Visible = true;
                        btnOBCPLoadSeries.Visible = true;
                        btnOBCPSaveSeries.Visible = true;
                        dataOBCPSeries.Columns[1].HeaderText = Universal.Idioma("Time (hrs)", "Tiempo (hrs)"); ;
                        dataOBCPSeries.Columns[2].HeaderText = Universal.Idioma("Discharge (", "Caudal (") + (unit ? "ft3/s" : "m3/s") + ")";
                        dataOBCPSeries.Columns[1].Visible = true;
                        dataOBCPSeries.Columns[2].Visible = true;
                        //&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
                        for (int i = 3; i <= nTrueValues; i++)
                        {
                            dataOBCPSeries.Columns[i].HeaderText = "Conc. " + (i - 2); // + (unit ? " (ft3/s)" : " (m3/s)");
                            dataOBCPSeries.Columns[i].Visible = true;
                        }

                        // Number of extra columns for boundary conditions:
                        nExtraColumns = 0;
                        for (int i = 3; i < dataOBCPSeries.Columns.Count; i++)
                        {
                            if (dataOBCPSeries.Columns[i].HeaderText != "")
                                nExtraColumns++;
                        }

                        if (radioSedimentTransport.Checked)  //Sediment Transport Model Selected =>Pollutant Transport NOT selected
                        {
                            //Check that the number of concentrations is equal to the number of fractions in suspended sediment transport:
                            if (!loading)
                            {
                                if (chckSuspendedSediment.Checked)
                                //Number of extra concentrations must be equal to number of fractions en suspended sediment transport.
                                {
                                    int nFractions = dataSuspendedSediment.ColumnCount - 1;

                                    if (nFractions > nExtraColumns)
                                    {
                                        if (MessageBox.Show(
                                            "To avoid model errors, boundary condition of BCType 6 (Discharge vs Time) in file '" + OBCPfile +
                                            "' must have " + nFractions +
                                            " concentrations, equal to the number of Suspended Sediment Transport fractions in the Sediment Transport module.\n\n" +
                                            "Would you like to add " + (nFractions - nExtraColumns) +
                                            " column(s) to the boundary conditions table?\n" +
                                            "(Changes will also be saved to file '" + OBCPfile + "' )"
                                          , "RiverFlow2D", MessageBoxButtons.YesNo, MessageBoxIcon.Information) ==
                                            DialogResult.Yes)
                                        {
                                            for (int i = 1; i <= nFractions - nExtraColumns; i++)
                                            {
                                                int suffix = nExtraColumns + i;
                                                bool ready = false;
                                                for (int j = 3; j < dataOBCPSeries.ColumnCount; j++)
                                                    if (!dataOBCPSeries.Columns[j].Visible)
                                                    {
                                                        dataOBCPSeries.Columns[j].HeaderText = "Conc. " + suffix; // + (unit ? " (ft3/s)" : " (m3/s)");
                                                        dataOBCPSeries.Columns[j].Name = "Conc. " + suffix; // +(unit ? " (ft3/s)" : " (m3/s)");
                                                        dataOBCPSeries.Columns[j].Visible = true;
                                                        for (int k = 1; k <= dataOBCPSeries.RowCount - 1; k++)
                                                            dataOBCPSeries[j, k].Value = "0.00";
                                                        ready = true;
                                                        break;
                                                    }
                                                if (!ready)
                                                {
                                                    dataOBCPSeries.Columns.Add("Conc." + suffix, "Conc. " + suffix);
                                                    dataOBCPSeries.Columns.Add("Conc." + suffix, "Conc. " + suffix);
                                                    dataOBCPSeries.Columns.Add("Conc." + suffix, "Conc. " + suffix);
                                                    dataOBCPSeries.Columns[dataOBCPSeries.ColumnCount - 1].Visible = true;
                                                    for (int j = 1; j < dataOBCPSeries.RowCount - 1; j++)
                                                        dataOBCPSeries[dataOBCPSeries.ColumnCount - 1, j].Value = "0.00";

                                                }
                                            }
                                            SaveOBCPSeriesTable();
                                        }

                                    }
                                    else if (nFractions < nExtraColumns)
                                    {
                                        if (MessageBox.Show(
                                            "To avoid model errors, boundary condition of BCType 6 (Discharge vs Time) in file '" + OBCPfile +
                                            "' must have " + nFractions +
                                            " concentrations, equal to the number of Suspended Sediment Transport fractions in the Sediment Transport module.\n\n" +
                                            "Would you like to delete the last " + (nExtraColumns - nFractions) +
                                            " column(s) from the boundary condition table?\n" +
                                            "(Changes will also be saved to file '" + OBCPfile + "' )"
                                          , "RiverFlow2D", MessageBoxButtons.YesNo, MessageBoxIcon.Information) ==
                                            DialogResult.Yes)
                                        {
                                            int deleted = 0;
                                            for (int i = dataOBCPSeries.ColumnCount - 1; i >= 3; i--)
                                            {
                                                if (dataOBCPSeries.Columns[i].Visible)
                                                {
                                                    dataOBCPSeries.Columns[i].Visible = false;
                                                    deleted++;
                                                    if (deleted == nExtraColumns - nFractions)
                                                        break;
                                                }
                                            }
                                            SaveOBCPSeriesTable();
                                        }
                                    }
                                }
                                else if (chckBedLoadSediment.Checked) //and Suspended Sediment not checked
                                {
                                    //Bed load sediment transport checked and Suspended sediment transport not checked.

                                    int nFractions = dataBedLoadSediment.ColumnCount - 1;

                                    if (nExtraColumns > 0)
                                    {
                                        //There are more columns in Boundary Conditions table, other than Time and Discharge
                                        if (MessageBox.Show(
                                            "The Sediment Transport model is selected with bed load sediment.\n\n" +
                                            "To avoid model errors, boundary condition of BCType 6 (Discharge vs Time)  in file '" + OBCPfile + "' must not have " + nExtraColumns +
                                            " extra concentrations, other than the Discharge column.\n\n" +
                                            "Would you like to delete the last " + (nExtraColumns) +
                                            " column(s) from the boundary condition table?\n" +
                                            "(Changes will also be saved to file '" + OBCPfile + "' )"
                                            , "RiverFlow2D", MessageBoxButtons.YesNo, MessageBoxIcon.Information) ==
                                            DialogResult.Yes)
                                        {
                                            int deleted = 0;
                                            for (int i = dataOBCPSeries.ColumnCount - 1; i >= 3; i--)
                                            {
                                                if (dataOBCPSeries.Columns[i].Visible)
                                                {
                                                    dataOBCPSeries.Columns[i].Visible = false;
                                                    deleted++;
                                                    if (deleted == nExtraColumns)
                                                        break;
                                                }
                                            }
                                            SaveOBCPSeriesTable();
                                        }

                                    }

                                    if (nFractions == 0)
                                    {
                                        MessageBox.Show(Universal.Idioma("Warning: The Sediment Transport model with bed sediment must have at least one fraction",
                                                                        "ADVERTENCIA: El modelo de Transporte de Sedimentos debe tener al menos una fracción"),
                                            "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    }
                                }
                            }
                        }
                        else if (radioPollutantTransport.Checked) //Pollutant Transport Model Selected =>Sediment Transport NOT selected
                        {
                            //Check that the number of concentrations is equal to the number of fractions in Pollutant transport:
                            if (!loading)
                            {
                                int nSolutes = dataPollutantTransportPlusSolutes.RowCount;

                                if (nSolutes > nExtraColumns)
                                {
                                    if (MessageBox.Show(
                                          "To avoid model errors, boundary condition of BCType 6 (Discharge vs Time) in file '" + OBCPfile +
                                          "' must have " + nSolutes +
                                          " concentrations, equal to the number of solutes in the Pollutant Transport module.\n\n" +
                                          "Would you like to add " + (nSolutes - nExtraColumns) +
                                          " column(s) to the boundary conditions table?\n" +
                                          "(Changes will also be saved to file '" + OBCPfile + "' )"
                                          , "RiverFlow2D", MessageBoxButtons.YesNo, MessageBoxIcon.Information) ==
                                          DialogResult.Yes)
                                    {
                                        for (int i = 1; i <= nSolutes - nExtraColumns; i++)
                                        {
                                            int suffix = nExtraColumns + i;
                                            bool ready = false;
                                            for (int j = 3; j < dataOBCPSeries.ColumnCount; j++)
                                                if (!dataOBCPSeries.Columns[j].Visible)
                                                {
                                                    dataOBCPSeries.Columns[j].HeaderText = "Conc. " + suffix;
                                                    // + (unit ? " (ft3/s)" : " (m3/s)");
                                                    dataOBCPSeries.Columns[j].Name = "Conc. " + suffix; // +(unit ? " (ft3/s)" : " (m3/s)");
                                                    dataOBCPSeries.Columns[j].Visible = true;
                                                    for (int k = 1; k <= dataOBCPSeries.RowCount - 1; k++)
                                                        dataOBCPSeries[j, k].Value = "0.00";
                                                    ready = true;
                                                    break;
                                                }
                                            if (!ready)
                                            {
                                                dataOBCPSeries.Columns.Add("Conc." + suffix, "Conc. " + suffix);
                                                dataOBCPSeries.Columns.Add("Conc." + suffix, "Conc. " + suffix);
                                                dataOBCPSeries.Columns.Add("Conc." + suffix, "Conc. " + suffix);
                                                dataOBCPSeries.Columns[dataOBCPSeries.ColumnCount - 1].Visible = true;
                                                for (int j = 1; j < dataOBCPSeries.RowCount - 1; j++)
                                                    dataOBCPSeries[dataOBCPSeries.ColumnCount - 1, j].Value = "0.00";
                                            }
                                        }
                                        SaveOBCPSeriesTable();
                                    }

                                }
                                else if (nSolutes < nExtraColumns)
                                {
                                    if (MessageBox.Show(
                                          "To avoid model errors, boundary condition of BCType 6 (Discharge vs Time) in file '" + OBCPfile +
                                          "' must have " + nSolutes +
                                          " concentrations, equal to the number of solutes in the Pollutant Transport module.\n\n" +
                                          "Would you like to delete the last " + (nExtraColumns - nSolutes) +
                                          " column(s) from the boundary condition table?\n" +
                                          "(Changes will also be saved to file '" + OBCPfile + "' )"
                                          , "RiverFlow2D", MessageBoxButtons.YesNo, MessageBoxIcon.Information) ==
                                          DialogResult.Yes)
                                    {
                                        int deleted = 0;
                                        for (int i = dataOBCPSeries.ColumnCount - 1; i >= 3; i--)
                                        {
                                            if (dataOBCPSeries.Columns[i].Visible)
                                            {
                                                dataOBCPSeries.Columns[i].Visible = false;
                                                deleted++;
                                                if (deleted == nExtraColumns - nSolutes)
                                                    break;
                                            }
                                        }
                                        SaveOBCPSeriesTable();
                                    }
                                }
                            }
                        }
                        //&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
                        break;

                    case "9":
                        dataOBCPSeries.Visible = true;
                        btnOBCPPlot.Visible = true;
                        btnOBCPLoadSeries.Visible = true;
                        btnOBCPSaveSeries.Visible = true;
                        dataOBCPSeries.Columns[1].HeaderText = Universal.Idioma("Water Elev. (", "Cota de Agua (") + (unit ? "ft" : "m") + ")";
                        dataOBCPSeries.Columns[2].HeaderText = Universal.Idioma("Discharge (", "Caudal (") + (unit ? "ft3/s" : "m3/s") + ")";
                        dataOBCPSeries.Columns[1].Visible = true;
                        dataOBCPSeries.Columns[2].Visible = true;
                        break;

                    case "10":
                        dataOBCPSeries.Visible = false;
                        btnOBCPPlot.Visible = false;
                        btnOBCPLoadSeries.Visible = false;
                        btnOBCPSaveSeries.Visible = false;
                        break;

                    case "11":
                        dataOBCPSeries.Visible = false;
                        btnOBCPPlot.Visible = false;
                        btnOBCPLoadSeries.Visible = false;
                        btnOBCPSaveSeries.Visible = false;
                        break;

                    case "12":
                        dataOBCPSeries.Visible = true;
                        btnOBCPPlot.Visible = true;
                        btnOBCPLoadSeries.Visible = true;
                        btnOBCPSaveSeries.Visible = true;
                        dataOBCPSeries.Columns[1].HeaderText = Universal.Idioma("Water Elev. (", "Cota de Agua (") + (unit ? "ft" : "m") + ")";
                        dataOBCPSeries.Columns[2].HeaderText = Universal.Idioma("Discharge (", "Caudal (") + (unit ? "ft3/s" : "m3/s") + ")";
                        dataOBCPSeries.Columns[1].Visible = true;
                        dataOBCPSeries.Columns[2].Visible = true;
                        break;

                    case "26":
                        dataOBCPSeries.Visible = true;
                        btnOBCPPlot.Visible = true;
                        btnOBCPLoadSeries.Visible = true;
                        btnOBCPSaveSeries.Visible = true;
                        dataOBCPSeries.Columns[1].HeaderText = Universal.Idioma("Time (hrs)", "Tiempo (hrs)"); ;
                        dataOBCPSeries.Columns[2].HeaderText = Universal.Idioma("Water Dis. (", "Caudal (") + (unit ? "ft3/s" : "m3/s") + ")";
                        //dataOBCPSeries.Columns[3].HeaderText = "Sed. Dis. (" + (unit ? "ft3/s" : "m3/s") + ")";
                        dataOBCPSeries.Columns[1].Visible = true;
                        dataOBCPSeries.Columns[2].Visible = true;
                        //dataOBCPSeries.Columns[3].Visible = true;

                        for (int i = 3; i <= nTrueValues; i++)
                        {
                            dataOBCPSeries.Columns[i].HeaderText = "Solid Dis. " + (i - 2) + (unit ? " (ft3/s)" : " (m3/s)");
                            dataOBCPSeries.Columns[i].Visible = true;
                        }

                        int nSolidDischarges = 0;
                        for (int i = 3; i < dataOBCPSeries.Columns.Count; i++)
                            if (dataOBCPSeries.Columns[i].HeaderText != "")
                                nSolidDischarges++;

                        if (radioSedimentTransport.Checked)
                        {
                            //Check that the number of solid discharges is equal to the number of fractions en bed load sediment transport:
                            if (!loading)
                            {
                                int nFractions = dataBedLoadSediment.ColumnCount - 1;

                                if (chckBedLoadSediment.Checked)
                                //Number of solid discharges must be equal to number of fractions en bed load sediment transport.
                                {
                                    if (nFractions > nSolidDischarges)
                                    {
                                        if (MessageBox.Show(
                                            "To avoid model errors, boundary condition of BCType 26 (Water and Sediment Discharge vs Time in file '" + OBCPfile + "')" +
                                            "' must have " + nFractions + " solid discharges, " +
                                            "equal to the number of Bed Load Sediment Transport fractions in the Sediment Transport module.\n\n" +
                                            "Would you like to add " + (nFractions - nSolidDischarges) +
                                            " column(s) to the boundary condition table?\n" +
                                            "(Changes will also be saved to file '" + OBCPfile + "' )"
                                            , "RiverFlow2D", MessageBoxButtons.YesNo, MessageBoxIcon.Information) ==
                                            DialogResult.Yes)
                                        {
                                            for (int i = 1; i <= nFractions - nSolidDischarges; i++)
                                            {
                                                int suffix = nSolidDischarges + i;
                                                bool ready = false;
                                                for (int j = 3; j < dataOBCPSeries.ColumnCount; j++)
                                                    if (!dataOBCPSeries.Columns[j].Visible)
                                                    {
                                                        dataOBCPSeries.Columns[j].HeaderText = "Solid Dis. " + suffix +
                                                                                                (unit ? " (ft3/s)" : " (m3/s)");
                                                        dataOBCPSeries.Columns[j].Name = "Solid Dis. " + suffix +
                                                                                          (unit ? " (ft3/s)" : " (m3/s)");
                                                        dataOBCPSeries.Columns[j].Visible = true;
                                                        for (int k = 1; k <= dataOBCPSeries.RowCount - 1; k++)
                                                            dataOBCPSeries[j, k].Value = "0.00";
                                                        ready = true;
                                                        break;
                                                    }
                                                if (!ready)
                                                {
                                                    dataOBCPSeries.Columns.Add("Solid Dis." + suffix,
                                                        "Solid  Dis. " + suffix + (unit ? " (ft3/s)" : " (m3/s)"));
                                                    dataOBCPSeries.Columns[dataOBCPSeries.ColumnCount - 1].Visible = true;
                                                    for (int j = 1; j < dataOBCPSeries.RowCount - 1; j++)
                                                        dataOBCPSeries[dataOBCPSeries.ColumnCount - 1, j].Value = "0.00";
                                                }
                                            }
                                            SaveOBCPSeriesTable();
                                        }

                                    }
                                    else if (nFractions < nSolidDischarges)
                                    {
                                        if (MessageBox.Show(
                                            "To avoid model errors, boundary condition of BCType 26 (Water and Sediment Discharge vs Time in file '" + OBCPfile + "')" +
                                            "' must have " + nFractions + " solid discharges, " +
                                            "equal to the number of Bed Load Sediment Transport fractions in the Sediment Transport module.\n\n" +
                                            "Would you like to delete the last " + (nSolidDischarges - nFractions) +
                                            " column(s) from the boundary condition table?\n" +
                                            "(Changes will also be saved to file '" + OBCPfile + "' )"
                                            , "RiverFlow2D", MessageBoxButtons.YesNo, MessageBoxIcon.Information) ==
                                            DialogResult.Yes)
                                        {
                                            int deleted = 0;
                                            for (int i = dataOBCPSeries.ColumnCount - 1; i >= 3; i--)
                                            {
                                                if (dataOBCPSeries.Columns[i].Visible)
                                                {
                                                    dataOBCPSeries.Columns[i].Visible = false;
                                                    deleted++;
                                                    if (deleted == nSolidDischarges - nFractions)
                                                        break;
                                                }
                                            }
                                            SaveOBCPSeriesTable();
                                        }

                                    }
                                }
                                else if (chckSuspendedSediment.Checked)
                                    MessageBox.Show(Universal.Idioma("Boundary conditions of BCType 26 are not valid for the Sediment Transport model with suspended sediment.", "Condiciones de contorno de tipo BCtype 26 no son válidas para el modelo de transporte de sedimentos con sedimentos en suspención."),
                                        "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                            }
                        }
                        break;
                }

                UpdateControl(dataOBCPSeries);

            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 0803160739: ", "") +
                    ex.Message, "RiverFlow2D",
                    MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            }


        }


        private int NewSourcesColumns(int rowIndex, int nExtraColumnsInSourcesSeries)
        {
            try //Read Series and update table of series:
            {

                string SOURCESFile = dataSourcesAndSinks[2, rowIndex].Value.ToString();

                if (radioSedimentTransport.Checked)  //Sediment Transport Model Selected =>Pollutant Transport NOT selected
                {
                    //Check that the number of concentrations is equal to the number of fractions in suspended sediment transport:
                    if (!loading)
                    {
                        if (chckSuspendedSediment.Checked)
                        //Number of extra concentrations must be equal to number of fractions en suspended sediment transport.
                        {
                            int nFractions = dataSuspendedSediment.ColumnCount - 1;

                            if (nFractions > nExtraColumnsInSourcesSeries)
                            {
                                if (MessageBox.Show(
                                    "To avoid model errors, file '" + SOURCESFile +
                                    "' must have " + nFractions +
                                    " concentrations, equal to the number of Suspended Sediment Transport fractions in the Sediment Transport module.\n\n" +
                                    "Would you like to add " + (nFractions - nExtraColumnsInSourcesSeries) +
                                    " column(s) to the table?\n" +
                                    "(Changes will also be saved to file '" + SOURCESFile + "' )"
                                    , "RiverFlow2D", MessageBoxButtons.YesNo, MessageBoxIcon.Information) ==
                                    DialogResult.Yes)
                                {
                                    for (int newCol = 1; newCol <= nFractions - nExtraColumnsInSourcesSeries; newCol++)
                                    {
                                    }

                                    return nFractions - nExtraColumnsInSourcesSeries;
                                }
                            }
                            else if (nFractions < nExtraColumnsInSourcesSeries)
                            {
                                if (MessageBox.Show(
                                    "To avoid model errors, file '" + SOURCESFile +
                                    "' must have " + nFractions +
                                    " concentrations, equal to the number of Suspended Sediment Transport fractions in the Sediment Transport module.\n\n" +
                                    "Would you like to delete the last " + (nExtraColumnsInSourcesSeries - nFractions) +
                                    " column(s) from the table?\n" +
                                    "(Changes will also be saved to file '" + SOURCESFile + "' )"
                                    , "RiverFlow2D", MessageBoxButtons.YesNo, MessageBoxIcon.Information) ==
                                    DialogResult.Yes)
                                {
                                    return nFractions - nExtraColumnsInSourcesSeries;
                                }
                            }
                        }
                        else if (chckBedLoadSediment.Checked) //and Suspended Sediment not checked
                        {
                            //Bed load sediment transport checked and Suspended sediment transport not checked.

                            int nFractions = dataBedLoadSediment.ColumnCount - 1;

                            if (nExtraColumnsInSourcesSeries > 0)
                            {
                                //There are more columns in sources table, other than Time and Discharge
                                if (MessageBox.Show(
                                    "The Sediment Transport model is selected with bed load sediment.\n\n" +
                                    "To avoid model errors, file '" + SOURCESFile + "' must not have " + nExtraColumnsInSourcesSeries +
                                    " extra concentrations, other than the Discharge column.\n\n" +
                                    "Would you like to delete the last " + (nExtraColumnsInSourcesSeries) +
                                    " column(s) from the table?\n" +
                                    "(Changes will also be saved to file '" + SOURCESFile + "' )"
                                    , "RiverFlow2D", MessageBoxButtons.YesNo, MessageBoxIcon.Information) ==
                                    DialogResult.Yes)
                                {
                                    return -nExtraColumnsInSourcesSeries;
                                }
                            }

                            if (nFractions == 0)
                            {
                                MessageBox.Show(Universal.Idioma("Warning: The Sediment Transport model with bed sediment must have at least one fraction",
                                                                       "ADVERTENCIA: El modelo de Transporte de Sedimentos debe tener al menos una fracción"),
                                    "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }
                        }
                    }
                }
                else if (radioPollutantTransport.Checked) //Pollutant Transport Model Selected =>Sediment Transport NOT selected
                {
                    //Check that the number of concentrations is equal to the number of fractions in Pollutant transport:
                    if (!loading)
                    {
                        int nSolutes = dataPollutantTransportPlusSolutes.RowCount;

                        if (nSolutes > nExtraColumnsInSourcesSeries)
                        {
                            if (MessageBox.Show(
                                    "To avoid model errors, file '" + SOURCESFile +
                                    "' must have " + nSolutes +
                                    " concentrations, equal to the number of solutes in the Pollutant Transport module.\n\n" +
                                    "Would you like to add " + (nSolutes - nExtraColumnsInSourcesSeries) +
                                    " column(s) to the table?\n" +
                                    "(Changes will also be saved to file '" + SOURCESFile + "' )"
                                    , "RiverFlow2D", MessageBoxButtons.YesNo, MessageBoxIcon.Information) ==
                                    DialogResult.Yes)
                            {
                                return nSolutes - nExtraColumnsInSourcesSeries;
                            }
                            else return 0;

                        }
                        else if (nSolutes < nExtraColumnsInSourcesSeries)
                        {
                            if (MessageBox.Show(
                                    "To avoid model errors, file '" + SOURCESFile +
                                    "' must have " + nSolutes +
                                    " concentrations, equal to the number of solutes in the Pollutant Transport module.\n\n" +
                                    "Would you like to delete the last " + (nExtraColumnsInSourcesSeries - nSolutes) +
                                    " column(s) from the boundary condition table?\n" +
                                    "(Changes will also be saved to file '" + SOURCESFile + "' )"
                                    , "RiverFlow2D", MessageBoxButtons.YesNo, MessageBoxIcon.Information) ==
                                    DialogResult.Yes)
                            {
                                return nExtraColumnsInSourcesSeries - nSolutes;
                            }
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 0803160741: ", "") +
                    ex.Message, "RiverFlow2D",
                    MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            }

            return 0;

        }

        private int IsSOURCESSecondaryTableComplete(int rowIndex)
        {
            try //Read Series and update table of series:
            {

                string SOURCESFile = dataSourcesAndSinks[2, rowIndex].Value.ToString();

                // Number of extra columns that already exist in SOURCES secondary series:
                int nExtraColumnsInSourcesSeries = 0;
                for (int col = 2; col < dataSOURCESSeries.Columns.Count; col++)
                {
                    if (dataSOURCESSeries.Columns[col].HeaderText != "")
                        nExtraColumnsInSourcesSeries++;
                }

                if (radioSedimentTransport.Checked)  //Sediment Transport Model Selected =>Pollutant Transport NOT selected
                {
                    //Check that the number of concentrations is equal to the number of fractions in suspended sediment transport:
                    if (!loading)
                    {
                        if (chckSuspendedSediment.Checked)
                        //Number of extra concentrations must be equal to number of fractions en suspended sediment transport.
                        {
                            int nFractions = dataSuspendedSediment.ColumnCount - 1;

                            if (nFractions > nExtraColumnsInSourcesSeries)
                            {
                                if (MessageBox.Show(
                                    "To avoid model errors, file '" + SOURCESFile +
                                    "' must have " + nFractions +
                                    " concentrations, equal to the number of Suspended Sediment Transport fractions in the Sediment Transport module.\n\n" +
                                    "Would you like to add " + (nFractions - nExtraColumnsInSourcesSeries) +
                                    " column(s) to the table?\n" +
                                    "(Changes will also be saved to file '" + SOURCESFile + "' )"
                                    , "RiverFlow2D", MessageBoxButtons.YesNo, MessageBoxIcon.Information) ==
                                    DialogResult.Yes)
                                {
                                    for (int newCol = 1; newCol <= nFractions - nExtraColumnsInSourcesSeries; newCol++)
                                    {
                                        int suffix = nExtraColumnsInSourcesSeries + newCol;
                                        //bool ready = false;
                                        //Find next non-visible column:
                                        for (int col = 2; col < dataSOURCESSeries.ColumnCount; col++)
                                            if (!dataSOURCESSeries.Columns[col].Visible)
                                            {
                                                dataSOURCESSeries.Columns[col].HeaderText = "Conc. " + suffix; // + (unit ? " (ft3/s)" : " (m3/s)");
                                                dataSOURCESSeries.Columns[col].Name = "Conc. " + suffix; // +(unit ? " (ft3/s)" : " (m3/s)");
                                                dataSOURCESSeries.Columns[col].Visible = true;
                                                for (int row = 1; row < dataSOURCESSeries.RowCount; row++)
                                                    dataSOURCESSeries[col, row].Value = "0.00";
                                                //ready = true;
                                                break;
                                            }
                                    }

                                    return nFractions - nExtraColumnsInSourcesSeries;
                                }
                            }
                            else if (nFractions < nExtraColumnsInSourcesSeries)
                            {
                                if (MessageBox.Show(
                                    "To avoid model errors, file '" + SOURCESFile +
                                    "' must have " + nFractions +
                                    " concentrations, equal to the number of Suspended Sediment Transport fractions in the Sediment Transport module.\n\n" +
                                    "Would you like to delete the last " + (nExtraColumnsInSourcesSeries - nFractions) +
                                    " column(s) from the table?\n" +
                                    "(Changes will also be saved to file '" + SOURCESFile + "' )"
                                    , "RiverFlow2D", MessageBoxButtons.YesNo, MessageBoxIcon.Information) ==
                                    DialogResult.Yes)
                                {
                                    return nExtraColumnsInSourcesSeries - nFractions;
                                }
                            }
                        }
                        else if (chckBedLoadSediment.Checked) //and Suspended Sediment not checked
                        {
                            //Bed load sediment transport checked and Suspended sediment transport not checked.

                            int nFractions = dataBedLoadSediment.ColumnCount - 1;

                            if (nExtraColumnsInSourcesSeries > 0)
                            {
                                //There are more columns in sources table, other than Time and Discharge
                                if (MessageBox.Show(
                                    "The Sediment Transport model is selected with bed load sediment.\n\n" +
                                    "To avoid model errors, file '" + SOURCESFile + "' must not have " + nExtraColumnsInSourcesSeries +
                                    " extra concentrations, other than the Discharge column.\n\n" +
                                    "Would you like to delete the last " + (nExtraColumnsInSourcesSeries) +
                                    " column(s) from the table?\n" +
                                    "(Changes will also be saved to file '" + SOURCESFile + "' )"
                                    , "RiverFlow2D", MessageBoxButtons.YesNo, MessageBoxIcon.Information) ==
                                    DialogResult.Yes)
                                {
                                    return -nExtraColumnsInSourcesSeries;
                                }
                            }

                            if (nFractions == 0)
                            {
                                MessageBox.Show(Universal.Idioma("Warning: The Sediment Transport model with bed sediment must have at least one fraction",
                                                                       "ADVERTENCIA: El modelo de Transporte de Sedimentos debe tener al menos una fracción"),
                                    "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }
                        }
                    }
                }
                else if (radioPollutantTransport.Checked) //Pollutant Transport Model Selected =>Sediment Transport NOT selected
                {
                    //Check that the number of concentrations is equal to the number of fractions in Pollutant transport:
                    if (!loading)
                    {
                        int nSolutes = dataPollutantTransportPlusSolutes.RowCount;

                        if (nSolutes > nExtraColumnsInSourcesSeries)
                        {
                            if (MessageBox.Show(
                                    "To avoid model errors, file '" + SOURCESFile +
                                    "' must have " + nSolutes +
                                    " concentrations, equal to the number of solutes in the Pollutant Transport module.\n\n" +
                                    "Would you like to add " + (nSolutes - nExtraColumnsInSourcesSeries) +
                                    " column(s) to the table?\n" +
                                    "(Changes will also be saved to file '" + SOURCESFile + "' )"
                                    , "RiverFlow2D", MessageBoxButtons.YesNo, MessageBoxIcon.Information) ==
                                    DialogResult.Yes)
                            {
                                return nSolutes - nExtraColumnsInSourcesSeries;
                            }
                            else return 0;

                        }
                        else if (nSolutes < nExtraColumnsInSourcesSeries)
                        {
                            if (MessageBox.Show(
                                    "To avoid model errors, file '" + SOURCESFile +
                                    "' must have " + nSolutes +
                                    " concentrations, equal to the number of solutes in the Pollutant Transport module.\n\n" +
                                    "Would you like to delete the last " + (nExtraColumnsInSourcesSeries - nSolutes) +
                                    " column(s) from the boundary condition table?\n" +
                                    "(Changes will also be saved to file '" + SOURCESFile + "' )"
                                    , "RiverFlow2D", MessageBoxButtons.YesNo, MessageBoxIcon.Information) ==
                                    DialogResult.Yes)
                            {
                                return nExtraColumnsInSourcesSeries - nSolutes;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 0803160741: ", "") +
                    ex.Message, "RiverFlow2D",
                    MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            }

            return 0;

        }

        private void SaveSOURCESSeriesTable(string seriesFileName)
        {
            try
            {
                string line;

                if (dataSOURCESSeries.RowCount >= 2)
                {
                    UpdateControl(dataSOURCESSeries);

                    //string fileName = dataSourcesAndSinks[1, dataSourcesAndSinks.CurrentCell.RowIndex].Value.ToString();
                    TextWriter w = new StreamWriter(_currentProjectPath + "\\" + seriesFileName);
                    try
                    {
                        w.WriteLine(dataSOURCESSeries.Rows.Count);
                        for (var i = 0; i < dataSOURCESSeries.Rows.Count; ++i)
                        {
                            double d0;
                            double d1;

                            d0 = Convert.ToDouble(dataSOURCESSeries[1, i].Value);
                            d1 = Convert.ToDouble(dataSOURCESSeries[2, i].Value);

                            string concentrationValues = "";
                            for (int j = 3; j < dataSOURCESSeries.Columns.Count; j++)
                            {
                                if (dataSOURCESSeries.Columns[j].Visible)
                                    concentrationValues = concentrationValues + "    " + dataSOURCESSeries.Rows[i].Cells[j].Value;
                            }
                            line = d0 + "    " + d1 + concentrationValues;
                            w.WriteLine(line);
                        }
                        SOURCESSeriesTableChanged = false;
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(Universal.Idioma("ERROR 2907171015: error trying to save series file.\n", "ERROR 2907171015: error almacenando serie.\n") +
                            ex.Message, "RiverFlow2D",
                            MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    finally
                    {
                        w.Close();
                    }
                }
                else
                    MessageBox.Show(Universal.Idioma("ERROR 1508171731: (SOURCES) There is no data to save.", "ERROR 1508171731: (SOURCES) No hata datos para almacenar."),
                        "RiverFlow2D",
                        MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 0903161046: error trying to save series file.\n", "ERROR 0903161046: error almacenando serie.\n") +
                    ex.Message, "RiverFlow2D",
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

        }

        private void SaveWindPlusVelocitiesTable()
        {
            string velocitiesFileName = txtWindPlusVelocitiesFile.Text;
            TextWriter velocitiesFile = new StreamWriter(velocitiesFileName); ;
            try
            {
                if (velocitiesFileName != "")
                {
                    int nTimes = dataWindPlusVelocities.RowCount;
                    velocitiesFile.WriteLine(nTimes.ToString());
                    for (int i = 0; i <= nTimes - 1; i++)
                    {
                        string line = dataWindPlusVelocities[0, i].Value.ToString() + "  " + dataWindPlusVelocities[1, i].Value.ToString() + "  " +
                                                    dataWindPlusVelocities[2, i].Value.ToString();
                        velocitiesFile.WriteLine(line);
                    }
                    velocitiesFile.Close();
                    WindPlusVelocitiesTableChanged = false;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 1103151116: error writing ", "ERROR 1103151116: error escribiendo ") +
                    velocitiesFileName +
                    ". " + ex.Message,
                    "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                velocitiesFile.Close();
            }
        }


        private void SaveOBCPFileTable()
        {
        }

        private void txtDecayRate_TextChanged(object sender, EventArgs e)
        {
            InfiltrationTextChanged("Decay Rate");
        }

        private void txtFinalRate_TextChanged(object sender, EventArgs e)
        {
            InfiltrationTextChanged("Final Rate");
        }

        private void txtInitialRate_TextChanged(object sender, EventArgs e)
        {
            InfiltrationTextChanged("Initial Rate");
        }

        private void dataInfiltration_RowValidating(object sender, DataGridViewCellCancelEventArgs e)
        {
        }

        private void InfiltrationTextChanged(string variable)
        {
            if (Universal.EnableTextChangedEvent)
            {
                int index = dataInfiltration.CurrentCell.RowIndex;
                string infiltratinFileName = _currentProjectPath + "\\" + dataInfiltration.Rows[index].Cells[1].Value.ToString();
                try
                {
                    if (Universal.InfiltrationParametersFiles.ContainsKey(infiltratinFileName))
                    {
                        Universal.InfiltrationParametersGroup anInfiltration = Universal.InfiltrationParametersFiles[infiltratinFileName];


                        //anInfiltration.ModelType = comboModelName.Text;
                        //anInfiltration.DecayRate = txtDecayRate.Text;
                        //anInfiltration.HydraulicConductivity = txtDecayRate.Text;
                        //anInfiltration.CNCurveNumber = txtDecayRate.Text;
                        //anInfiltration.FinalRate = txtFinalRate.Text;
                        //anInfiltration.PsiWetting = txtFinalRate.Text; ;
                        //anInfiltration.InitialAbstraction = txtFinalRate.Text; ;
                        //anInfiltration.InitialRate = txtInitialRate.Text;
                        //anInfiltration.DeltaTheta = txtInitialRate.Text;

                        switch (variable)
                        {
                            case "Decay Rate":
                                anInfiltration.DecayRate = txtDecayRate.Text;
                                anInfiltration.HydraulicConductivity = txtDecayRate.Text;
                                anInfiltration.CNCurveNumber = txtDecayRate.Text;
                                break;

                            case "Final Rate":
                                anInfiltration.FinalRate = txtFinalRate.Text;
                                anInfiltration.PsiWetting = txtFinalRate.Text; ;
                                anInfiltration.InitialAbstraction = txtFinalRate.Text; ;
                                break;

                            case "Initial Rate":
                                anInfiltration.InitialRate = txtInitialRate.Text;
                                anInfiltration.DeltaTheta = txtInitialRate.Text;
                                break;

                                //case "Model":
                                //  anInfiltration.ModelType = comboModelName.Text;
                                //  break;
                        }


                        Universal.InfiltrationParametersFiles[infiltratinFileName] = anInfiltration;
                        //InfiltrationpPametersChanged = true;
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show(Universal.Idioma("ERROR 2704171527: error while assigning variable. ", "ERROR 2704171527: error assignando valor a variable. ") +
                        ex.Message, "RiverFlow2D",
                      MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }

        private void btnOpenWindPlus_Click(object sender, EventArgs e)
        {
            var openFileDialog = new OpenFileDialog
            {
                Filter = "WIND files (*.WIND)|*.WIND",
                InitialDirectory = _currentProjectPath,
                FileName = _currentProjectName + ".WIND",
                FilterIndex = 1,
                RestoreDirectory = true,
                CheckFileExists = true
            };

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                var fileinfo = new FileInfo(openFileDialog.FileName);
                if (fileinfo.Length > 1)
                {
                    try
                    {
                        _dataManager.LoadWindPlusFromFile(openFileDialog.FileName);
                        UpdateWithWindPlusFile();
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(Universal.Idioma("ERROR 1003150843: error trying to open file ", "ERROR 1003150843: error abriendo archivo ") +
                            openFileDialog.FileName + ". " + ex.Message,
                            "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
                else
                    MessageBox.Show(Universal.Idioma("WARNING: file " + openFileDialog.FileName + " is empty.", "ADVERTENCIA: el archivo" + openFileDialog.FileName + " está vacío."),
                        "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }

        private void txtWindPlusAirDensity_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = CheckForReal(txtWindPlusAirDensity, e);
        }

        private void txtWindPlusStressCoeff_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = CheckForReal(txtWindPlusStressCoeff, e);
        }

        private void txtWindPlusAirDensity_Validated(object sender, EventArgs e)
        {
            if (txtWindPlusAirDensity.Text != "") UpdateData(txtWindPlusAirDensity);
        }

        private void txtWindPlusStressCoeff_Validated(object sender, EventArgs e)
        {
            if (txtWindPlusStressCoeff.Text != "") UpdateData(txtWindPlusStressCoeff);
        }

        private void txtWindPlusAirDensity_Validating(object sender, CancelEventArgs e)
        {
            if (txtWindPlusAirDensity.Text == "")
            {
                AddError(txtWindPlusAirDensity, Universal.Idioma("Wind density cannot be empty.", "La densidad del viento no puede estar vacía."), "Wind panel");
                return;
            }
            double x = Double.Parse(txtWindPlusAirDensity.Text);
            if (x < 1.0 || x > 1.8)
            {
                AddError(txtWindPlusAirDensity, Universal.Idioma("Air density must be in the range [1.0, 1.8]", "La densidad del aire debe estar en el intervalo [1.0, 1.8]"), "Wind panel");
            }
            else
            {
                RemoveError(txtWindPlusAirDensity);
            }
        }

        private void txtWindPlusStressCoeff_Validating(object sender, CancelEventArgs e)
        {
            if (txtWindPlusStressCoeff.Text == "")
            {
                AddError(txtWindPlusStressCoeff, Universal.Idioma("Stress coefficient CD cannot be empty.", "El coeficiente de esfuerzo CD no puede estar vacío."), "Wind panel");
                return;
            }
            double x = Double.Parse(txtWindPlusStressCoeff.Text);
            if (x < 0.00001 || x > 0.001)
            {
                AddError(txtWindPlusStressCoeff, Universal.Idioma("Stress coefficient CD must be in the range [0.00001, 0.001]", "El coeficiente de esfuerzo CD debe estar en el intervalo [0.0001, 0.001]"), "Wind panel");
            }
            else
            {
                RemoveError(txtWindPlusStressCoeff);
            }
        }

        private void dataWindPlusZones_RowEnter(object sender, DataGridViewCellEventArgs e)
        {

            Universal.EnableTextChangedEvent = false;

            //From primary table, get file name of secondary table:
            string fileName = _currentProjectPath + "\\" + dataWindPlusZones.Rows[e.RowIndex].Cells[1].Value;
            //Update text above secundary table:
            lblWindFileName.Text = dataWindPlusZones.Rows[e.RowIndex].Cells[1].Value.ToString();
            //Read seccondary data and load secondary table:
            ShowSecondaryGroup(dataWindPlusVelocities, fileName);

            Universal.EnableTextChangedEvent = true;
        }

        private void dataWindPlusVelocities_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex >= 0 && e.RowIndex >= 0)
                if (Universal.EnableTextChangedEvent)
                {
                    //From primary table get file name of secondary data. To be use as an index to 
                    //the secondary data stored in memory structure:
                    int row = dataWindPlusZones.CurrentCell.RowIndex;
                    string fileName = _currentProjectPath + "\\" + dataWindPlusZones.Rows[row].Cells[1].Value.ToString();

                    //New value of cell:
                    var val = (string)dataWindPlusVelocities.Rows[e.RowIndex].Cells[e.ColumnIndex].Value;

                    UpdateIndividualCellValueInSecondaryTableStructure(fileName, val, e);

                }
            //if (e.ColumnIndex < 0 || e.RowIndex < 0) return;
            //if (Universal.EnableTextChangedEvent)
            //{
            //    try
            //    {
            //        int index = dataWindPlusZones.CurrentCell.RowIndex;
            //        string windfileName = _currentProjectPath + "\\" + dataWindPlusZones.Rows[index].Cells[1].Value.ToString();
            //        if (Universal.SecondaryGroups.ContainsKey(windfileName))
            //        {
            //            Universal.SecondaryGroup aWind = Universal.SecondaryGroups[windfileName];
            //            var val = (string)dataWindPlusVelocities.Rows[e.RowIndex].Cells[e.ColumnIndex].Value;
            //            if (e.RowIndex <= aWind.Table.Length - 1)
            //            {
            //                if (e.ColumnIndex == 0)
            //                    aWind.Table[e.RowIndex].Col0 = val;
            //                else if (e.ColumnIndex == 1)
            //                    aWind.Table[e.RowIndex].Col1 = val;
            //                else
            //                    aWind.Table[e.RowIndex].Col2 = val;

            //                Universal.SecondaryGroups[windfileName] = aWind;
            //            }
            //            else
            //            {
            //                var tmpVT = new Universal.ExtraData[aWind.Table.Length + 1];
            //                aWind.Table.CopyTo(tmpVT, 0);

            //                if (e.ColumnIndex == 0)
            //                    tmpVT[tmpVT.Length - 1].Col0 = val;
            //                else if (e.ColumnIndex == 1)
            //                    tmpVT[tmpVT.Length - 1].Col1 = val;
            //                else
            //                    tmpVT[tmpVT.Length - 1].Col2 = val;

            //                aWind.Table = tmpVT;
            //                aWind.NPoints = aWind.NPoints + 1;

            //                Universal.SecondaryGroups[windfileName] = aWind;
            //            }
            //        }
            //    }
            //    catch (Exception ex)
            //    {
            //        MessageBox.Show(Universal.Idioma("ERROR 1803172034: error modifying value. " + ex.Message, "RiverFlow2D", MessageBoxButtons.OK,
            //          MessageBoxIcon.Error);
            //    }
            //}
        }

        private void btnSaveWindPlus_Click(object sender, EventArgs e)
        {
            if (dataWindPlusVelocities.RowCount >= 2)
            {
                var saveFileDialog = new SaveFileDialog
                {
                    Filter = "WIND files (*.WIND)|*.WIND",
                    InitialDirectory = _currentProjectPath,
                    FileName = _currentProjectName + ".WIND",
                    FilterIndex = 1,
                    RestoreDirectory = true
                };

                try
                {
                    if (saveFileDialog.ShowDialog() == DialogResult.OK)
                        _dataManager.SaveWindPlusToFile(saveFileDialog.FileName);
                }
                catch
                {
                    MessageBox.Show(Universal.Idioma("ERROR 1103151051: error trying to save .WIND file.", "ERROR 1103151051: error almacenando archivo .WIND."),
                        "RiverFlow2D", MessageBoxButtons.OK,
                        MessageBoxIcon.Error);
                }
            }
            else
            {
                MessageBox.Show(Universal.Idioma("The wind table is empty. It was not saved.", "La tabla de viento está vacía. No fue almacenada."), 
                    "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void btnSaveOilSpillOnLand_Click(object sender, EventArgs e)
        {
            var saveFileDialog = new SaveFileDialog
            {
                Filter = "OILP files (*.OILP)|*.OILP",
                InitialDirectory = _currentProjectPath,
                FileName = _currentProjectName + ".OILP",
                FilterIndex = 1,
                RestoreDirectory = true
            };

            try
            {
                if (saveFileDialog.ShowDialog() == DialogResult.OK)
                {
                    ValFile.SaveRiverFLO2DdataVal = true;
                    _dataManager.SaveOilPlusToFile(saveFileDialog.FileName);
                }
            }
            catch
            {
                MessageBox.Show(Universal.Idioma("ERROR 1709141208: error trying to save .OILP file.", "ERROR 1709141208: error almacenando archivo .OILP."),
                    "RiverFlow2D", MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
            }
        }

        private void btnOpenOilSpillOnLand_Click(object sender, EventArgs e)
        {
            var openFileDialog = new OpenFileDialog
            {
                Filter = "OILP files (*.OILP)|*.OILP",
                InitialDirectory = _currentProjectPath,
                FileName = _currentProjectName + ".OILP",
                FilterIndex = 1,
                RestoreDirectory = true,
                CheckFileExists = true
            };

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                try
                {
                    _dataManager.LoadOilPlusFromFile(openFileDialog.FileName);
                    UpdateWithOILPFile();
                }
                catch
                {
                    MessageBox.Show(Universal.Idioma("ERROR 1803151702: error trying to open .OILP file.", "ERROR 1803151702: error abriendo archivo .OILP."),
                        "RiverFlow2D", MessageBoxButtons.OK,
                        MessageBoxIcon.Error);
                }

            }
        }

        private void dataOilSpillOnLandTemperature_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex < 0 || e.RowIndex < 0) return;

            string value = "0.0";
            try
            {
                value = dataOilSpillOnLandTemperature[e.ColumnIndex, e.RowIndex].Value.ToString();
            }
            catch (Exception)
            {
            }
            finally
            {
                dataOilSpillOnLandTemperature[e.ColumnIndex, e.RowIndex].Value = value;
                UpdateData(dataOilSpillOnLandTemperature);
            }
        }

        private void dataOilSpillOnLandTemperature_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            var textBox = e.Control as DataGridViewTextBoxEditingControl;
            textBox.KeyPress -= new KeyPressEventHandler(dataOilSpillOnLandTemperature_KeyPress);
            textBox.KeyPress += new KeyPressEventHandler(dataOilSpillOnLandTemperature_KeyPress);
        }

        private void dataOilSpillOnLandTemperature_KeyPress(object sender, KeyPressEventArgs e)
        {
            //check if pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
            {
                if (dataOilSpillOnLandTemperature.EditingControl.Text.Contains("."))
                    e.Handled = true;
                else
                    e.Handled = false;
            }
            else
                e.Handled = false;
        }

        private void dataOilSpillOnLandTemperature_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Insert)
            {
                if (dataOilSpillOnLandTemperature.CurrentRow != null)
                    dataOilSpillOnLandTemperature.Rows.Insert(dataOilSpillOnLandTemperature.CurrentRow.Index);
            }
        }

        private void dataOilSpillOnLandTemperature_RowsAdded(object sender, DataGridViewRowsAddedEventArgs e)
        {
            if (!_updating) UpdateData(dataOilSpillOnLandTemperature);
        }

        private void dataOilSpillOnLandTemperature_RowsRemoved(object sender, DataGridViewRowsRemovedEventArgs e)
        {
            if (!_updating) UpdateData(dataOilSpillOnLandTemperature);
        }

        private void txtOilSpillOnLandViscocity_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = CheckForReal(txtOilSpillOnLandViscocity, e);
        }

        private void txtOilSpillOnLandDensity_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = CheckForReal(txtOilSpillOnLandDensity, e);
        }

        private void txtOilSpillOnLandViscocity_Validated(object sender, EventArgs e)
        {
            if (txtOilSpillOnLandViscocity.Text != "") UpdateData(txtOilSpillOnLandViscocity);
        }

        private void txtOilSpillOnLandViscocity_Validating(object sender, CancelEventArgs e)
        {
            //if (txtOilSpillOnLandViscocity.Text == "")
            //{
            //	AddError(txtOilSpillOnLandViscocity, "Viscosity cannot be empty.", "Oil Spill panel");
            //	return;
            //}

            //double x = Double.Parse(txtOilSpillOnLandViscocity.Text);
            //if (Universal.RiverUnits == "Metric" && (x < 0.001 || x > 0.5))
            //{
            //	AddError(txtOilSpillOnLandViscocity, "Viscosity must be in the range [0.001, 0.5]", "Oil Spill panel");
            //}
            //else if (Universal.RiverUnits == "English" && (x < 0.0000015 || x > 0.00073))
            //{
            //	AddError(txtOilSpillOnLandViscocity, "Viscosity must be in the range [0.0000015, 0.00073]", "Oil Spill panel");
            //}
            //else RemoveError(txtOilSpillOnLandViscocity);
        }

        private void txtOilSpillOnLandDensity_Validated(object sender, EventArgs e)
        {
            if (txtOilSpillOnLandDensity.Text != "") UpdateData(txtOilSpillOnLandDensity);
        }

        private void txtOilSpillOnLandDensity_Validating(object sender, CancelEventArgs e)
        {
            //if (txtOilSpillOnLandDensity.Text == "")
            //{
            //	AddError(txtOilSpillOnLandDensity, "Density cannot be empty.", "Oil Spill panel");
            //	return;
            //}

            //double x = Double.Parse(txtOilSpillOnLandDensity.Text);
            //if (Universal.RiverUnits == "Metric" && (x < 600 || x > 1200))
            //{
            //	AddError(txtOilSpillOnLandDensity, "Density must be in the range [600, 1200]", "Oil Spill panel");
            //}
            //else if (Universal.RiverUnits == "English" && (x < 37 || x > 75))
            //{
            //	AddError(txtOilSpillOnLandDensity, "Density must be in the range [37, 75]", "Oil Spill panel");
            //}
            //else RemoveError(txtOilSpillOnLandDensity);
        }

        private void btnOilSpillOnLandSaveViscocityDensity_Click(object sender, EventArgs e)
        {
            string viscosityFileName = txtOilSpillOnLandViscosityDensityFile.Text;
            if (viscosityFileName != "")
            {
                TextWriter viscosityFile = null;
                try
                {
                    viscosityFile = new StreamWriter(viscosityFileName);
                    var nTimes = dataOilSpillOnLandTimeViscocityDensity.RowCount;
                    viscosityFile.WriteLine(nTimes.ToString(CultureInfo.InvariantCulture));
                    for (int i = 0; i <= nTimes - 1; i++)
                    {
                        string line = dataOilSpillOnLandTimeViscocityDensity[0, i].Value + "  " +
                                                    dataOilSpillOnLandTimeViscocityDensity[1, i].Value + "  " +
                                                    dataOilSpillOnLandTimeViscocityDensity[2, i].Value;
                        viscosityFile.WriteLine(line);
                    }
                    viscosityFile.Close();
                }
                catch (Exception ex)
                {
                    MessageBox.Show(Universal.Idioma("ERROR 2402151600: error writing ", "ERROR 2402151600: error escribiendo ") +
                        viscosityFileName + ". " + ex.Message,
                        "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                finally
                {
                    if (viscosityFile != null)
                    {
                        viscosityFile.Close();
                    }
                }
            }
        }

        private void dataOilSpillOnLandTimeViscocityDensity_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex < 0 || e.RowIndex < 0) return;

            string value = "0.0";
            try
            {
                value = dataOilSpillOnLandTimeViscocityDensity[e.ColumnIndex, e.RowIndex].Value.ToString();
            }
            catch (Exception)
            {
            }
            finally
            {
                dataOilSpillOnLandTimeViscocityDensity[e.ColumnIndex, e.RowIndex].Value = value;
                UpdateData(dataOilSpillOnLandTimeViscocityDensity);
            }
        }

        private void dataOilSpillOnLandTimeViscocityDensity_RowsRemoved(object sender, DataGridViewRowsRemovedEventArgs e)
        {
            if (!_updating) UpdateData(dataOilSpillOnLandTimeViscocityDensity);
        }

        private void dataOilSpillOnLandTimeViscocityDensity_RowsAdded(object sender, DataGridViewRowsAddedEventArgs e)
        {
            if (!_updating) UpdateData(dataOilSpillOnLandTimeViscocityDensity);
        }

        private void dataOilSpillOnLandTimeViscocityDensity_KeyPress(object sender, KeyPressEventArgs e)
        {
            //check if pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
            {
                if (dataOilSpillOnLandTimeViscocityDensity.EditingControl.Text.Contains("."))
                    e.Handled = true;
                else
                    e.Handled = false;
            }
            else
                e.Handled = false;
        }

        private void dataOilSpillOnLandTimeViscocityDensity_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Insert)
            {
                if (dataOilSpillOnLandTimeViscocityDensity.CurrentRow != null)
                    dataOilSpillOnLandTimeViscocityDensity.Rows.Insert(dataOilSpillOnLandTimeViscocityDensity.CurrentRow.Index);
            }
        }

        private void dataOilSpillOnLandTimeViscocityDensity_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            var textBox = e.Control as DataGridViewTextBoxEditingControl;
            textBox.KeyPress -= new KeyPressEventHandler(dataOilSpillOnLandTimeViscocityDensity_KeyPress);
            textBox.KeyPress += new KeyPressEventHandler(dataOilSpillOnLandTimeViscocityDensity_KeyPress);
        }

        private void dataOilSpillOnLandTemperature_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void btnOilSpillOnLandSaveTemperature_Click(object sender, EventArgs e)
        {

            if (dataOilSpillOnLandTemperature.RowCount <= 1)
                MessageBox.Show(Universal.Idioma("Temperatures table is empty!", "La tabla de temperaturas está vacía."),
                    "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
            else
            {
                var svdlg = new SaveFileDialog();
                svdlg.FileName = txtOilSpillOnLandTemperatureFile.Text;
                ;
                if (svdlg.ShowDialog() == DialogResult.OK)
                {
                    string temperaturesFileName = svdlg.FileName;
                    try
                    {
                        if (temperaturesFileName != "")
                        {
                            TextWriter temperaturesFile = new StreamWriter(temperaturesFileName);
                            int nTimes = dataOilSpillOnLandTemperature.RowCount;
                            temperaturesFile.WriteLine(nTimes - 1);
                            for (int i = 0; i <= nTimes - 2; i++)
                            {
                                string line = dataOilSpillOnLandTemperature[0, i].Value + "  " +
                                                        dataOilSpillOnLandTemperature[1, i].Value;

                                temperaturesFile.WriteLine(line);
                            }
                            temperaturesFile.Close();
                            txtOilSpillOnLandTemperatureFile.Text = temperaturesFileName;
                            _dataManager.Set("OILSPILLONLAND_TEMPERATURE_FILE", txtOilSpillOnLandTemperatureFile);
                        }
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(Universal.Idioma("ERROR 3001161055: error writing ", "ERROR 3001161055: error escribiendo ") +
                            temperaturesFileName + ". " + ex.Message,
                            "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
        }

        private void txtModelName_TextChanged(object sender, EventArgs e)
        {

        }

        private void comboModelName_SelectedIndexChanged(object sender, EventArgs e)
        {
            SetInfiltrationModelName();
            InfiltrationTextChanged("Model");
            InfiltrationpPametersChanged = true;
        }

        private void lblModelName_Click(object sender, EventArgs e)
        {

        }

        private void lblKDecayRate_Click(object sender, EventArgs e)
        {

        }

        private void chckManningWithDepth_Validated(object sender, EventArgs e)
        {
            //SetIMANNINGDEPTH();
        }

        private void chckManningWithDepth_CheckedChanged(object sender, EventArgs e)
        {

        }

        private void chckManningWithDepth_Validating(object sender, CancelEventArgs e)
        {
            //SetIMANNINGDEPTH();
        }

        private void chckManningWithDepth_Click(object sender, EventArgs e)
        {
            SetIMANNINGDEPTH();
        }

        private void tabPageGates_Click(object sender, EventArgs e)
        {

        }

        protected override void OnShown(EventArgs e)
        {
            base.OnShown(e);

        }

        private void dataOBCP_RowEnter(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                if (e.RowIndex >= 0)
                {
                    //See if series from previous row was saved:
                    if (OBCPSeriesTableChanged)
                    {
                        try
                        {
                            if (MessageBox.Show(
                                "Boundary Conditions table " + groupBoxOBCPSeries.Text.Trim() + " changed.\n" + "Would you like to save it?",
                                "RiverFlow2D", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
                                SaveOBCPSeriesTable();
                            else
                                OBCPSeriesTableChanged = false;
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show(Universal.Idioma("ERROR 0803160735: ", "") +
                                ex.Message, "RiverFlow2D",
                                MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        }
                    }


                    try //Read Nodes and update table of nodes:
                    {
                        _dataManager.loadOBCGroupNodes(e.RowIndex);
                        string prefix = Universal.Idioma("Cells in Boundary Group ", "Celdas en Grupo de Contorno ");
                        groupBoxOBCPNodes.Text = prefix + Convert.ToString(e.RowIndex + 1) + ":\n" +
                                                 dataOBCP[2, e.RowIndex].Value.ToString().Trim();
                        dataOBCPNodes.Columns[1].HeaderText = Universal.Idioma("Cell", "Celda");
                        if (dataOBCP[2, e.RowIndex].Value.ToString() == "0")
                        {
                            groupBoxOBCPSeries.Text = "(No File)";
                            groupBoxOBCPSeries.Visible = true;
                            dataOBCPSeries.Visible = false;
                        }
                        else
                        {
                            groupBoxOBCPSeries.Text = dataOBCP[3, e.RowIndex].Value.ToString();
                            groupBoxOBCPSeries.Visible = true;
                            dataOBCPSeries.Visible = true;

                        }
                        UpdateControl(dataOBCPNodes);
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(Universal.Idioma("ERROR 0803160736: ", "") +
                            ex.Message, "RiverFlow2D",
                            MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    }


                    //Read Series and update table of series:
                    LoadOBCPSeriesTable(e.RowIndex);

                }

            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 0803161645: error reading boundary conditions table.", "ERROR 0803161645: error escribiendo tabla de condiciones de contorno.") +
                    ex.Message, "RiverFlow2D",
                    MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            }

        }

        private void radioOILPConstants_CheckedChanged(object sender, EventArgs e)
        {
            if (radioOILPConstants.Checked)
            {
                groupBoxOILPConstants.Enabled = true;
                groupBoxOILPTables.Enabled = false;
            }
            else
            {
                groupBoxOILPConstants.Enabled = false;
                groupBoxOILPTables.Enabled = true;
            }

            UpdateData(radioOILPConstants);
            UpdateData(radioOILPTables);
        }

        private void btnOILPOpenViscocityDensity_Click(object sender, EventArgs e)
        {
            {
                var openFileDialog = new OpenFileDialog
                {
                    FileName = txtOilSpillOnLandViscosityDensityFile.Text,
                    FilterIndex = 1,
                    RestoreDirectory = true,
                    CheckFileExists = true
                };

                if (openFileDialog.ShowDialog() == DialogResult.OK)
                {
                    var viscositiesDensitiesPlus = new List<string[]>();
                    if (OILPLUSFile.ReadOilpViscosityDensitiesFile(openFileDialog.FileName, viscositiesDensitiesPlus))
                    {
                        _dataManager.Set("OILSPILLONLAND_VISCOCITYDENSITY_VALUES", viscositiesDensitiesPlus);
                        UpdateControl(dataOilSpillOnLandTimeViscocityDensity);
                        _dataManager.Set("OILSPILLONLAND_VISCOSITY_FILE", openFileDialog.FileName);
                        UpdateControl(txtOilSpillOnLandViscosityDensityFile);
                    }
                }
            }
        }

        private void btnOILPOpenTemperatures_Click(object sender, EventArgs e)
        {
            var openFileDialog = new OpenFileDialog
            {
                FileName = txtOilSpillOnLandTemperatureFile.Text,
                FilterIndex = 1,
                RestoreDirectory = true,
                CheckFileExists = true
            };

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                var temperaturesPlus = new List<string[]>();
                if (OILPLUSFile.ReadOilpTemperaturesFile(openFileDialog.FileName, temperaturesPlus))
                {
                    _dataManager.Set("OILSPILLONLAND_TEMPERATURE_VALUES", temperaturesPlus);
                    UpdateControl(dataOilSpillOnLandTemperature);
                    _dataManager.Set("OILSPILLONLAND_TEMPERATURE_FILE", openFileDialog.FileName);
                    UpdateControl(txtOilSpillOnLandTemperatureFile);
                }
            }
        }

        private void txtOilSpillOnLandViscosityDensityFile_TextChanged(object sender, EventArgs e)
        {

        }

        private void btnOilSpillOnLandSaveViscosityDensity_Click(object sender, EventArgs e)
        {
            if (dataOilSpillOnLandTimeViscocityDensity.RowCount <= 1)
                MessageBox.Show(Universal.Idioma("Viscosity-Density table is empty!", "La tabla de viscosidad-densidad está vacía."),
                    "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
            else
            {
                var svdlg = new SaveFileDialog();
                svdlg.FileName = txtOilSpillOnLandViscosityDensityFile.Text;
                ;
                if (svdlg.ShowDialog() == DialogResult.OK)
                {
                    string viscosityDensityFileName = svdlg.FileName;
                    try
                    {
                        if (viscosityDensityFileName != "")
                        {
                            TextWriter viscosityDensityFile = new StreamWriter(viscosityDensityFileName);
                            int nTimes = dataOilSpillOnLandTimeViscocityDensity.RowCount;
                            viscosityDensityFile.WriteLine(nTimes - 1);
                            for (int i = 0; i <= nTimes - 2; i++)
                            {
                                string line = dataOilSpillOnLandTimeViscocityDensity[0, i].Value + "  " +
                                              dataOilSpillOnLandTimeViscocityDensity[1, i].Value + "  " +
                                              dataOilSpillOnLandTimeViscocityDensity[2, i].Value;
                                viscosityDensityFile.WriteLine(line);
                            }
                            viscosityDensityFile.Close();
                            txtOilSpillOnLandViscosityDensityFile.Text = viscosityDensityFileName;
                            _dataManager.Set("OILSPILLONLAND_VISCOSITY_FILE", txtOilSpillOnLandViscosityDensityFile);
                        }
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(Universal.Idioma("ERROR 3001161055: error writing ", "ERROR 3001161055: error escribiendo ") +
                            viscosityDensityFileName + ". " + ex.Message,
                            "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
        }

        private void btnOILPNewViscocityDensity_Click(object sender, EventArgs e)
        {
            //Clear viscosity-density table:
            dataOilSpillOnLandTimeViscocityDensity.Rows.Clear();
            var emptyViscocityDensityPlus = new List<string[]>();
            _dataManager.Set("OILSPILLONLAND_VISCOCITYDENSITY_VALUES", emptyViscocityDensityPlus);
            txtOilSpillOnLandViscosityDensityFile.Text = "";
            _dataManager.Set("OILSPILLONLAND_VISCOSITY_FILE", "");
        }

        private void btnOILPNewTemperatures_Click(object sender, EventArgs e)
        {
            //Clear temperatures table:
            dataOilSpillOnLandTemperature.Rows.Clear();
            var emptyTemperaturesPlus = new List<string[]>();
            _dataManager.Set("OILSPILLONLAND_TEMPERATURE_VALUES", emptyTemperaturesPlus);
            txtOilSpillOnLandTemperatureFile.Text = "";
            _dataManager.Set("OILSPILLONLAND_TEMPERATURE_FILE", "");
        }

        private void dataOBCPNodes_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void btnOpenOBCP_Click(object sender, EventArgs e)
        {
            var openFileDialog = new OpenFileDialog
            {
                Filter = "OBCP files (*.OBCP)|*.OBCP",
                InitialDirectory = _currentProjectPath,
                FileName = _currentProjectName + ".OBCP",
                FilterIndex = 1,
                RestoreDirectory = true,
                CheckFileExists = true
            };

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                var fileinfo = new FileInfo(openFileDialog.FileName);
                if (fileinfo.Length > 1)
                {
                    try
                    {
                        _dataManager.LoadOpenBoundaryPlusFromFile(openFileDialog.FileName);
                        UpdateWithOBCPFile();
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(Universal.Idioma("ERROR 0102160839: error trying to open file ", "ERROR 0102160839: error abriendo archivo ") +
                            openFileDialog.FileName + ". " + ex.Message,
                            "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
                else
                    MessageBox.Show(Universal.Idioma("WARNING: file " + openFileDialog.FileName + " is empty.", "ADVERTENCIA: el archivo" + openFileDialog.FileName + " está vacío."),
                        "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }

        private void btnOBCPPlot_Click(object sender, EventArgs e)
        {
            try
            {
                bool english = Universal.RiverUnits == "English";

                var listToPlot = (List<string[]>)_dataManager.Get((string)dataOBCPSeries.Tag);
                if (listToPlot.Count > 2)
                {
                    var data = new ArrayList();

                    var seriesA = new ArrayList();
                    var seriesB = new ArrayList();
                    var seriesC = new ArrayList();
                    var seriesD = new ArrayList();
                    var seriesE = new ArrayList();
                    var seriesF = new ArrayList();
                    var seriesG = new ArrayList();
                    var seriesH = new ArrayList();
                    var seriesI = new ArrayList();
                    var seriesJ = new ArrayList();
                    var seriesK = new ArrayList();
                    var seriesL = new ArrayList();
                    var seriesM = new ArrayList();
                    var seriesN = new ArrayList();
                    var seriesO = new ArrayList();
                    var seriesP = new ArrayList();



                    int currentRow = dataOBCP.CurrentRow.Index;
                    string openBoundaryType = dataOBCP[1, currentRow].Value.ToString();

                    if (openBoundaryType != "10" && openBoundaryType != "11")
                    {
                        int size = listToPlot.Count;
                        for (int i = 0; i < size; ++i)
                        {
                            switch (openBoundaryType)
                            {
                                case "1":
                                    seriesA.Add(new PointF(float.Parse(listToPlot[i][1]), float.Parse(listToPlot[i][2])));
                                    break;

                                case "5":
                                    seriesA.Add(new PointF(float.Parse(listToPlot[i][1]), float.Parse(listToPlot[i][2])));  //Discharge vs Time
                                    seriesB.Add(new PointF(float.Parse(listToPlot[i][1]), float.Parse(listToPlot[i][3])));  // Water Elevation vs Time
                                    seriesC.Add(new PointF(float.Parse(listToPlot[i][2]), float.Parse(listToPlot[i][3])));  // Water Elevation vs Discharge
                                    seriesD.Add(new PointF(float.Parse(listToPlot[i][0]), float.Parse(listToPlot[i][2])));  // Discharge values
                                    seriesE.Add(new PointF(float.Parse(listToPlot[i][0]), float.Parse(listToPlot[i][3])));  // Elevation Values
                                    break;

                                case "6":
                                    //Discharge vs Time (always exists)
                                    seriesA.Add(new PointF(float.Parse(listToPlot[i][1]), float.Parse(listToPlot[i][2])));

                                    //Conc. 1 vs Time
                                    if (dataOBCPSeries.Columns[3].Visible)
                                        seriesB.Add(new PointF(float.Parse(listToPlot[i][1]), float.Parse(listToPlot[i][3])));

                                    //Conc. 2 vs Time
                                    if (dataOBCPSeries.Columns[4].Visible)
                                        seriesC.Add(new PointF(float.Parse(listToPlot[i][1]), float.Parse(listToPlot[i][4])));

                                    //Conc. 3 vs Time
                                    if (dataOBCPSeries.Columns[5].Visible)
                                        seriesD.Add(new PointF(float.Parse(listToPlot[i][1]), float.Parse(listToPlot[i][5])));

                                    //Conc. 4 vs Time
                                    if (dataOBCPSeries.Columns[6].Visible)
                                        seriesE.Add(new PointF(float.Parse(listToPlot[i][1]), float.Parse(listToPlot[i][6])));

                                    //Conc. 5 vs Time
                                    if (dataOBCPSeries.Columns[7].Visible)
                                        seriesF.Add(new PointF(float.Parse(listToPlot[i][1]), float.Parse(listToPlot[i][7])));

                                    //Conc. 6 vs Time
                                    if (dataOBCPSeries.Columns[8].Visible)
                                        seriesG.Add(new PointF(float.Parse(listToPlot[i][1]), float.Parse(listToPlot[i][8])));

                                    //Conc. 7 vs Time
                                    if (dataOBCPSeries.Columns[9].Visible)
                                        seriesH.Add(new PointF(float.Parse(listToPlot[i][1]), float.Parse(listToPlot[i][9])));

                                    //Conc. 8 vs Time
                                    if (dataOBCPSeries.Columns[10].Visible)
                                        seriesI.Add(new PointF(float.Parse(listToPlot[i][1]), float.Parse(listToPlot[i][10])));

                                    //Conc. 9 vs Time
                                    if (dataOBCPSeries.Columns[11].Visible)
                                        seriesJ.Add(new PointF(float.Parse(listToPlot[i][1]), float.Parse(listToPlot[i][11])));

                                    break;

                                case "9":
                                    seriesA.Add(new PointF(float.Parse(listToPlot[i][2]), float.Parse(listToPlot[i][1])));  // Water Elevation vs Discharge
                                    seriesB.Add(new PointF(float.Parse(listToPlot[i][0]), float.Parse(listToPlot[i][1])));  // Water Elev values
                                    seriesC.Add(new PointF(float.Parse(listToPlot[i][0]), float.Parse(listToPlot[i][2])));  // Discharge Values
                                    break;

                                case "10":
                                    break;

                                case "11":
                                    break;

                                case "12":
                                    seriesA.Add(new PointF(float.Parse(listToPlot[i][2]), float.Parse(listToPlot[i][1])));  // Water Elevation vs Discharge
                                    seriesB.Add(new PointF(float.Parse(listToPlot[i][0]), float.Parse(listToPlot[i][1])));  // Water Elev values
                                    seriesC.Add(new PointF(float.Parse(listToPlot[i][0]), float.Parse(listToPlot[i][2])));  // Discharge Values
                                    break;

                                case "26":
                                    //Discharge vs Time (always exists)
                                    seriesA.Add(new PointF(float.Parse(listToPlot[i][1]), float.Parse(listToPlot[i][2])));

                                    //Conc. 1 vs Time
                                    if (dataOBCPSeries.Columns[3].Visible)
                                        seriesB.Add(new PointF(float.Parse(listToPlot[i][1]), float.Parse(listToPlot[i][3])));

                                    //Conc. 2 vs Time
                                    if (dataOBCPSeries.Columns[4].Visible)
                                        seriesC.Add(new PointF(float.Parse(listToPlot[i][1]), float.Parse(listToPlot[i][4])));

                                    //Conc. 3 vs Time
                                    if (dataOBCPSeries.Columns[5].Visible)
                                        seriesD.Add(new PointF(float.Parse(listToPlot[i][1]), float.Parse(listToPlot[i][5])));

                                    //Conc. 4 vs Time
                                    if (dataOBCPSeries.Columns[6].Visible)
                                        seriesE.Add(new PointF(float.Parse(listToPlot[i][1]), float.Parse(listToPlot[i][6])));

                                    //Conc. 5 vs Time
                                    if (dataOBCPSeries.Columns[7].Visible)
                                        seriesF.Add(new PointF(float.Parse(listToPlot[i][1]), float.Parse(listToPlot[i][7])));

                                    //Conc. 6 vs Time
                                    if (dataOBCPSeries.Columns[8].Visible)
                                        seriesG.Add(new PointF(float.Parse(listToPlot[i][1]), float.Parse(listToPlot[i][8])));

                                    //Conc. 7 vs Time
                                    if (dataOBCPSeries.Columns[9].Visible)
                                        seriesH.Add(new PointF(float.Parse(listToPlot[i][1]), float.Parse(listToPlot[i][9])));

                                    //Conc. 8 vs Time
                                    if (dataOBCPSeries.Columns[10].Visible)
                                        seriesI.Add(new PointF(float.Parse(listToPlot[i][1]), float.Parse(listToPlot[i][10])));

                                    //Conc. 9 vs Time
                                    if (dataOBCPSeries.Columns[11].Visible)
                                        seriesJ.Add(new PointF(float.Parse(listToPlot[i][1]), float.Parse(listToPlot[i][11])));

                                    break;

                            }
                        }

                        if (seriesA.Count != 0)
                            data.Add(seriesA);

                        if (seriesB.Count != 0)
                            data.Add(seriesB);

                        if (seriesC.Count != 0)
                            data.Add(seriesC);

                        if (seriesD.Count != 0)
                            data.Add(seriesD);

                        if (seriesE.Count != 0)
                            data.Add(seriesE);

                        if (seriesF.Count != 0)
                            data.Add(seriesF);

                        if (seriesG.Count != 0)
                            data.Add(seriesG);

                        if (seriesH.Count != 0)
                            data.Add(seriesH);

                        if (seriesI.Count != 0)
                            data.Add(seriesI);

                        if (seriesJ.Count != 0)
                            data.Add(seriesJ);

                        if (seriesK.Count != 0)
                            data.Add(seriesK);

                        if (seriesL.Count != 0)
                            data.Add(seriesL);

                        var grapher = new Grapher(data);
                        var graphToDisplay = new ArrayList { };
                        var xAxisLabel = new ArrayList { };
                        var yAxisLabel = new ArrayList { };

                        switch (openBoundaryType)
                        {
                            case "1":
                                grapher.SetWindowAndPlotTitles(Universal.Idioma("Water Elevation", "Cota deAgua"));
                                grapher.SetAxisNameX(Universal.Idioma("Time (hr)", "Tiempo (hr)"));
                                grapher.SetAxisNameY(dataOBCPSeries.Columns[2].HeaderText);
                                grapher.SetYAxisChangeOnDataChange(false);
                                grapher.SetStatusX(Universal.Idioma("Time (hr):", "Tiempo (hr):"));
                                grapher.SetStatusY(Universal.Idioma("Water Elevation:", "Cota de Agua:"));
                                graphToDisplay = new ArrayList { dataOBCPSeries.Columns[2].HeaderText };
                                yAxisLabel = new ArrayList { Universal.Idioma("Water Elevation ", "Cota de Agua ") + (english ? "(ft)" : "(m)") };
                                xAxisLabel = new ArrayList { Universal.Idioma("Time (hr)", "Tiempo (hr)") };

                                break;

                            case "5":
                                grapher.SetWindowAndPlotTitles(Universal.Idioma("Discharge/Water Elevation", "Caudal/Cota de Agua"));
                                grapher.SetAxisNameX(Universal.Idioma("Discharge", "Caudal"));
                                grapher.SetAxisNameY(dataOBCPSeries.Columns[2].HeaderText);
                                grapher.SetYAxisChangeOnDataChange(true);

                                grapher.SetStatusX("X:");
                                grapher.SetStatusY("Y:");

                                graphToDisplay = new ArrayList {Universal.Idioma("Discharge vs Time" , "Caudal vs Tiempo") ,
                                                                                                Universal.Idioma("Water Elevations vs Time" , "Cota de Agua vs Tiempo") ,
                                                                                                Universal.Idioma("Water Elevations vs Discharge" , "Cota de Agua vs Caudal") ,
                                                                                                Universal.Idioma("Discharge values" , "Valores de Caudal")  ,
                                                                                                Universal.Idioma("Water Elevations values" , "Valores de Cota de Agua") };

                                xAxisLabel = new ArrayList {   Universal.Idioma("Time (hr)",  "")  ,
                                                                                           Universal.Idioma("Time (hr)" , "Tiempo (hr)")  ,
                                                                                           Universal.Idioma("Discharge "  , "Caudal ")   + (english? "(ft3/s)" : "(m3/s)"),
                                                                                            "",
                                                                                            "" };

                                yAxisLabel = new ArrayList {Universal.Idioma("Discharge "  , "Caudal ")  + (english? "(ft3/s)" : "(m3/s)"),
                                                                                       Universal.Idioma( "Water Elevation "  , "Cota de Agua ") + (english ? "(ft)" : "(m)"),
                                                                                      Universal.Idioma("Water Elevation " , "Cota de Agua ")    + (english ? "(ft)" : "(m)"),
                                                                                      Universal.Idioma("Discharge "  , "Caudal ")    + (english? "(ft3/s)" : "(m3/s)"),
                                                                                      Universal.Idioma("Water Elevations "  , "Cota de Agua ")    + (english? "(ft)" : "(m)")};
                                break;

                            case "6":
                                grapher.SetWindowAndPlotTitles(Universal.Idioma("Discharge/Concentrations", "Caudal/Concentración"));
                                grapher.SetAxisNameX(Universal.Idioma("Time (hr)", "Tiempo (hr)"));
                                grapher.SetAxisNameY(dataOBCPSeries.Columns[2].HeaderText);
                                grapher.SetYAxisChangeOnDataChange(true);

                                grapher.SetStatusX("X:");
                                grapher.SetStatusY("Y:");

                                graphToDisplay = new ArrayList { Universal.Idioma("Discharge vs Time", "Caudal vs Tiempo") };
                                yAxisLabel = new ArrayList { Universal.Idioma("Discharge ", "Caudal ") + (english ? "(ft3/s)" : "(m3/s)") };
                                xAxisLabel = new ArrayList { Universal.Idioma("Time (hr)", "Tiempo (hr)") };

                                if (seriesB.Count != 0)
                                {
                                    graphToDisplay.Add("Conc. 1");// + (english ? "(ft3/s)" : "(m3/s)"));
                                    yAxisLabel.Add("Conc. 1");// + (english ? "(ft3/s)" : "(m3/s)"));
                                    xAxisLabel.Add(Universal.Idioma("Time (hr)", "Tiempo (hr)"));
                                }

                                if (seriesC.Count != 0)
                                {
                                    graphToDisplay.Add("Conc. 2");// + (english ? "(ft3/s)" : "(m3/s)"));
                                    yAxisLabel.Add("Conc. 2 ");// + (english ? "(ft3/s)" : "(m3/s)"));
                                    xAxisLabel.Add(Universal.Idioma("Time (hr)", "Tiempo (hr)"));
                                }


                                if (seriesD.Count != 0)
                                {
                                    graphToDisplay.Add("Conc. 3");// + (english ? "(ft3/s)" : "(m3/s)"));
                                    yAxisLabel.Add("Conc. 3");// + (english ? "(ft3/s)" : "(m3/s)"));
                                    xAxisLabel.Add(Universal.Idioma("Time (hr)", "Tiempo (hr)"));
                                }

                                if (seriesE.Count != 0)
                                {
                                    graphToDisplay.Add("Conc. 4");// + (english ? "(ft3/s)" : "(m3/s)"));
                                    yAxisLabel.Add("Conc. 4");// + (english ? "(ft3/s)" : "(m3/s)"));
                                    xAxisLabel.Add(Universal.Idioma("Time (hr)", "Tiempo (hr)"));
                                }

                                if (seriesF.Count != 0)
                                {
                                    graphToDisplay.Add("Conc. 5");// + (english ? "(ft3/s)" : "(m3/s)"));
                                    yAxisLabel.Add("Conc. 5");// + (english ? "(ft3/s)" : "(m3/s)"));
                                    xAxisLabel.Add(Universal.Idioma("Time (hr)", "Tiempo (hr)"));
                                }

                                if (seriesG.Count != 0)
                                {
                                    graphToDisplay.Add("Conc. 6");// + (english ? "(ft3/s)" : "(m3/s)"));
                                    yAxisLabel.Add("Conc. 6 ");// + (english ? "(ft3/s)" : "(m3/s)"));
                                    xAxisLabel.Add(Universal.Idioma("Time (hr)", "Tiempo (hr)"));
                                }

                                if (seriesH.Count != 0)
                                {
                                    graphToDisplay.Add("Conc. 7");// + (english ? "(ft3/s)" : "(m3/s)"));
                                    yAxisLabel.Add("Conc. 7 ");// + (english ? "(ft3/s)" : "(m3/s)"));
                                    xAxisLabel.Add(Universal.Idioma("Time (hr)", "Tiempo (hr)"));
                                }

                                if (seriesI.Count != 0)
                                {
                                    graphToDisplay.Add("Conc. 8");// + (english ? "(ft3/s)" : "(m3/s)"));
                                    yAxisLabel.Add("Conc. 8 ");// + (english ? "(ft3/s)" : "(m3/s)"));
                                    xAxisLabel.Add(Universal.Idioma("Time (hr)", "Tiempo (hr)"));
                                }

                                if (seriesJ.Count != 0)
                                {
                                    graphToDisplay.Add("Conc. 9");// + (english ? "(ft3/s)" : "(m3/s)"));
                                    yAxisLabel.Add("Conc. 9 ");// + (english ? "(ft3/s)" : "(m3/s)"));
                                    xAxisLabel.Add(Universal.Idioma("Time (hr)", "Tiempo (hr)"));

                                }

                                if (seriesK.Count != 0)
                                {
                                    graphToDisplay.Add("Conc. 10)");//+ (english ? "(ft3/s)" : "(m3/s)"));
                                    yAxisLabel.Add("Conc. 10 ");// + (english ? "(ft3/s)" : "(m3/s)"));
                                    xAxisLabel.Add(Universal.Idioma("Time (hr)", "Tiempo (hr)"));
                                }

                                if (seriesL.Count != 0)
                                {
                                    graphToDisplay.Add("Conc. 11");// + (english ? "(ft3/s)" : "(m3/s)"));
                                    yAxisLabel.Add("Conc. 11 ");// + (english ? "(ft3/s)" : "(m3/s)"));
                                    xAxisLabel.Add(Universal.Idioma("Time (hr)", "Tiempo (hr)"));
                                }

                                break;

                            case "9":
                                grapher.SetWindowAndPlotTitles(Universal.Idioma("Water Elevation and Discharge", "Cota de Agua y Caudal"));
                                grapher.SetAxisNameX(dataOBCPSeries.Columns[2].HeaderText);
                                grapher.SetAxisNameY(dataOBCPSeries.Columns[1].HeaderText);
                                grapher.SetYAxisChangeOnDataChange(true);

                                grapher.SetStatusX("X:");
                                grapher.SetStatusY("Y:");

                                graphToDisplay = new ArrayList {Universal.Idioma("Water Elevation vs Discharge" , "Cota de Agua vs Caudal") ,
                                                                                                Universal.Idioma("Water Elevations values" , "Valores de Cota de Agua") ,
                                                                                                Universal.Idioma("Discharge Values" , "Valores de Caudal")  };

                                xAxisLabel = new ArrayList { Universal.Idioma("Discharge ", "Caudal ") + (english ? "(ft3/s)" : "(m3/s)"), "", "" };

                                yAxisLabel = new ArrayList {Universal.Idioma(  "Water Elevation ", "Cota de Agua ") + (english ? "(ft)" : "(m)"),
                                                                                        Universal.Idioma("Water Elevation " , "Cota de Agua ")  + (english ? "(ft)" : "(m)"),
                                                                                        Universal.Idioma( "Discharge " , "Caudal ")  + (english? "(ft3/s)" : "(m3/s)")};
                                break;

                            case "10":
                            case "11":
                                break;

                            case "12":
                                grapher.SetWindowAndPlotTitles(Universal.Idioma("Water Elev./Discharge", "Cota de Agua/Caudal"));
                                grapher.SetAxisNameX(dataOBCPSeries.Columns[2].HeaderText);
                                grapher.SetAxisNameY(dataOBCPSeries.Columns[1].HeaderText);
                                grapher.SetYAxisChangeOnDataChange(true);
                                grapher.SetStatusX("X:");
                                grapher.SetStatusY("Y:");
                                //graphToDisplay = new ArrayList { dataOBCPSeries.Columns[1].HeaderText, dataOBCPSeries.Columns[2].HeaderText };

                                graphToDisplay = new ArrayList {Universal.Idioma("Water Elevation vs Discharge" , "Cota de Agua vs Caudal") ,
                                                                                                Universal.Idioma("Water Elevations values" , "Valores de Cota de Agua") ,
                                                                                                Universal.Idioma("Discharge Values" , "Valores de Caudal")  };

                                xAxisLabel = new ArrayList { Universal.Idioma("Discharge ", "Caudal ") + (english ? "(ft3/s)" : "(m3/s)"), "", "", };

                                yAxisLabel = new ArrayList {Universal.Idioma("Water Elevation " , "Cota de Agua ")  + (english ? "(ft)" : "(m)"),
                                                                                       Universal.Idioma( "Water Elevation ", "Cota de Agua ")   + (english ? "(ft)" : "(m)"),
                                                                                       Universal.Idioma( "Discharge " , "Caudal ")   + (english? "(ft3/s)" : "(m3/s)") };


                                break;

                            case "26":
                                grapher.SetWindowAndPlotTitles(Universal.Idioma("Water Discharge/Sedim. Discharge", "Caudal de Agua/Caudal de Sedimentos"));
                                grapher.SetAxisNameX(Universal.Idioma("Time (hr)", "Tiempo (hr)"));
                                grapher.SetAxisNameY(dataOBCPSeries.Columns[2].HeaderText);
                                grapher.SetYAxisChangeOnDataChange(true);

                                grapher.SetStatusX("X:");
                                grapher.SetStatusY("Y:");


                                graphToDisplay = new ArrayList { Universal.Idioma("Discharge vs Time", "Caudal vs Tiempo") };
                                yAxisLabel = new ArrayList { Universal.Idioma("Discharge ", "Caudal ") + (english ? " (ft3/s)" : " (m3/s)") };
                                xAxisLabel = new ArrayList { Universal.Idioma("Time (hr)", "Tiempo (hr)") };

                                if (seriesB.Count != 0)
                                {
                                    graphToDisplay.Add("Solid Dis. 1");
                                    yAxisLabel.Add("Solid Dis. 1" + (english ? " (ft3/s)" : " (m3/s)"));
                                    xAxisLabel.Add(Universal.Idioma("Time (hr)", "Tiempo (hr)"));
                                }

                                if (seriesC.Count != 0)
                                {
                                    graphToDisplay.Add("Solid Dis. 2");
                                    yAxisLabel.Add("Solid Dis. 2" + (english ? " (ft3/s)" : " (m3/s)"));
                                    xAxisLabel.Add(Universal.Idioma("Time (hr)", "Tiempo (hr)"));
                                }


                                if (seriesD.Count != 0)
                                {
                                    graphToDisplay.Add("Solid Dis. 3");
                                    yAxisLabel.Add("Solid Dis. 3" + (english ? " (ft3/s)" : " (m3/s)"));
                                    xAxisLabel.Add(Universal.Idioma("Time (hr)", "Tiempo (hr)"));
                                }

                                if (seriesE.Count != 0)
                                {
                                    graphToDisplay.Add("Solid Dis. 4");
                                    yAxisLabel.Add("Solid Dis. 4" + (english ? " (ft3/s)" : " (m3/s)"));
                                    xAxisLabel.Add(Universal.Idioma("Time (hr)", "Tiempo (hr)"));
                                }

                                if (seriesF.Count != 0)
                                {
                                    graphToDisplay.Add("Solid Dis. 5");
                                    yAxisLabel.Add("Solid Dis. 5" + (english ? " (ft3/s)" : " (m3/s)"));
                                    xAxisLabel.Add(Universal.Idioma("Time (hr)", "Tiempo (hr)"));
                                }

                                if (seriesG.Count != 0)
                                {
                                    graphToDisplay.Add("Solid Dis. 6");
                                    yAxisLabel.Add("Solid Dis. 6" + (english ? " (ft3/s)" : " (m3/s)"));
                                    xAxisLabel.Add(Universal.Idioma("Time (hr)", "Tiempo (hr)"));
                                }

                                if (seriesH.Count != 0)
                                {
                                    graphToDisplay.Add("Solid Dis. 7");
                                    yAxisLabel.Add("Solid Dis. 7" + (english ? " (ft3/s)" : " (m3/s)"));
                                    xAxisLabel.Add(Universal.Idioma("Time (hr)", "Tiempo (hr)"));
                                }

                                if (seriesI.Count != 0)
                                {
                                    graphToDisplay.Add("Solid Dis. 8");
                                    yAxisLabel.Add("Solid Dis. 8" + (english ? " (ft3/s)" : " (m3/s)"));
                                    xAxisLabel.Add(Universal.Idioma("Time (hr)", "Tiempo (hr)"));
                                }

                                if (seriesJ.Count != 0)
                                {
                                    graphToDisplay.Add("Solid Dis. 9");
                                    yAxisLabel.Add("Solid Dis. 9 " + (english ? " (ft3/s)" : " (m3/s)"));
                                    xAxisLabel.Add(Universal.Idioma("Time (hr)", "Tiempo (hr)"));

                                }

                                if (seriesK.Count != 0)
                                {
                                    graphToDisplay.Add("Solid Dis. 10");
                                    yAxisLabel.Add("Solid Dis. 10" + (english ? " (ft3/s)" : " (m3/s)"));
                                    xAxisLabel.Add(Universal.Idioma("Time (hr)", "Tiempo (hr)"));
                                }

                                if (seriesL.Count != 0)
                                {
                                    graphToDisplay.Add("Solid Dis. 11");
                                    yAxisLabel.Add("Solid Dis. 11" + (english ? " (ft3/s)" : " (m3/s)"));
                                    xAxisLabel.Add(Universal.Idioma("Time (hr)", "Tiempo (hr)"));
                                }

                                //graphToDisplay = new ArrayList { dataOBCPSeries.Columns[2].HeaderText, dataOBCPSeries.Columns[3].HeaderText };
                                break;

                        }

                        grapher.SetDataNames(graphToDisplay);
                        grapher.SetDataXAxis(xAxisLabel);
                        grapher.SetDataYAxis(yAxisLabel);
                        grapher.ShowDialog();
                    }

                }
                else
                {
                    MessageBox.Show(Universal.Idioma("There is no data to plot.", "No hay datos para dibujar."),
                        "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                }

            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 0201160555: error trying to plot series. ", "ERROR 0201160555: error dibujando serie.") +
                    ex.Message + ".",
                    "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void btnSaveOBCP_Click(object sender, EventArgs e)
        {

        }

        private void btnOBCPSaveSeries_Click(object sender, EventArgs e)
        {
            SaveOBCPSeriesTable();
        }

        private void label1_Click_1(object sender, EventArgs e)
        {

        }

        private void dataOBCPSeries_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex < 0 || e.RowIndex < 0) return;

            string value = "0.0";
            try
            {
                value = dataOBCPSeries[e.ColumnIndex, e.RowIndex].Value.ToString();
            }
            catch (Exception)
            {
            }
            finally
            {
                dataOBCPSeries[e.ColumnIndex, e.RowIndex].Value = value;
                UpdateData(dataOBCPSeries);
                OBCPSeriesTableChanged = true;
            }
        }

        private void btnOBCPLoadSeries_Click(object sender, EventArgs e)
        {

            var openFileDialog = new OpenFileDialog
            {
                Filter = "Files (*.*)|*.*",
                InitialDirectory = _currentProjectPath,
                RestoreDirectory = true,
                CheckFileExists = true
            };

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                var fileinfo = new FileInfo(openFileDialog.FileName);
                if (fileinfo.Length > 1)
                {
                    var series = new List<string[]>();
                    bool exit = false;
                    StreamReader OBCPSeriesFile = File.OpenText(openFileDialog.FileName);
                    try
                    {

                        Cursor.Current = Cursors.WaitCursor;
                        int nValues = Convert.ToInt16(OBCPSeriesFile.ReadLine());
                        for (int j = 0; j < nValues; ++j)
                        {
                            string nextLine = OBCPSeriesFile.ReadLine();
                            string[] split = nextLine.Split(new[] { ' ', '\t' }, StringSplitOptions.RemoveEmptyEntries);

                            int length = split.Length;

                            string openBoundaryType = dataOBCP[1, dataOBCP.CurrentRow.Index].Value.ToString().Trim();
                            switch (openBoundaryType)
                            {
                                case "1":
                                //case "6":
                                case "9":
                                case "12":
                                    if (length != 2)
                                    {
                                        MessageBox.Show(Universal.Idioma("ERROR 0203160733: file is not in the correct format for this boundary type.", "ERROR 0203160733: archivo no está en el formato correcto para este tipo de condición de contorno."),
                                            "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                        exit = true;
                                    }
                                    break;

                                case "5":
                                    //case "26":
                                    if (length != 3)
                                    {
                                        MessageBox.Show(Universal.Idioma("ERROR 0203160734: file is not in the correct format for this boundary type.", "ERROR 0203160734: archivo no está en el formato correcto para este tipo de condición de contorno."),
                                            "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                        exit = true;
                                    }
                                    break;

                                case "10":
                                case "11":
                                    break;

                            }

                            if (exit) break;

                            var row = new string[split.Length + 1];
                            //row[0] = Convert.ToString(j + 1);

                            for (int i = 1; i < split.Length; i++)
                                row[i] = split[i - 1];

                            series.Add(row);
                        }

                        if (!exit)
                        {
                            _dataManager.Set("OBCP_SERIES_VALUES", series);
                            UpdateControl(dataOBCPSeries);
                            MessageBox.Show(Universal.Idioma("File " + openFileDialog.FileName + " was loaded.", "El archivo " + openFileDialog.FileName + " fue cargado."),
                                "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(Universal.Idioma("ERROR 0203160713: error trying to open file ", "ERROR 0203160713: error abriendo archivo ") +
                            openFileDialog.FileName + ". " + ex.Message,
                            "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    finally
                    {
                        OBCPSeriesFile.Close();
                        Cursor = Cursors.Default;
                    }

                }
                else
                    MessageBox.Show(Universal.Idioma("WARNING: file " + openFileDialog.FileName + " is empty.", "ADVERTENCIA: el archivo" + openFileDialog.FileName + " está vacío."),
                        "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }

        private void dataOBCP_CellEnter(object sender, DataGridViewCellEventArgs e)
        {
            //dataOBCP.Focus();
            // MessageBox.Show("Cell Enter "  + dataOBCP.CurrentRow.ToString());
        }

        private void dataOBCP_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)
        {
            //	dataOBCP.Focus();
            //	MessageBox.Show("begin edit " + dataOBCP.CurrentRow.ToString());
        }

        private void dataOBCP_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void dataPollutantTransportPlusSolutes_RowValidating(object sender, DataGridViewCellCancelEventArgs e)
        {

        }

        private void dataPollutantTransportPlusSolutes_CellEnter(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void dataPollutantTransportPlusSolutes_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void chckSuspendedSediment_CheckStateChanged(object sender, EventArgs e)
        {

        }

        private void txtOilSpillOnLandViscocity_TextChanged(object sender, EventArgs e)
        {

        }

        private void tabPageWind_Click(object sender, EventArgs e)
        {

        }

        private void dataRainfallEvaporation_MouseClick(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
            {
                int currentMouseOverRow = dataRainfallEvaporation.HitTest(e.X, e.Y).RowIndex;
                if (currentMouseOverRow >= 0)
                {
                    auxiliaryDataGridView = dataRainfallEvaporation;
                    auxiliaryFileName = _currentProjectPath + "\\" +
                                         dataRainfallEvaporationZones.Rows[dataRainfallEvaporationZones.CurrentCell.RowIndex].Cells[1].Value.ToString();
                    contextCutCopyPaste.Show(dataRainfallEvaporation, new Point(e.X, e.Y));
                }
            }
        }

        private void contextCutCopyPaste_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {
            if (e.ClickedItem.Text == "Cut")
            {
                CopySelectionToClipboard(auxiliaryDataGridView);
                foreach (DataGridViewRow row in auxiliaryDataGridView.SelectedRows)
                {
                    if (!row.IsNewRow)
                    {
                        DeleteRowFromSecondaryTable(row.Index);
                        auxiliaryDataGridView.Rows.Remove(row);
                    }
                }
            }
            //DeleteSelectedRows(Universal.aFunctionToDeleteRowFromDictionary, Universal.aDataGridView);
            //DeleteSelectedRows(DeleteRainEveporationRowFromDictionary, Universal.aDataGridView);
            else if (e.ClickedItem.Text == "Copy")
                CopySelectionToClipboard(auxiliaryDataGridView);
            else if (e.ClickedItem.Text == "Paste")
                PasteClipboardToTable(auxiliaryDataGridView);
        }

        //private void DeleteSelectedRows(Action <int> DeleteRowFromDictionary,  DataGridView dgv)
        //private void DeleteSelectedRows(Universal.aFunctionToDeleteRowFromDintionary DeleteRowFromDictionary, DataGridView dgv)
        //{
        //  CopySelectionToClipboard(dgv);
        //  foreach (DataGridViewRow row in dgv.SelectedRows)
        //  {
        //    if (!row.IsNewRow)
        //    {
        //      DeleteRowFromDictionary(row.Index);
        //      dgv.Rows.Remove(row);
        //    }     
        //  }
        //}

        private void CopySelectionToClipboard(DataGridView dgv)
        {
            DataObject dataObj = dgv.GetClipboardContent();
            if (dataObj != null)
                Clipboard.SetDataObject(dataObj);
        }

        private void PasteClipboardToTable(DataGridView dgv)
        {
            try
            {
                string s = Clipboard.GetText();
                string[] lines = s.Split('\n');

                int iRow = dgv.CurrentCell.RowIndex;
                int iCol = 0; //dgv.CurrentCell.ColumnIndex;
                DataGridViewCell oCell;
                //If clipboard has more rows than table (from current) add empty rows
                if (iRow + lines.Length > dgv.Rows.Count - 1)
                {
                    bool bFlag = false;
                    foreach (string sEmpty in lines)
                    {
                        if (sEmpty == "")
                        {
                            bFlag = true;

                        }
                    }

                    int iNewRows = iRow + lines.Length - dgv.Rows.Count;
                    if (iNewRows > 0)
                    {
                        if (bFlag)
                            dgv.Rows.Add(iNewRows);
                        else
                            dgv.Rows.Add(iNewRows + 1);
                    }
                    else
                        dgv.Rows.Add(iNewRows + 1);
                }

                //Paste all "lines"
                dgv.ClearSelection();
                foreach (string line in lines)
                {
                    if (iRow < dgv.RowCount && line.Length > 0)
                    {
                        string[] sCells = line.Split('\t');
                        for (int i = 0; i < sCells.GetLength(0); ++i)
                        {
                            if (iCol + i < dgv.ColumnCount)
                            { //Make oCell current row iRow and replace its value
                                oCell = dgv[iCol + i, iRow];
                                oCell.Value = Convert.ChangeType(sCells[i].Replace("\r", ""), oCell.ValueType);
                                dgv.Rows[iRow].Selected = true;
                            }
                            else
                            {
                                break;
                            }
                        }
                        iRow++;  //Move to next row
                    }
                    else
                    {
                        break;
                    }
                }
            }
            catch (FormatException)
            {
                MessageBox.Show(Universal.Idioma("The data you pasted is in the wrong format for the cell", "Los datos que se copiaron están en formato errado."));
                return;
            }
        }

        private void dataRainfallEvaporation_UserDeletingRow(object sender, DataGridViewRowCancelEventArgs e)
        {
            //When n rows are selected to delete, this event is executed n times, one for each row.
            DeleteRainEveporationRowFromDictionary(e.Row.Index);
        }

        private void DeleteCulvertRowFromDictionary(int rowToDelete)
        {
            //See which file name has the data. It will be used as index to locate the data in memory.
            string fileName = _currentProjectPath + "\\" +
                                     dataCulverts.Rows[dataCulverts.CurrentCell.RowIndex].Cells[2].Value.ToString();
            try
            {
                //See if CulvertValues (a dictionary) has the data for this culvertFilename
                if (Universal.CulvertValuesGroups.ContainsKey(fileName))
                {
                    //Make a pointer to the data of this culvert
                    Universal.CulvertValuesGroup dictionaryEntry = Universal.CulvertValuesGroups[fileName];
                    var tmpTable = new Universal.SecondaryTable[dictionaryEntry.Table.Length - 1];

                    //In tmpTable copy all the non-deleted rows
                    int j = 0;
                    for (int i = 0; i <= dictionaryEntry.Table.Length - 1; i++)
                    {
                        if (i != rowToDelete) //Do not copy the row to be deleted
                        {
                            tmpTable[j] = dictionaryEntry.Table[i];
                            j++;
                        }
                    }

                    //Change the rating table in aCulvert with rows that not were deleted
                    dictionaryEntry.Table = tmpTable;
                    dictionaryEntry.NPoints = tmpTable.Length;

                    Universal.CulvertValuesGroups[fileName] = dictionaryEntry;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 1206171625: error deleting row. ", "ERROR 1206171625: error eliminando fila. ") +
                    ex.Message + ".", "RiverFlow2D", MessageBoxButtons.OK,
                  MessageBoxIcon.Error);
            }
        }


        private void DeleteRainEveporationRowFromDictionary(int rowToDelete)
        {
            //See which file name has the data. It will be used as index to locate the data in memory.
            string fileName = _currentProjectPath + "\\" +
                                     dataRainfallEvaporationZones.Rows[dataRainfallEvaporationZones.CurrentCell.RowIndex].Cells[1].Value.ToString();
            try
            {
                //See if RainValues (a dictionary) has the data for this rainfallFilename
                if (Universal.SecondaryGroups.ContainsKey(fileName))
                {
                    //Make a pointer to the data of this rainfall in memory
                    Universal.SecondaryGroup dictionaryEntry = Universal.SecondaryGroups[fileName];
                    var tmpTable = new Universal.SecondaryTable[dictionaryEntry.Table.Length - 1];

                    //Copy in tmpTable all the non-deleted rows.
                    int j = 0;
                    for (int i = 0; i <= dictionaryEntry.Table.Length - 1; i++)
                    {
                        if (i != rowToDelete) //Do not copy the row to be deleted
                        {
                            tmpTable[j] = dictionaryEntry.Table[i];
                            j++;
                        }
                    }

                    //Change the table in aRainFall with rows that were not deleted
                    dictionaryEntry.Table = tmpTable;
                    dictionaryEntry.NPoints = tmpTable.Length;

                    Universal.SecondaryGroups[fileName] = dictionaryEntry;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 1704171048: error deleting row. ", "ERROR 1704171048: error eliminando fila. ") +
                    ex.Message + ".", "RiverFlow2D", MessageBoxButtons.OK,
                  MessageBoxIcon.Error);
            }
        }

        private void DeleteSourcesSeriesRowFromDictionary(int rowToDelete)
        {
            //See which file name has the data. It will be used as index to locate the data in memory.
            string fileName = _currentProjectPath + "\\" +
                                     dataSourcesAndSinks.Rows[dataSourcesAndSinks.CurrentCell.RowIndex].Cells[2].Value.ToString();
            try
            {
                //See if RainValues (a dictionary) has the data for this rainfallFilename
                if (Universal.SecondaryGroups.ContainsKey(fileName))
                {
                    //Make a pointer to the data of this rainfall in memory
                    Universal.SecondaryGroup dictionaryEntry = Universal.SecondaryGroups[fileName];
                    var tmpTable = new Universal.SecondaryTable[dictionaryEntry.Table.Length - 1];

                    //Copy in tmpTable all the non-deleted rows.
                    int j = 0;
                    for (int i = 0; i <= dictionaryEntry.Table.Length - 1; i++)
                    {
                        if (i != rowToDelete) //Do not copy the row to be deleted
                        {
                            tmpTable[j] = dictionaryEntry.Table[i];
                            j++;
                        }
                    }

                    //Change the table in aRainFall with rows that were not deleted
                    dictionaryEntry.Table = tmpTable;
                    dictionaryEntry.NPoints = tmpTable.Length;

                    Universal.SecondaryGroups[fileName] = dictionaryEntry;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 0308171531: error deleting row. ", "ERROR 0308171531: error eliminando fila. ") +
                    ex.Message + ".", "RiverFlow2D", MessageBoxButtons.OK,
                  MessageBoxIcon.Error);
            }
        }
        private void DeleteRowFromSecondaryTable(int rowToDelete)
        {
            //See which file name has the data. It will be used as index to locate the data in memory.
            //string fileName = _currentProjectPath + "\\" +
            //                         dataRainfallEvaporationZones.Rows[dataRainfallEvaporationZones.CurrentCell.RowIndex].Cells[1].Value.ToString();
            try
            {
                //See if RainValues (a dictionary) has the data for this rainfallFilename
                if (Universal.SecondaryGroups.ContainsKey(auxiliaryFileName))
                {
                    //Make a pointer to the data of this rainfall in memory
                    Universal.SecondaryGroup dictionaryEntry = Universal.SecondaryGroups[auxiliaryFileName];
                    var tmpTable = new Universal.SecondaryTable[dictionaryEntry.Table.Length - 1];

                    //Copy in tmpTable all the non-deleted rows.
                    int j = 0;
                    for (int i = 0; i <= dictionaryEntry.Table.Length - 1; i++)
                    {
                        if (i != rowToDelete) //Do not copy the row to be deleted
                        {
                            tmpTable[j] = dictionaryEntry.Table[i];
                            j++;
                        }
                    }

                    //Change the table in aRainFall with rows that were not deleted
                    dictionaryEntry.Table = tmpTable;
                    dictionaryEntry.NPoints = tmpTable.Length;

                    Universal.SecondaryGroups[auxiliaryFileName] = dictionaryEntry;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 1704171048: error deleting row. ", "ERROR 1704171048: error eliminando fila. ") +
                    ex.Message + ".", "RiverFlow2D", MessageBoxButtons.OK,
                  MessageBoxIcon.Error);
            }
        }
        private void DeleteBridgeGeometryRowFromDictionary(int rowToDelete)
        {
            //See which bridge file name has the data. It will be used as index to locate the data in memory.
            string fileName = _currentProjectPath + "\\" +
                                     dataBridges.Rows[dataBridges.CurrentCell.RowIndex].Cells[1].Value.ToString();
            try
            {
                //See if BridgeGeometryFiles (a dictionary) has the data for this fileName
                if (Universal.SecondaryGroups.ContainsKey(fileName))
                {
                    //Make a pointer to the data of this bridge geometry in memory
                    Universal.SecondaryGroup dictionaryEntry = Universal.SecondaryGroups[fileName];
                    var tmpTable = new Universal.SecondaryTable[dictionaryEntry.Table.Length - 1];

                    //Copy in tmpTable all the non-deleted rows.
                    int j = 0;
                    for (int i = 0; i <= dictionaryEntry.Table.Length - 1; i++)
                    {
                        if (i != rowToDelete) //Do not copy the row to be deleted
                        {
                            tmpTable[j] = dictionaryEntry.Table[i];
                            j++;
                        }
                    }

                    //Change the table in aRainFall with rows that were not deleted
                    dictionaryEntry.Table = tmpTable;
                    dictionaryEntry.NPoints = tmpTable.Length;

                    Universal.SecondaryGroups[fileName] = dictionaryEntry;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 3004171055: error deleting row. ", "ERROR 3004171055: error eliminando fila. ") +
                    ex.Message + ".", "RiverFlow2D", MessageBoxButtons.OK,
                  MessageBoxIcon.Error);
            }
        }

        private void DeleteGateOpeningsRowFromDictionary(int rowToDelete)
        {
            //See which file name has the data. It will be used as index to locate the data in memory.
            string fileName = _currentProjectPath + "\\" +
                                     dataGates.Rows[dataGates.CurrentCell.RowIndex].Cells[4].Value.ToString();
            try
            {
                //See if SecondaryGroups (a dictionary) has the data for this fileName.
                if (Universal.SecondaryGroups.ContainsKey(fileName))
                {
                    //Make temporary table to copy the data of this group (without the deleted row).
                    Universal.SecondaryGroup dictionaryEntry = Universal.SecondaryGroups[fileName];
                    var tmpTable = new Universal.SecondaryTable[dictionaryEntry.Table.Length - 1];

                    //Copty in tmpTable all the non-deleted rows:
                    int j = 0;
                    for (int i = 0; i <= dictionaryEntry.Table.Length - 1; i++)
                    {
                        if (i != rowToDelete) //Do not copy the row to be deleted
                        {
                            tmpTable[j] = dictionaryEntry.Table[i];
                            j++;
                        }
                    }

                    //Change the table in SecondaryGropus with row that not was deleted:
                    dictionaryEntry.Table = tmpTable;
                    dictionaryEntry.NPoints = tmpTable.Length;

                    Universal.SecondaryGroups[fileName] = dictionaryEntry;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 1311120929: error deleting row. ", "ERROR 1311120929: error eliminando fila. ") +
                    ex.Message + ".", "RiverFlow2D", MessageBoxButtons.OK,
                  MessageBoxIcon.Error);
            }

        }


        private void DeleteTemporalEvolutionRowFromDictionary(int rowToDelete)
        {
            //See which file name has the data. It will be used as index to locate the data in memory.
            string fileName = _currentProjectPath + "\\" +
                                     dataDamBreach.Rows[dataDamBreach.CurrentCell.RowIndex].Cells[6].Value.ToString();
            try
            {
                //See if SecondaryGroups (a dictionary) has the data for this fileName.
                if (Universal.SecondaryGroups.ContainsKey(fileName))
                {
                    //Make temporary table to copy the data of this group (without the deleted row).
                    Universal.SecondaryGroup dictionaryEntry = Universal.SecondaryGroups[fileName];
                    var tmpTable = new Universal.SecondaryTable[dictionaryEntry.Table.Length - 1];

                    //Copy in tmpTable all the non-deleted rows:
                    int j = 0;
                    for (int i = 0; i <= dictionaryEntry.Table.Length - 1; i++)
                    {
                        if (i != rowToDelete) //Do not copy the row to be deleted
                        {
                            tmpTable[j] = dictionaryEntry.Table[i];
                            j++;
                        }
                    }

                    //Change the table in SecondaryGropus with row that not was deleted:
                    dictionaryEntry.Table = tmpTable;
                    dictionaryEntry.NPoints = tmpTable.Length;

                    Universal.SecondaryGroups[fileName] = dictionaryEntry;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 1206171617: error deleting row. ", "ERROR 1206171617: error eliminando fila. ") +
                    ex.Message + ".", "RiverFlow2D", MessageBoxButtons.OK,
                  MessageBoxIcon.Error);
            }

        }

        //private void DeleteRowFromDictionary(string fileNameIndex, int rowToDelete)
        //{
        //  try
        //  {
        //    //See if SecondaryGroups (a dictionary) has the data for this fileNameIndex.
        //    if (Universal.SecondaryGroups.ContainsKey(fileNameIndex))
        //    {
        //      //Make temporary table to copy the data of this group (without the deleted row).
        //      Universal.SecondaryGroup dictionaryEntry = Universal.SecondaryGroups[fileNameIndex];
        //      var tmpTable = new Universal.ExtraData[dictionaryEntry.Table.Length - 1];

        //      //Copty in tmpTable all the non-deleted rows:
        //      int j = 0;
        //      for (int newCol = 0; newCol <= dictionaryEntry.Table.Length - 1; newCol++)
        //      {
        //        if (newCol != rowToDelete) //Do not copy the row to be deleted
        //        {
        //          tmpTable[j] = dictionaryEntry.Table[newCol];
        //          j++;
        //        }
        //      }

        //      //Change the table in SecondaryGropus with row that not was deleted:
        //      dictionaryEntry.Table = tmpTable;
        //      dictionaryEntry.NPoints = tmpTable.Length;

        //      Universal.SecondaryGroups[fileNameIndex] = dictionaryEntry;
        //    }
        //  }
        //  catch (Exception ex)
        //  {
        //    MessageBox.Show(Universal.Idioma("ERROR 0605171837: error deleting row. " + ex.Message + ".", "RiverFlow2D", MessageBoxButtons.OK,
        //      MessageBoxIcon.Error);
        //  }

        //}

        private void DeleteWindRowFromDictionary(int rowToDelete)
        {
            //See which file name has the data. It will be used as index to locate the data in memory.
            string fileName = _currentProjectPath + "\\" +
                                     dataWindPlusZones.Rows[dataWindPlusZones.CurrentCell.RowIndex].Cells[1].Value.ToString();
            try
            {
                //See if SecondaryGroups (a dictionary) has the data for this rainfallFilename
                if (Universal.SecondaryGroups.ContainsKey(fileName))
                {
                    //Make a pointer to the data of this wind in memory
                    Universal.SecondaryGroup dictionaryEntry = Universal.SecondaryGroups[fileName];
                    var tmpTable = new Universal.SecondaryTable[dictionaryEntry.Table.Length - 1];

                    //Copy in tmpTable all the non-deleted rows.
                    int j = 0;
                    for (int i = 0; i <= dictionaryEntry.Table.Length - 1; i++)
                    {
                        if (i != rowToDelete) //Do not copy the row to be deleted
                        {
                            tmpTable[j] = dictionaryEntry.Table[i];
                            j++;
                        }
                    }

                    //Change the table in dictionaryEntry with rows that were not deleted
                    dictionaryEntry.Table = tmpTable;
                    dictionaryEntry.NPoints = tmpTable.Length;

                    Universal.SecondaryGroups[fileName] = dictionaryEntry;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(Universal.Idioma("ERROR 2904171932: error deleting row. ", "ERROR 2904171932: error eliminando fila. ") +
                    ex.Message + ".", "RiverFlow2D", MessageBoxButtons.OK,
                  MessageBoxIcon.Error);
            }
        }


        private void dataCulvertRatingTable_MouseClick(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
            {
                int currentMouseOverRow = dataCulvertRatingTable.HitTest(e.X, e.Y).RowIndex;
                if (currentMouseOverRow >= 0)
                {
                    auxiliaryDataGridView = dataCulvertRatingTable;
                    auxiliaryFileName = _currentProjectPath + "\\" +
                                   dataCulverts.Rows[dataCulverts.CurrentCell.RowIndex].Cells[2].Value.ToString();
                    contextCutCopyPaste.Show(dataCulvertRatingTable, new Point(e.X, e.Y));
                }
            }
        }

        private void dataGateOpenings_UserDeletingRow(object sender, DataGridViewRowCancelEventArgs e)
        {
            //When n rows are selected to delete, this event is executed n times, one for each row.
            DeleteGateOpeningsRowFromDictionary(e.Row.Index);
        }

        private void dataWindPlusVelocities_KeyPress(object sender, KeyPressEventArgs e)
        {
            //check if pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
            {
                if (dataWindPlusVelocities.EditingControl.Text.Contains("."))
                    e.Handled = true;
                else
                    e.Handled = false;
            }
            else if (e.KeyChar == (int)Keys.Delete)
                e.Handled = true;
            else
                e.Handled = false;
        }

        private void dataWindPlusVelocities_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            var textBox = e.Control as DataGridViewTextBoxEditingControl;
            textBox.KeyPress -= new KeyPressEventHandler(dataWindPlusVelocities_KeyPress);
            textBox.KeyPress += new KeyPressEventHandler(dataWindPlusVelocities_KeyPress);
        }

        private void dataGateOpenings_MouseClick(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
            {
                int currentMouseOverRow = dataGateOpenings.HitTest(e.X, e.Y).RowIndex;
                if (currentMouseOverRow >= 0)
                {
                    auxiliaryDataGridView = dataGateOpenings;
                    auxiliaryFileName = _currentProjectPath + "\\" +
                                         dataGates.Rows[dataGates.CurrentCell.RowIndex].Cells[4].Value.ToString();
                    contextCutCopyPaste.Show(dataGateOpenings, new Point(e.X, e.Y));
                }
            }
        }

        private void dataWindPlusVelocities_MouseClick(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
            {
                int currentMouseOverRow = dataWindPlusVelocities.HitTest(e.X, e.Y).RowIndex;
                if (currentMouseOverRow >= 0)
                {
                    auxiliaryDataGridView = dataWindPlusVelocities;
                    auxiliaryFileName = _currentProjectPath + "\\" +
                                         dataWindPlusZones.Rows[dataWindPlusZones.CurrentCell.RowIndex].Cells[1].Value.ToString();
                    contextCutCopyPaste.Show(dataWindPlusVelocities, new Point(e.X, e.Y));
                }
            }
        }

        private void dataWindPlusVelocities_UserDeletingRow(object sender, DataGridViewRowCancelEventArgs e)
        {
            //When n rows are selected to delete, this event is executed n times, one for each row.
            DeleteWindRowFromDictionary(e.Row.Index);
        }

        private void dataWindPlusVelocities_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Control && e.KeyCode == Keys.C)
            {//Copy to clipboard
                CopySelectionToClipboard(dataWindPlusVelocities);
            }

            else if (e.Control && e.KeyCode == Keys.V)
            {//Paste from clipboard
                PasteClipboardToTable(dataWindPlusVelocities);
            }

            else if (e.KeyCode == Keys.Delete)
            {
            }
        }

        private void dataBridgeGeometry_MouseDown(object sender, MouseEventArgs e)
        {

        }

        private void dataBridgeGeometry_UserDeletingRow(object sender, DataGridViewRowCancelEventArgs e)
        {
            //When n rows are selected to delete, this event is executed n times, one for each row.
            DeleteBridgeGeometryRowFromDictionary(e.Row.Index);
        }

        private void chckDamBridge_CheckedChanged(object sender, EventArgs e)
        {
            //Enable or disable all elements of panel.

            //Get number of elements in tabPage than contains all elements of panel:
            int size = tabPageDamBreach.Controls.Count;

            for (int i = 0; i < size; ++i)
            {
                tabPageDamBreach.Controls[i].Enabled = chckDamBreach.Checked;
                RemoveError(tabPageDamBreach.Controls[i]);

                if (tabPageDamBreach.Controls[i] is Panel)
                {
                    int sizePanel = tabPageDamBreach.Controls[i].Controls.Count;

                    for (int j = 0; j < sizePanel; ++j)
                    {
                        tabPageDamBreach.Controls[i].Controls[j].Enabled = chckDamBreach.Checked;
                        RemoveError(tabPageDamBreach.Controls[i].Controls[j]);
                    }
                }
            }
        }

        private void btnOpenDamBreach_Click(object sender, EventArgs e)
        {
            var openFileDialog = new OpenFileDialog
            {
                Filter = "DAMBREACH files (*.DAMBREACH)|*.DAMBREACH",
                InitialDirectory = _currentProjectPath,
                FileName = _currentProjectName + ".DAMBREACH",
                FilterIndex = 1,
                RestoreDirectory = true,
                CheckFileExists = true
            };

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                var fileinfo = new FileInfo(openFileDialog.FileName);
                if (fileinfo.Length > 1)
                {
                    try
                    {
                        _dataManager.LoadDamBreachFromFile(openFileDialog.FileName);
                        UpdateWithDAMBREACHFile();
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(Universal.Idioma("ERROR 1206171139: error trying to open file ", "ERROR 1206171139: error abriendo archivo ") +
                            openFileDialog.FileName + ". " + ex.Message,
                          "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
                else
                    MessageBox.Show(Universal.Idioma("WARNING: file " + openFileDialog.FileName + " is empty.", "ADVERTENCIA: el archivo" + openFileDialog.FileName + " está vacío."),
                        "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }

        private void dataDamBreach_RowEnter(object sender, DataGridViewCellEventArgs e)
        {
            Universal.EnableTextChangedEvent = false;

            //From primary table, get file name of secondary table:
            string fileName = _currentProjectPath + "\\" + dataDamBreach.Rows[e.RowIndex].Cells[6].Value;
            //Update text above secundary table:
            lblDamBreachFileName.Text = dataDamBreach.Rows[e.RowIndex].Cells[6].Value.ToString();
            //Read seccondary data and load secondary table:
            ShowSecondaryGroup(dataDamBreachTemporalEvolution, fileName);

            Universal.EnableTextChangedEvent = true;

        }

        private void chckDamBridge_Validated(object sender, EventArgs e)
        {
            UpdateData(chckDamBreach);
        }

        private void btnSaveDamBreach_Click(object sender, EventArgs e)
        {
            if (dataDamBreach.Rows.Count >= 1) //Check for at least one row (1 when not allow to add/delete rows) 
            {
                var saveFileDialog = new SaveFileDialog
                {
                    Filter = "DAMBREACH files (*.DAMBREACH)|*.DAMBREACH",
                    InitialDirectory = _currentProjectPath,
                    FileName = _currentProjectName + ".DAMBREACH",
                    FilterIndex = 1,
                    RestoreDirectory = true
                };

                try
                {
                    if (saveFileDialog.ShowDialog() == DialogResult.OK)
                        _dataManager.SaveDamBreachToFile(saveFileDialog.FileName);
                }
                catch
                {
                    MessageBox.Show(Universal.Idioma("ERROR 1206171451: error trying to save .DAMBREACH file.", "ERROR 1206171451: error almacenando archivo .DAMBREACH."),
                        "RiverFlow2D", MessageBoxButtons.OK,
                      MessageBoxIcon.Error);
                }
            }
            else
            {
                MessageBox.Show(Universal.Idioma("The dam breach table is empty. It was not saved.", "La tabla de brechas en presas está vacía. No fue almacenada."), 
                    "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void dataDamBreachTemporalEvolution_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex >= 0 && e.RowIndex >= 0)
                if (Universal.EnableTextChangedEvent)
                {
                    //From primary table get file name of secondary data. To be use as an index to 
                    //the secondary data stored in memory structure:
                    int row = dataDamBreach.CurrentCell.RowIndex;
                    string fileName = _currentProjectPath + "\\" + dataDamBreach.Rows[row].Cells[6].Value.ToString();

                    //New value of cell:
                    var val = (string)dataDamBreachTemporalEvolution.Rows[e.RowIndex].Cells[e.ColumnIndex].Value;

                    UpdateIndividualCellValueInSecondaryTableStructure(fileName, val, e);

                }
        }

        private void dataDamBreachTemporalEvolution_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            var textbox = e.Control as DataGridViewTextBoxEditingControl;
            textbox.KeyPress -= new KeyPressEventHandler(dataDamBreachTemporalEvolution_KeyPress);
            textbox.KeyPress += new KeyPressEventHandler(dataDamBreachTemporalEvolution_KeyPress);
        }

        private void dataDamBreachTemporalEvolution_KeyPress(object sender, KeyPressEventArgs e)
        {
            //check if pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
            {
                if (dataDamBreachTemporalEvolution.EditingControl.Text.Contains("."))
                    e.Handled = true;
                else
                    e.Handled = false;
            }
            else
                e.Handled = false;
        }

        private void dataDamBreachTemporalEvolution_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Insert)
            {
                dataDamBreachTemporalEvolution.Rows.Insert(dataDamBreachTemporalEvolution.CurrentRow.Index);
            }
        }

        private void dataDamBreachTemporalEvolution_MouseClick(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
            {
                int currentMouseOverRow = dataDamBreachTemporalEvolution.HitTest(e.X, e.Y).RowIndex;
                if (currentMouseOverRow >= 0)
                {
                    auxiliaryDataGridView = dataDamBreachTemporalEvolution;
                    auxiliaryFileName = _currentProjectPath + "\\" +
                                         dataDamBreach.Rows[dataDamBreach.CurrentCell.RowIndex].Cells[6].Value.ToString();
                    contextCutCopyPaste.Show(dataDamBreachTemporalEvolution, new Point(e.X, e.Y));
                }
            }
        }

        private void dataDamBreachTemporalEvolution_UserDeletingRow(object sender, DataGridViewRowCancelEventArgs e)
        {
            //When n rows are selected to delete, this event is executed n times, one for each row.
            DeleteTemporalEvolutionRowFromDictionary(e.Row.Index);
        }

        private void dataDamBreach_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex < 0 || e.RowIndex < 0) return;

            string value = "0.0";
            try
            {
                value = Convert.ToDouble(dataDamBreach[e.ColumnIndex, e.RowIndex].Value).ToString("N2");
            }
            catch (Exception)
            {
            }
            finally
            {
                dataDamBreach[e.ColumnIndex, e.RowIndex].Value = value;
                UpdateData(dataDamBreach);
            }
        }

        private void dataDamBreach_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Insert)
            {
                dataDamBreach.Rows.Insert(dataDamBreach.CurrentRow.Index);
                //colorRepeats(dataDamBreach);
            }
        }

        private void dataDamBreach_RowsAdded(object sender, DataGridViewRowsAddedEventArgs e)
        {
            if (!_updating) UpdateData(dataDamBreach);

        }

        private void dataDamBreach_RowsRemoved(object sender, DataGridViewRowsRemovedEventArgs e)
        {
            if (!_updating) UpdateData(dataDamBreach);

        }

        private void picParallelHelp_MouseClick(object sender, MouseEventArgs e)
        {


            MessageBox.Show("Number of physical processors: " + _numberOfPhysicalProcessors.ToString() + Environment.NewLine +
                            "Number of logical processors: " + _numberOfLogicalProcessors.ToString() + Environment.NewLine +
                            "Number of logical processors (b): " + _numberOfLogicalProcessors2.ToString() + Environment.NewLine +
                            "____________________________________" + Environment.NewLine +
                            graphicCards +
                            "____________________________________" + Environment.NewLine +
                            graphicCards_B +
                            "____________________________________" + Environment.NewLine +
                            graphicCards_C +
                            "____________________________________" + Environment.NewLine +
                            graphicCards_D +
                            "____________________________________" + Environment.NewLine +
                            graphicCards_E

                            ,

                            "Processors and Graphic Cards", MessageBoxButtons.OK
                              );
        }

        private void comboParallelComputing_SelectedIndexChanged(object sender, EventArgs e)
        {
            WriteDeviceSelected();
        }

        private void dataRainfallEvaporationZones_SelectionChanged(object sender, EventArgs e)
        {

        }

        private void dataSourcesAndSinks_RowEnter(object sender, DataGridViewCellEventArgs e)
        {

            try
            {
                //From primary table, get file name of secondary table:
                string fileName = _currentProjectPath + "\\" + dataSourcesAndSinks.Rows[e.RowIndex].Cells[2].Value;

                //How many additional columns are there in the SOURCES secondary group:
                int nCurrentVisibleColumns = Universal.VisibleColumnsInSecondaryGroup(fileName);

                int nMissingColumns = NewSourcesColumns(e.RowIndex, nCurrentVisibleColumns - 2);

                if (nMissingColumns > 0)
                {
                    //MessageBox.Show(nMissingColumns.ToString() + " columns to add");
                    AddColumnsToSecondaryTableStructure(fileName, nCurrentVisibleColumns, nMissingColumns);

                }
                else if (nMissingColumns < 0)
                {
                    //MessageBox.Show(nMissingColumns.ToString() + " columns to remove");
                    RemoveColumnsFromSecondaryTableStructure(fileName, nCurrentVisibleColumns, -nMissingColumns);
                }
                string C0units;
                string C1units;
                if (Universal.RiverUnits == "Metric")
                {
                    C0units = "m";
                    C1units = "m3/s";
                }

                else
                {
                    C0units = "ft";
                    C1units = "ft3/s";
                }

                //From primary table, get type of secondary table and set headers: 
                string sourceType = dataSourcesAndSinks.Rows[e.RowIndex].Cells[1].Value.ToString();
                if (sourceType.Trim() == "1")
                    dataSOURCESSeries.Columns[0].HeaderText = Universal.Idioma("Time (hrs)", "Tiempo (hrs)");
                else
                    dataSOURCESSeries.Columns[0].HeaderText = Universal.Idioma("Depth (" + C0units + ")", "Profundidad (" + C0units + ")");

                dataSOURCESSeries.Columns[1].HeaderText = "Q (" + C1units + ")";

                //Make visible significant columns in secondary table:
                for (int i = 0; i < dataSOURCESSeries.ColumnCount; i++)
                    if (i < nMissingColumns + nCurrentVisibleColumns)
                        dataSOURCESSeries.Columns[i].Visible = true;
                    else
                        dataSOURCESSeries.Columns[i].Visible = false;

                Universal.EnableTextChangedEvent = false;

                //From primary table, get file name of secondary table:
                //string fileName = _currentProjectPath + "\\" + dataSourcesAndSinks.Rows[e.RowIndex].Cells[1].Value;
                //Update text above secundary table:
                lblSourcesFileName.Text = dataSourcesAndSinks.Rows[e.RowIndex].Cells[2].Value.ToString();
                //Read secondary data and load secondary table:
                ShowSecondaryGroup(dataSOURCESSeries, fileName);

                Universal.EnableTextChangedEvent = true;
            }
            catch
            {
                //Don't know what to do here! But at least stops the program from crashing!
            }
        }

        private void dataSOURCESSeries_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex >= 0 && e.RowIndex >= 0)
                if (Universal.EnableTextChangedEvent)
                {
                    //Get file name of secondary data. To be use as an index to the secondary data stored in memory structure:
                    int row = dataSourcesAndSinks.CurrentCell.RowIndex;
                    string fileName = _currentProjectPath + "\\" + dataSourcesAndSinks.Rows[row].Cells[2].Value.ToString();

                    //New value of cell:
                    var val = (string)dataSOURCESSeries.Rows[e.RowIndex].Cells[e.ColumnIndex].Value;

                    UpdateIndividualCellValueInSecondaryTableStructure(fileName, val, e);

                }
        }

        private void dataCulvertRatingTable_KeyDown_1(object sender, KeyEventArgs e)
        {
            if (e.Control && e.KeyCode == Keys.C)
            {//Copy to clipboard
                CopySelectionToClipboard(dataCulvertRatingTable);
            }

            else if (e.Control && e.KeyCode == Keys.V)
            {//Paste from clipboard
                PasteClipboardToTable(dataCulvertRatingTable);
            }

            else if (e.KeyCode == Keys.Delete)
            {
            }
        }

        private void dataSOURCESSeries_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            var textBox = e.Control as DataGridViewTextBoxEditingControl;
            textBox.KeyPress -= new KeyPressEventHandler(dataSOURCESSeries_KeyPress);
            textBox.KeyPress += new KeyPressEventHandler(dataSOURCESSeries_KeyPress);
        }

        private void dataSOURCESSeries_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Control && e.KeyCode == Keys.C)
            {//Copy to clipboard
                CopySelectionToClipboard(dataSOURCESSeries);
            }

            else if (e.Control && e.KeyCode == Keys.V)
            {//Paste from clipboard
                PasteClipboardToTable(dataSOURCESSeries);
            }

            else if (e.KeyCode == Keys.Delete)
            {
            }
        }

        private void dataSOURCESSeries_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
            {
                if (dataSOURCESSeries.EditingControl.Text.Contains("."))
                    e.Handled = true;
                else
                    e.Handled = false;
            }
            else if (e.KeyChar == (int)Keys.Delete)
                e.Handled = true;
            else
                e.Handled = false;
        }

        private void dataSOURCESSeries_MouseClick(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
            {
                int currentMouseOverRow = dataSOURCESSeries.HitTest(e.X, e.Y).RowIndex;
                if (currentMouseOverRow >= 0)
                {
                    auxiliaryDataGridView = dataSOURCESSeries;
                    auxiliaryFileName = _currentProjectPath + "\\" +
                                         dataSourcesAndSinks.Rows[dataSourcesAndSinks.CurrentCell.RowIndex].Cells[2].Value.ToString();
                    contextCutCopyPaste.Show(dataSOURCESSeries, new Point(e.X, e.Y));
                }
            }
        }

        private void dataSOURCESSeries_UserDeletingRow(object sender, DataGridViewRowCancelEventArgs e)
        {
            //When n rows are selected to delete, this event is executed n times, one for each row.
            DeleteSourcesSeriesRowFromDictionary(e.Row.Index);
        }

        private void btnSaveSourcesSeries_Click(object sender, EventArgs e)
        {
            SaveSOURCESSeriesTable(lblSourcesFileName.Text.Trim());
        }

        private void dataSOURCESSeries_EditingControlShowing_1(object sender, DataGridViewEditingControlShowingEventArgs e)
        {

        }

        private void tabOptions_KeyDown(object sender, KeyEventArgs e)
        {

        }

        private void btnRainFallCatalogue_Click(object sender, EventArgs e)
        {
            double[] x;
            double[] y;
            double[,] rain;

            var rainfallCatalogue = new OpenFileDialog
            {
                Filter = "RFC files (*.RFC)|*.RFC",
                InitialDirectory = _currentProjectPath,
                FileName = _currentProjectName + ".RFC",
                FilterIndex = 1,
                RestoreDirectory = true,
                CheckFileExists = true
            };

            if (rainfallCatalogue.ShowDialog() == DialogResult.OK)
            {
                var fileinfo = new FileInfo(rainfallCatalogue.FileName);
                if (fileinfo.Length > 1)
                {
                    StreamReader catalogue = File.OpenText(rainfallCatalogue.FileName);
                    string path = Path.GetDirectoryName(rainfallCatalogue.FileName);

                    try
                    {
                        //Read number of files. Could be positive or negative. The sign 
                        //determines the format of the .LRAIN file (the number of coordinates writen):
                        //positive -> only one coordinate (center of cell), 
                        //negative -> 4 coordinates (4 vertices anticlockwise).
                        int numberOfASCIIFiles = Convert.ToInt32(catalogue.ReadLine());
                        double[] times = new double[Math.Abs(numberOfASCIIFiles)];

                        string line = catalogue.ReadLine();
                        string[] split = line.Split(new[] { ' ', '\t' }, StringSplitOptions.RemoveEmptyEntries);

                        string asciiFileName = split[1];

                        int nFiles = 0;
                        do
                        {
                            if (!File.Exists(path + "\\" + asciiFileName))
                            {
                                MessageBox.Show(Universal.Idioma("This file doesn't exist:" + "\n\n" + asciiFileName + "\n\n" + "in directory" + "\n\n" + path,
                                    "Este archivo no existe:" + "\n\n" + asciiFileName + "\n\n" + "en el directorio" + "\n\n" + path), 

                                     "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            times[nFiles] = Convert.ToDouble(split[0]);
                            nFiles++;

                            line = catalogue.ReadLine();
                            if (line != null)
                            {
                                split = line.Split(new[] { ' ', '\t' }, StringSplitOptions.RemoveEmptyEntries);

                                asciiFileName = split[1];
                            }
                        } while (line != null);

                        Cursor = Cursors.WaitCursor;

                        //Rewind to beginning of catalogue file:
                        catalogue.DiscardBufferedData();
                        catalogue.BaseStream.Position = 0;

                        numberOfASCIIFiles = Convert.ToInt32(catalogue.ReadLine());

                        line = catalogue.ReadLine();
                        split = line.Split(new[] { ' ', '\t' }, StringSplitOptions.RemoveEmptyEntries);
                        asciiFileName = split[1];

                        StreamReader firstASCIIFile = File.OpenText(path + "\\" + asciiFileName);

                        //From first file in catalogue read number of columns, rows, 
                        // origen of coordinates, cell size, and no data value. They must be 
                        // the same for all files in catalogue.
                        line = firstASCIIFile.ReadLine();
                        split = line.Split(new[] { ' ', '\t' }, StringSplitOptions.RemoveEmptyEntries);
                        int nCols = Convert.ToInt32(split[1]);
                        line = firstASCIIFile.ReadLine();
                        split = line.Split(new[] { ' ', '\t' }, StringSplitOptions.RemoveEmptyEntries);
                        int nRows = Convert.ToInt32(split[1]);
                        line = firstASCIIFile.ReadLine();
                        split = line.Split(new[] { ' ', '\t' }, StringSplitOptions.RemoveEmptyEntries);
                        double xllcorner = Convert.ToDouble(split[1]);
                        line = firstASCIIFile.ReadLine();
                        split = line.Split(new[] { ' ', '\t' }, StringSplitOptions.RemoveEmptyEntries);
                        double yllcorner = Convert.ToDouble(split[1]);
                        line = firstASCIIFile.ReadLine();
                        split = line.Split(new[] { ' ', '\t' }, StringSplitOptions.RemoveEmptyEntries);
                        double cellSize = Convert.ToDouble(split[1]);
                        line = firstASCIIFile.ReadLine();
                        split = line.Split(new[] { ' ', '\t' }, StringSplitOptions.RemoveEmptyEntries);
                        string noData = split[1];

                        firstASCIIFile.Close();

                        int nPoints = nRows * nCols;
                        x = new double[nPoints];
                        y = new double[nPoints];
                        rain = new double[nPoints, nFiles];

                        //Calculate coordinates (x, y):
                        int point = -1;
                        for (int row = 0; row < nRows; row++)
                        {
                            for (int col = 0; col < nCols; col++)
                            {
                                point++;
                                x[point] = xllcorner + col * cellSize + cellSize / 2;
                                y[point] = yllcorner + (nRows - row) * cellSize - cellSize / 2;
                            }
                        }

                        try
                        {
                            //Rewind to beginning of catalogue file:
                            catalogue.DiscardBufferedData();
                            catalogue.BaseStream.Position = 0;
                            int file = -1;
                            numberOfASCIIFiles = Convert.ToInt32(catalogue.ReadLine());
                            while (!catalogue.EndOfStream)
                            {

                                string catalogueLine = catalogue.ReadLine();
                                split = catalogueLine.Split(new[] { ' ', '\t' }, StringSplitOptions.RemoveEmptyEntries);
                                asciiFileName = split[1];

                                StreamReader asciiFile = File.OpenText(path + "\\" + asciiFileName);
                                file++;
                                //while (!asciiFile.EndOfStream)
                                {

                                    //Skip first 6 lines):
                                    string asciiLine;
                                    for (int i = 0; i < 6; i++)
                                        asciiLine = asciiFile.ReadLine();

                                    point = -1;
                                    for (int row = 0; row < nRows; row++)
                                    {
                                        //if (!asciiFile.EndOfStream)
                                        {
                                            //Read next row of nCols values
                                            asciiLine = asciiFile.ReadLine();
                                            split = asciiLine.Split(new[] { ' ', '\t' }, StringSplitOptions.RemoveEmptyEntries);
                                            for (int col = 0; col < nCols; col++)
                                            {
                                                //if (!asciiFile.EndOfStream)
                                                {
                                                    point++;
                                                    if (split[col] == noData)
                                                        rain[point, file] = -999;
                                                    else
                                                        rain[point, file] = Convert.ToDouble(split[col]);
                                                }
                                            }
                                        }

                                    }
                                }
                                asciiFile.Close();
                            }

                            //x[], Y[], and rain[,] contains all data from ascii grid files.

                            //Write .LRAIN:
                            var saveLRAINFileDialog = new SaveFileDialog
                            {
                                Filter = "LRAIN files (*.LRAIN)|*.LRAIN",
                                InitialDirectory = path,
                                FileName = _currentProjectName + ".LRAIN Test",
                                FilterIndex = 1,
                                RestoreDirectory = true
                            };

                            if (saveLRAINFileDialog.ShowDialog() == DialogResult.OK)
                            {
                                //Count number points with at least one significant rain value (with no "novalue");
                                int numberOfSignificantRains = 0;
                                for (int thisPoint = 0; thisPoint < nPoints; thisPoint++)
                                {
                                    //Check rain[thisPoint,*] has at least one meaningfull value (i.e != novalue) in any ASCII file:
                                    for (int thisASCIIFile = 0; thisASCIIFile < Math.Abs(numberOfASCIIFiles); thisASCIIFile++)
                                    {
                                        if (rain[thisPoint, thisASCIIFile] >= 0)
                                        {
                                            numberOfSignificantRains++;
                                            break;
                                        };
                                    }
                                }


                                Cursor = Cursors.WaitCursor;
                                TextWriter lrain = new StreamWriter(saveLRAINFileDialog.FileName);
                                try
                                {
                                    int timesToWrite = 2 * Math.Abs(numberOfASCIIFiles) - 1;
                                    //Write .LRAIN file:

                                    //Number of rain/evaporation zones and parameters:
                                    lrain.WriteLine(-numberOfSignificantRains);

                                    int nNoValues = 0;
                                    for (int thisPoint = 0; thisPoint < nPoints; thisPoint++)
                                    {
                                        //Check rain[thisPoint,*] has at least one meaningfull value (i.e != novalue) in any ASCII file:
                                        bool thereIsAValue = false;
                                        for (int thisASCIIFile = 0; thisASCIIFile < Math.Abs(numberOfASCIIFiles); thisASCIIFile++)
                                        {
                                            if (rain[thisPoint, thisASCIIFile] >= 0)
                                            {
                                                thereIsAValue = true;
                                                break;
                                            };
                                        }

                                        if (thereIsAValue)
                                        {
                                            lrain.WriteLine("  " + timesToWrite);
                                            //Write (time, rainfall, evaporation):
                                            double theRain;
                                            for (int thisASCIIGridFile = 0; thisASCIIGridFile < Math.Abs(numberOfASCIIFiles) - 1; ++thisASCIIGridFile)
                                            {
                                                if (rain[thisPoint, thisASCIIGridFile] >= 0.0)
                                                {
                                                    theRain = rain[thisPoint, thisASCIIGridFile] / Math.Abs(times[thisASCIIGridFile] - times[thisASCIIGridFile + 1]);
                                                }
                                                else
                                                {
                                                    theRain = 0;
                                                }

                                                double milesima = (times[thisASCIIGridFile + 1] - times[thisASCIIGridFile]) / 1000.00;
                                                lrain.WriteLine("{0,-10:0.0000}{1,20:0.000000000}{2,10}", times[thisASCIIGridFile], theRain, "0.0");
                                                lrain.WriteLine("{0,-10:0.0000}{1,20:0.000000000}{2,10}", times[thisASCIIGridFile + 1] - milesima, theRain, "0.0");
                                            }
                                            //Write (time, rain, evaporation) for last time:
                                            if (rain[thisPoint, Math.Abs(numberOfASCIIFiles) - 1] >= 0.0)
                                            {
                                                theRain = rain[thisPoint, Math.Abs(numberOfASCIIFiles) - 1] / Math.Abs(times[Math.Abs(numberOfASCIIFiles) - 1] - times[Math.Abs(numberOfASCIIFiles) - 2]);
                                            }
                                            else
                                            {
                                                theRain = 0;
                                            }

                                            lrain.WriteLine("{0,-10:0.0000}{1,20:0.000000000}{2,10}", times[Math.Abs(numberOfASCIIFiles) - 1], theRain, "0.0");


                                            //Write coordinates of cell:      
                                            if (numberOfASCIIFiles < 0)
                                            {
                                                lrain.WriteLine("  4");
                                                //Write vertices of point:
                                                lrain.WriteLine("{0,-10:0.0000}{1,20:0.0000}", (x[thisPoint] - cellSize / 2), (y[thisPoint] + cellSize / 2));
                                                lrain.WriteLine("{0,-10:0.0000}{1,20:0.0000}", (x[thisPoint] - cellSize / 2), (y[thisPoint] - cellSize / 2));
                                                lrain.WriteLine("{0,-10:0.0000}{1,20:0.0000}", (x[thisPoint] + cellSize / 2), (y[thisPoint] - cellSize / 2));
                                                lrain.WriteLine("{0,-10:0.0000}{1,20:0.0000}", (x[thisPoint] + cellSize / 2), (y[thisPoint] + cellSize / 2));
                                            }
                                            else
                                            {
                                                lrain.WriteLine("  1");
                                                //Write center of point:
                                                lrain.WriteLine("{0,-10:0.0000}{1,20:0.0000}", x[thisPoint], y[thisPoint]);
                                            }
                                        }
                                        else
                                        {
                                            nNoValues++;
                                        }
                                    }

                                    //lrain.WriteLine(nNoValues);

                                    lrain.Close();

                                    //using (var reader = new StreamReader(file))
                                    //{
                                    //    using (var writer = new StreamWriter(fixed))
                                    //    {
                                    //        var line = reader.ReadLine();
                                    //        var fixedLine = parseHeaders(line);
                                    //        writer.WriteLine(fixedLine);

                                    //        while ((line = reader.ReadLine()) != null)
                                    //            writer.WriteLine(line);
                                    //    }
                                    //}

                                    ////////if (nNoValues > 0)
                                    ////////{
                                    ////////    string[] arrLine = File.ReadAllLines(saveLRAINFileDialog.FileName);
                                    ////////    arrLine[0] = (-nPoints + nNoValues).ToString();
                                    ////////    File.WriteAllLines(saveLRAINFileDialog.FileName, arrLine);
                                    ////////}

                                }
                                catch (Exception ex)
                                {
                                    lrain.Close();
                                    MessageBox.Show(Universal.Idioma("ERROR 2608171928: error while saving .LRAIN file.", "ERROR 2608171928: error almacenando archivo .LRAIN.") +
                                        Environment.NewLine + ex.Message, "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                }

                                Cursor = Cursors.Default;
                            }
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show(Universal.Idioma("ERROR 2408170617: error reading file", "ERROR 2408170617: error leyendo archivo") +
                                "\n\n" + path + "\\" + asciiFileName +
                                Environment.NewLine + ex.Message, "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                        finally
                        {
                            catalogue.Close();
                        }
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(Universal.Idioma("ERROR 2308171645: error reading file", "ERROR 2308171645: error leyendo archivo") +
                            "\n\n" + rainfallCatalogue.FileName +
                            Environment.NewLine + ex.Message, "RiverFlow2D", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    finally
                    {
                        catalogue.Close();
                    }
                }
                else
                    MessageBox.Show(Universal.Idioma("WARNING: file " + "\n\n" + rainfallCatalogue.FileName + "\n\n" + " is empty.", "ADVERTENCIA: el archivo" + "\n\n" + rainfallCatalogue.FileName + "\n\n" + " está vacío."),
                        "RiverFlow2D", MessageBoxButtons.OK,
                        MessageBoxIcon.Warning);

            }
            Cursor = Cursors.Default;
        }

        private void chckComputeMassBalance_Validated(object sender, EventArgs e)
        {
            UpdateData(chckComputeMassBalance);
        }

        private void dataCrossSection_KeyPress(object sender, KeyPressEventArgs e)
        {
            int colIndex = dataCrossSection.CurrentCell.ColumnIndex;
            if (colIndex >= 1 && colIndex <= 5)
            {
                //check if pressed key is number, decimal or backspace
                if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                    e.Handled = true;
                else if (e.KeyChar == '.')
                {
                    if (dataCrossSection != null &&
                        dataCrossSection.EditingControl.Text.Contains("."))
                        e.Handled = true;
                    else
                        e.Handled = false;
                }
                else
                    e.Handled = false;
            }
        }

        private void dataCrossSection_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {

            int colIndex = dataCrossSection.CurrentCell.ColumnIndex;
            if (colIndex >= 1 && colIndex <= 5) //allow numbers
            {
                var textbox = e.Control as DataGridViewTextBoxEditingControl;
                textbox.KeyPress -= new KeyPressEventHandler(dataCrossSection_KeyPress);
                textbox.KeyPress += new KeyPressEventHandler(dataCrossSection_KeyPress);
            }
        }

        private void dataProfile_KeyPress(object sender, KeyPressEventArgs e)
        {
            int colIndex = dataProfile.CurrentCell.ColumnIndex;
            if (colIndex >= 1 && colIndex <= 5)
            {
                //check if pressed key is number, decimal or backspace
                if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                    e.Handled = true;
                else if (e.KeyChar == '.')
                {
                    if (dataProfile != null &&
                        dataProfile.EditingControl.Text.Contains("."))
                        e.Handled = true;
                    else
                        e.Handled = false;
                }
                else
                    e.Handled = false;
            }
        }

        private void lblPollutantTransportPlusDispersionCoeffPlus_Click(object sender, EventArgs e)
        {

        }

        private void panelBedLoadSediment_Paint(object sender, PaintEventArgs e)
        {

        }

        private void tabPageInfiltration_Click(object sender, EventArgs e)
        {

        }

        private void panelBottomControls_Paint(object sender, PaintEventArgs e)
        {

        }

        private void txtManningsFactor_TextChanged(object sender, EventArgs e)
        {

        }

        private void comboOilFlowResistance_Validated(object sender, EventArgs e)
        {
            UpdateData(comboOilFlowResistance);
        }

        private void comboOilFlowResistance_SelectedIndexChanged(object sender, EventArgs e)
        {
            //UpdateData(comboOilFlowResistance);
        }

        private void txtOilSpillOnLandYieldStress_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = CheckForReal(txtOilSpillOnLandYieldStress, e);
        }

        private void txtOilSpillOnLandYieldStress_Validated(object sender, EventArgs e)
        {
            if (txtOilSpillOnLandYieldStress.Text != "") UpdateData(txtOilSpillOnLandYieldStress);
        }

        private void txtOilSpillOnLandYieldStress_Validating(object sender, CancelEventArgs e)
        {
            if (txtOilSpillOnLandYieldStress.Text == "")
                AddError(txtOilSpillOnLandYieldStress, Universal.Idioma("Yield stress cannot be empty.", "El esfuerzo de cedencia no puede estar vacío."), "Oil Spill on Land panel");
            else
                RemoveError(txtOilSpillOnLandYieldStress);
        }

        private void comboYieldStressRelation_SelectedIndexChanged(object sender, EventArgs e)
        {

            UpdateYieldStress();

        }

        private void comboViscosityRelation_SelectedIndexChanged(object sender, EventArgs e)
        {
            UpdateViscosity();
        }

        private void txtCv_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = CheckForReal(txtCv, e);
        }

        private void txtCv_Validated(object sender, EventArgs e)
        {
            if (txtCv.Text != "") UpdateData(txtCv);
        }

        private void txtCv_Validating(object sender, CancelEventArgs e)
        {
			if (txtCv.Text == "")
			{
				AddError(txtCv, Universal.Idioma("Volumetric concentration cannot be empty.",
												 "Concentración volumétrica no puede estar vacía."), "Mud/Debris panel");
				return;
			}
			double x = Double.Parse(txtCv.Text);
			if (x < 0.0 || x > 0.9)
			{
				AddError(txtCv, Universal.Idioma("Volumetric concentration must be in the range [0.0, 0.9]", "Concentración volumétrica debe estar en el intervalo  [0.0, 0.9]"), "Mud/Debris panel");
			}
			else RemoveError(txtCv);

		}

        private void txtCv_TextChanged(object sender, EventArgs e)
        {
            UpdateYieldStress();
            UpdateViscosity();
			UpdateMaterialDensity();
        }

        private void UpdateYieldStress()
        {
            if (txtCv.Text != "" & txtCv.Text != ".")
            {
                double Ys = -999;
                double Cv = Convert.ToDouble(txtCv.Text);
                txtYieldStress.Enabled = false;
                RemoveError(txtYieldStress);
                switch (comboYieldStressRelation.SelectedIndex)
                {
                    case 0:
                        txtYieldStress.Enabled = true;
                        break;

                    case 1:
                        Ys = 5.88 * Math.Pow(10, -3) * Math.Exp(19.1 * Cv);
                        break;

                    case 2:
                        Ys = 5.88 * Math.Pow(10, -3) * Math.Exp(32.1 * Cv);
                        break;

                    case 3:
                        Ys = 25.78 * Math.Pow(10, 2) * Math.Pow(Cv, 5.4);
                        break;

                    case 4:
                        Ys = 98.9810 * Math.Pow(10, 2) * Math.Pow(Cv, 5.4);
                        break;

                    case 5:
                        Ys = 1.28 * Math.Pow(10, 3) * Cv ;
                        break;

                    case 6:
                        Ys = 0.1 * Math.Exp(3 * (Cv - 0.05));
                        break;

                    case 7:
                        Ys = 0.1 * Math.Exp(13 * (Cv - 0.05));
                        break;

                    case 8:
                        Ys = 0.1 * Math.Exp(23 * (Cv - 0.05));
                        break;

                    case 9:
                        Ys = 0.181 * Math.Exp(25.7 * Cv) / 10;
                        break;

                    case 10:
                        Ys = 2.72 * Math.Exp(10.4 * Cv) / 10;
                        break;

                    case 11:
                        Ys = 0.152 * Math.Exp(18.7 * Cv) / 10;
                        break;

                    case 12:
                        Ys = 0.0473 * Math.Exp(21.1 * Cv) / 10;
                        break;

                    case 13:
                        Ys = 0.0383 * Math.Exp(19.6 * Cv) / 10;
                        break;

                    case 14:
                        Ys = 0.291 * Math.Exp(14.3 * Cv) / 10;
                        break;

                    case 15:
                        Ys = 0.0345 * Math.Exp(20.1 * Cv) / 10;
                        break;

                    case 16:
                        Ys = 0.0765 * Math.Exp(16.9 * Cv) / 10;
                        break;

                    case 17:
                        Ys = 0.000707 * Math.Exp(29.8 * Cv) / 10;
                        break;

                    case 18:
                        Ys = 0.00172 * Math.Exp(29.5 * Cv) / 10;
                        break;

                    case 19:
                        Ys = 2.6 * Math.Exp(17.48 * Cv) / 10;
                        break;

                    case 20:
                        Ys = 1.75 * Math.Exp(7.82 * Cv) / 10;
                        break;

                    case 21:
                        Ys = 0.00136 * Math.Exp(21.2 * Cv) / 10;
                        break;

                    case 22:
                        Ys = 0.0588 * Math.Exp(19.1 * Cv) / 10;
                        break;

                    case 23:
                        Ys = 0.166 * Math.Exp(25.6 * Cv) / 10;
                        break;
                }

                if (Ys != -999)
                {
                    if (Universal.RiverUnits == "English")
                    {
                        Ys = Ys * 0.0000145;
                        txtYieldStress.Text = Ys.ToString("0.00000000000");
                    }
                    else
                        txtYieldStress.Text = Ys.ToString("0.00000000");

                }
                if (Ys > 1000000)
                //txtYieldStress.Text = Double.MaxValue.ToString("0.###E+00");
                {
                    Ys = 10000000;
                    txtYieldStress.Text = Ys.ToString("0.###E+00");
                }

                UpdateData(txtYieldStress);
            }
        }

        private void UpdateViscosity()
        {
            if (txtCv.Text != "" & txtCv.Text != ".")
            {
                double Visc = -999;
                double Cv = Convert.ToDouble(txtCv.Text);
                txtBinghamViscosity.Enabled = false;
                RemoveError(txtBinghamViscosity);
                switch (comboViscosityRelation.SelectedIndex)
                {
                    case 0:
                        txtBinghamViscosity.Enabled = true;
                        break;

                    case 1:
                        Visc = 0.001 *(1+2.5* Cv + Math.Exp(10 * (Cv - 0.05))) ;
                        break;

                    case 2:
                        Visc = 0.001 * (1 + 2.5 + Cv * Math.Exp(10 * (Cv - 0.05)));
                        break;

                    case 3:
                        Visc = 0.036 * Math.Exp(22.1 * Cv) / 10;
                        break;

                    case 4:
                        Visc = 0.0538 * Math.Exp(14.5 * Cv) / 10;
                        break;

                    case 5:
                        Visc = 0.00136 * Math.Exp(28.4 * Cv) / 10;
                        break;

                    case 6:
                        Visc = 0.128 * Math.Exp(12 * Cv) / 10;
                        break;

                    case 7:
                        Visc = 0.000495 * Math.Exp(27.1 * Cv) / 10;
                        break;

                    case 8:
                        Visc = 0.000201 * Math.Exp(33.1 * Cv) / 10;
                        break;

                    case 9:
                        Visc = 0.00283 * Math.Exp(23 * Cv) / 10;
                        break;

                    case 10:
                        Visc = 0.648 * Math.Exp(6.2 * Cv) / 10;
                        break;

                    case 11:
                        Visc = 0.00632 * Math.Exp(19.9 * Cv) / 10;
                        break;

                    case 12:
                        Visc = 0.000602 * Math.Exp(33.1 * Cv) / 10;
                        break;

                    case 13:
                        Visc = 0.0000373 * Math.Exp(36.6 * Cv) / 10;
                        break;

                    case 14:
                        Visc = 0.0075 * Math.Exp(14.39 * Cv) / 10;
                        break;

                    case 15:
                        Visc = 0.0405 * Math.Exp(8.29 * Cv) / 10;
                        break;
                }
                if (Visc != -999)
                {
                    if (Universal.RiverUnits == "English")
                    {
                        Visc = Visc * 0.0000145;
                        txtBinghamViscosity.Text = Visc.ToString("0.00000000000");
                    }
                    else
                        txtBinghamViscosity.Text = Visc.ToString("0.0000000");
                }

                if (Visc > 1000000)
                {
                    Visc = 10000000;
                    txtBinghamViscosity.Text = Visc.ToString("0.###E+00");
                }

                UpdateData(txtBinghamViscosity);
            }
        }

        private void comboYieldStressRelation_Validated(object sender, EventArgs e)
        {
            UpdateData(comboYieldStressRelation);
        }

        private void comboViscosityRelation_Validated(object sender, EventArgs e)
        {
            UpdateData(comboViscosityRelation); 
        }

        private void RemoveAllErrors(TabPage page)
        {
            int size = page.Controls.Count;

            for (int i = 0; i < size; ++i)
            {
                //page.Controls[i].Enabled = chckGraphicOutput.Checked;
                RemoveError(page.Controls[i]);

                if (page.Controls[i] is Panel)
                {
                    int sizePanel = page.Controls[i].Controls.Count;

                    for (int j = 0; j < sizePanel; ++j)
                    {
                        //page.Controls[i].Controls[j].Enabled = chckGraphicOutput.Checked;
                        RemoveError(page.Controls[i].Controls[j]);
                    }
                }
            }

        }

        private void groupBox1_Enter(object sender, EventArgs e)
        {

        }

        private void groupBoxModel_Enter(object sender, EventArgs e)
        {

        }

        private void radioGPU_CheckedChanged(object sender, EventArgs e)
        {
            if (!loading)
                ChangeModel();
        }



        private void ChangeModel()
        {
            RiverFlo2D.RiverDipNewModel = "";

            string newModel = "";
            if (radioCPU.Checked && RiverFlo2D.RiverDipModel != "Model CPU")
            {
                newModel = "Model CPU";
            }
            else if (radioGPU.Checked && RiverFlo2D.RiverDipModel != "Model GPU")
            {
                newModel = "Model GPU";
            }

            if (newModel != "")
            {
                //Change model name in version.config.
                TextWriter sr = new StreamWriter("version.config");
                sr.WriteLine(newModel);
                sr.Close();
                RiverFlo2D.RiverDipNewModel = newModel;
            }

            if (RiverFlo2D.RiverDipNewModel != "")
                if (RiverDipModel != RiverFlo2D.RiverDipNewModel)
                {
                    SetRiverDipModel(RiverFlo2D.RiverDipNewModel);
                    FixGraphicOutputPlotOptions();
                }
        }

        private void radioCPU_CheckedChanged(object sender, EventArgs e)
        {
            if (!loading)
                ChangeModel();
        }


        private void comboLanguage_SelectedIndexChanged(object sender, EventArgs e)
        {

            if (loading)
                return;

            {
                string lang = comboLanguage.Text.Trim();
                if (lang == "Español")
                    lang = "Spanish";
                else if (lang == "Ingles")
                    lang = "English";

                if (Universal.DIPLanguage != lang)
                {
                    DialogResult dlg = MessageBox.Show(Universal.Idioma("To display the new language (" + lang + "), the application must be restarted.\n\n" +
                         "Click 'Yes' to restart or 'No' to cancel your change of language.",
                         "Para mostrar el nuevo lenguaje (" + lang + "), el programa debe reiniciarse.\n\n" +
                         "Pulse 'Yes' para reiniciar o 'No' para cancelar el cambio de lenguaje."), "RiverFlow2D", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

                    if (dlg == DialogResult.Yes)
                    {
                        _closeAndOpen = true;
                        Close();

                    }
                    else
                    {
                        loading = true;
                        // If not closed, restore previous language:
                        if (Universal.DIPLanguage == "Spanish")
                            comboLanguage.SelectedIndex = 0;
                        else
                            comboLanguage.SelectedIndex = 1;
                        loading = false;
                    }
                }
            }



            //Thread.CurrentThread.CurrentUICulture = new CultureInfo("en-US");
            //this.Controls.Clear();
            //this.InitializeComponent();

            //else if (comboLanguage.SelectedIndex == 1)
            //{
            //    _
            //        //Thread.CurrentThread.CurrentUICulture = new CultureInfo("es-MX");
            //        //this.Controls.Clear();
            //        //this.InitializeComponent();
            //}
        }

        private void comboLanguage_Validated(object sender, EventArgs e)
        {
            //UpdateData(comboLanguage);
        }

        private void lblTimeStep_Click(object sender, EventArgs e)
        {

        }

        private void lblTimeStepFactor_Click(object sender, EventArgs e)
        {

        }

        private void txtSuspendedSedLongitudinalDispCoeff_KeyPress(object sender, KeyPressEventArgs e)
        {
            //checking whether pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
                //check if there is already a decimal point
                if (txtSuspendedSedLongitudinalDispCoeff.Text.Contains("."))
                    e.Handled = true;
        }

        private void txtSuspendedSedTransversalDispCoeff_KeyPress(object sender, KeyPressEventArgs e)
        {
            //checking whether pressed key is number, decimal or backspace
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '\b')
                e.Handled = true;
            else if (e.KeyChar == '.')
                //check if there is already a decimal point
                if (txtSuspendedSedTransversalDispCoeff.Text.Contains("."))
                    e.Handled = true;
        }

        private void txtSuspendedSedLongitudinalDispCoeff_Validated(object sender, EventArgs e)
        {
            UpdateData(txtSuspendedSedLongitudinalDispCoeff);
        }

        private void txtSuspendedSedTransversalDispCoeff_Validated(object sender, EventArgs e)
        {
            UpdateData(txtSuspendedSedTransversalDispCoeff);
        }

        private void txtSuspendedSedLongitudinalDispCoeff_Validating(object sender, CancelEventArgs e)
        {
            if (txtSuspendedSedLongitudinalDispCoeff.Text == "")
            {
                AddError(txtSuspendedSedLongitudinalDispCoeff, Universal.Idioma("Longitudinal dispersion coefficient cannot be empty.", "El coeficiente de dispersión longitudinal no puede estar vacío."),
                    "Sediment Transport panel");
                return;
            }
            double x = Double.Parse(txtSuspendedSedLongitudinalDispCoeff.Text);
            if (x < 0.0)
            {
                AddError(txtSuspendedSedLongitudinalDispCoeff, Universal.Idioma("Longitudinal dispersion coefficient cannot be negative", "El coeficiente de dispersión longitudinal no puede ser negativo."),
                    "Sediment Transport panel");
            }
            else
            {
                RemoveError(txtSuspendedSedLongitudinalDispCoeff);
            }
        }

        private void txtSuspendedSedLongitudinalDispCoeff_TextChanged(object sender, EventArgs e)
        {
            if (txtSuspendedSedLongitudinalDispCoeff.Text != "") UpdateData(txtSuspendedSedLongitudinalDispCoeff);
        }

        private void txtSuspendedSedTransversalDispCoeff_TextChanged(object sender, EventArgs e)
        {
            if (txtSuspendedSedTransversalDispCoeff.Text != "") UpdateData(txtSuspendedSedTransversalDispCoeff);
        }

        private void txtSuspendedSedTransversalDispCoeff_Validating(object sender, CancelEventArgs e)
        {
            if (txtSuspendedSedTransversalDispCoeff.Text == "")
            {
                AddError(txtSuspendedSedTransversalDispCoeff, Universal.Idioma("Transversal dispersion coefficient cannot be empty.", "El coeficiente de dispersión transversal no puede estar vacío."),
                    "Sediment Transport panel");
                return;
            }
            double x = Double.Parse(txtSuspendedSedTransversalDispCoeff.Text);
            if (x < 0.0)
            {
                AddError(txtSuspendedSedTransversalDispCoeff, Universal.Idioma("Tranversal dispersion coefficient cannot be negative", "El coeficiente de dispersión transversal no puede ser negativo."),
                    "Sediment Transport panel");
            }
            else
            {
                RemoveError(txtSuspendedSedTransversalDispCoeff);
            }
        }

        private void chckCoupledComputation_Validated(object sender, EventArgs e)
        {
            UpdateData(chckCoupledComputation);
        }

        private void txtSuspendedSedimentFactorWS_TextChanged(object sender, EventArgs e)
        {
            if (txtSuspendedSedimentFactorWS.Text != "") UpdateData(txtSuspendedSedimentFactorWS);
        }

        private void chckMaterialDensity_CheckedChanged(object sender, EventArgs e)
        {
			UpdateMaterialDensity();

        }

        private void UpdateMaterialDensity()
        {
            if (chckMaterialDensity.Checked)
            {
                txtMaterialDensity.Enabled = false;
                double density = 0.0;
				double Cv = 0;
				if (txtCv.Text != "" & txtCv.Text != ".")
					Cv = Convert.ToDouble(txtCv.Text);
				if (Universal.RiverUnits == "Metric")
                    density = 1000 * (1 + (2.65 - 1) * Cv);
                else
                    density = 62.37191 * (1 + (2.65 - 1) * Cv);
                txtMaterialDensity.Text = density.ToString();
            }
            else
                txtMaterialDensity.Enabled = true;
        }

		private void chckMaterialDensity_Validated(object sender, EventArgs e)
		{
			UpdateData(chckMaterialDensity);
		}

		private void chckComputeMassBalance_CheckedChanged(object sender, EventArgs e)
		{

		}

		private void dataOBCPSeries_MouseClick(object sender, MouseEventArgs e)
		{
			if (e.Button == MouseButtons.Right)
			{
				int currentMouseOverRow = dataOBCPSeries.HitTest(e.X, e.Y).RowIndex;
				if (currentMouseOverRow >= 0)
				{
					auxiliaryDataGridView = dataOBCPSeries;
					auxiliaryFileName = _currentProjectPath + "\\" +
										 dataOBCP.Rows[dataOBCP.CurrentCell.RowIndex].Cells[1].Value.ToString();
					contextCutCopyPaste.Show(dataOBCPSeries, new Point(e.X, e.Y));
				}
			}
		}
	}


}